[
  {
    "objectID": "32_figures.html",
    "href": "32_figures.html",
    "title": "Main figures",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n#loading additional packages\nlibrary(cowplot) #for plot_grid() (multiple plots) \n\n#path for data \npath_source &lt;- \"\"\n\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(\n      plot.title = element_text(face=\"bold\")\n      )\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\n#caption for all graphs\nSource &lt;- \"Source: data.europa.eu\\ncomputation by Thomas Starck\"\n\n# Load the functions file\nsource(\"functions.R\")\n\n\n\nRemoval efficiency and sensitive area\nWe load the geographical data of the 6 water agencies. We load the data of the sensitive zones and focus only on metropolitan France.\n\n\nCode\nbasins &lt;- sf::st_read(\"source_data/maps/water_agencies/simplified_CircAdminBassin2021/CircAdminBassin2021.shp\")\n\nbasins_metropole &lt;- basins %&gt;%\n  filter(\n    NumCircAdm %in% c(\"01\", \"02\", \"03\", \"04\", \"05\", \"06\")\n  ) %&gt;%\n  select(\n    basin_name = NomCircAdm, \n    basin_num = NumCircAdm\n  ) %&gt;%\n  mutate(\n    basin_name = case_when(\n      basin_name == \"ADOUR-GARONNE\" ~ \"Adour-Garonne\",\n      basin_name == \"ARTOIS-PICARDIE\" ~ \"Artois-Picardie\",\n      basin_name == \"LOIRE-BRETAGNE\" ~ \"Loire-Bretagne\",\n      basin_name == \"RHIN-MEUSE\" ~ \"Rhin-Meuse\",\n      basin_name == \"RHONE-MEDITERRANEE\" ~ \"Rhone-Méditerranée\",\n      basin_name == \"SEINE-NORMANDIE\" ~ \"Seine-Normandie\"\n    )\n  )\n\n\n\n\nCode\nfile_sensitive_zones &lt;- sf::st_read(\"source_data/maps/sensitive_zones/ZoneSensible_FRA_ZRPE_2_simplified/ZoneSensible_FRA_ZRPE_2.shp\") %&gt;%\n  rename(EU_code_zone = CdEuZS)\n\nfile_sanitation_portal &lt;- readxl::read_excel(\"source_data/maps/sensitive_zones/Export_ZS_2020_05_29-1.xlsx\", range = \"A1:I142\") %&gt;%\n  rename(EU_code_zone = `Code-européen  CM* - CA*`) %&gt;%\n  mutate(\n    basin = case_when(\n      substr(code_national, 1, 2) == \"01\" ~  \"Artois-Picardie\",\n      substr(code_national, 1, 2) == \"02\" ~  \"Rhin-Meuse\",\n      substr(code_national, 1, 2) == \"03\" ~ \"Seine-Normandie\", \n      substr(code_national, 1, 2) == \"04\" ~ \"Loire-Bretagne\",\n      substr(code_national, 1, 2) == \"05\" ~  \"Adour-Garonne\",\n      substr(code_national, 1, 2) == \"06\" ~  \"Rhône-Méditerranée\",\n      T~\"Overseas\"\n    )\n  )\n\ntemp &lt;- merge(file_sensitive_zones, file_sanitation_portal, by=\"EU_code_zone\")\n\ntemp &lt;- temp %&gt;%\n  select(\n    #sanitation portal file\n    EU_code_zone, code_national, nom, nom_court, traitement_requis, basin,\n    date_arrêté_N, date_arrêté_P, date_conformité_N, date_conformité_P,\n    \n    #EU file\n    gml_id, gid, NomZS, NomCourtZS, StZS, timePositi, CdTraiteme, LbTraiteme, DateLimite,\n    CdTypeZone, MnTypeZone, LbTypeZone, \n    DatePubliT, #date of decree for P sensitive zone ?\n    DateLimi_1, #date of decree for N sensitive zone ?\n    DatePubl_1, \n    ComZS\n  )\n\n#final file\nsensitive_zones &lt;- temp %&gt;%\n  select(\n    basin,\n    P_decree_date = date_arrêté_P, \n    N_decree_date = date_arrêté_N,\n    P_conformity_date = date_conformité_P, \n    N_conformity_date = date_conformité_N,\n    sensitive_type = LbTraiteme,\n    name_sensitive_zone = NomCourtZS,\n    id_sensitive_zone = gid,\n    geometry\n    \n  )\n\n#remove non-metropolitan sensitive zones\nmetropole &lt;- function(map_sf){\n  map_sf &lt;- map_sf %&gt;% \n    filter(!id_sensitive_zone %in% c(14, 15, 16, 17, 18, 137, 138, 139, 140, 141))\n  return(map_sf)\n}\nsensitive_zones &lt;- metropole(sensitive_zones)\n\n\nFunction to draw sensitive zones according to last decree (2017).\n\n\nCode\nbasin_names &lt;- c(\"Seine-Normandie\", \"Loire-Bretagne\", \"Artois-Picardie\", \"Adour-Garonne\", \"Rhin-Meuse\", \"Rhône-Méditerranée\")\nbasin_colors &lt;- c(\"#440154\", \"#414487\", \"#2a788e\", \"#7ad151\", \"#22a884\", \"#fde725\")\ndraw_map &lt;- function(sensitive_zones, basins_metropole, nutrient_decree){\n  temp &lt;-  sensitive_zones %&gt;%\n    select(\n      basin, !!as.symbol(nutrient_decree), geometry\n      ) %&gt;%\n    filter(is.na(!!as.symbol(nutrient_decree))==F)\n  \n  p &lt;- ggplot(temp) + \n    geom_sf(\n      aes(fill=basin), \n      color = NA, size=0, alpha=.6\n      ) + \n    scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n    geom_sf(\n      data = basins_metropole, \n      color = \"black\", fill=NA,\n      ) +\n    coord_sf(datum = NA, expand = FALSE) + #remove coordinates\n    theme(panel.background = element_blank()) +\n    labs(\n      fill=\"\"\n    ) + \n    theme(legend.position = \"none\")\n  return(p)\n}\n\n\nWe create a file combining the different basins flows and ratios, for metropolitan France and for each basin. Since the Seine-Normandie basin data is only available for 2015, we also load the SIAAP data, containing 5 of the largest WWTP of Seine-Normandie, over a longer time period.\n\n\nCode\npath_source &lt;- \"output_data/basins/\"\n#artois-picardie\nfile_basin_artois_picardie &lt;- read_csv(paste0(path_source, \"basin_01_artois_picardie.csv\")) %&gt;% \n  mutate(basin=\"Artois-Picardie\")\n#rhin-meuse\nfile_basin_rhin_meuse &lt;- read_csv(paste0(path_source, \"basin_02_rhin_meuse.csv\")) %&gt;% \n  mutate(basin=\"Rhin-Meuse\")\n#SIAAP\nfile_basin_SIAAP &lt;- read_csv(paste0(path_source, \"basin_03_SIAAP.csv\")) %&gt;%\n  mutate(basin=\"SIAAP\")\n#Seine-Normandie\nfile_basin_seine_normandie &lt;- read_csv(paste0(path_source, \"basin_03_seine_normandie.csv\")) %&gt;%\n  mutate(basin=\"Seine-Normandie\")\n#Loire-Bretagne\nfile_basin_loire_bretagne &lt;- read_csv(paste0(path_source, \"basin_04_loire_bretagne.csv\")) %&gt;% \n  mutate(basin=\"Loire-Bretagne\")\n#Adour-Garonne\nfile_basin_adour_garonne &lt;- read_csv(paste0(path_source, \"basin_05_adour_garonne.csv\")) %&gt;% \n  mutate(basin=\"Adour-Garonne\")\n#Rhone-Mediterranée\nfile_basin_rhone_mediterranee &lt;- read_csv(paste0(path_source, \"basin_06_rhone_mediterranee.csv\")) %&gt;% \n  mutate(basin=\"Rhône-Méditerranée\")\n\nfile_basin &lt;- \n  bind_rows(\n    file_basin_artois_picardie,\n    file_basin_rhin_meuse,\n    file_basin_seine_normandie,\n    file_basin_loire_bretagne,\n    file_basin_adour_garonne,\n    file_basin_rhone_mediterranee\n  )\nrm(\n  file_basin_artois_picardie, \n  file_basin_rhin_meuse, \n  file_basin_seine_normandie, \n  file_basin_loire_bretagne, \n  file_basin_adour_garonne, \n  file_basin_rhone_mediterranee\n  )\nfile_basin &lt;- file_basin %&gt;%\n  mutate(\n    Pt_yield = Pt_yield/100,\n    NGL_yield = NGL_yield/100\n  )\nfile_basin_SIAAP &lt;- file_basin_SIAAP %&gt;%\n  mutate(\n    Pt_yield = Pt_yield/100,\n    NGL_yield = NGL_yield/100\n  )\n\n\nFunction to draw removal efficiencies by basins.\n\n\nCode\nf_graph_yield_basin &lt;- function(dataset, nutrient_yield, yield_label){\n\n  g &lt;- ggplot(dataset) +\n    #basins and the adapted legend\n    geom_line(\n      data = dataset %&gt;% filter(basin != \"Seine-Normandie\"), #seine normandie in points and not lines\n      aes(Year, !!as.symbol(nutrient_yield), color=basin),\n      linewidth=1, alpha=.6\n      ) +\n    guides(\n        color =\n          guide_legend(\n            override.aes =\n              list(\n                linetype = c(3, 1, 1, 1, 1, 1),\n                shape = c(19, NA, NA, NA, NA, NA)\n                )\n            )\n      ) +\n    #SIAAP data\n    geom_line(\n      data=file_basin_SIAAP, \n      color=\"#440154\", linetype=\"dotted\", linewidth=1, alpha=.6,\n      aes(Year, !!as.symbol(nutrient_yield))\n    ) +\n    scale_color_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n    #Seine-Normandie 2015 point\n    geom_point(\n      data = dataset %&gt;% filter(basin==\"Seine-Normandie\"), \n      aes(Year, !!as.symbol(nutrient_yield), color=basin), alpha=.7\n      ) +\n    scale_y_continuous(\n      limits = c(0, 1),\n      breaks = seq(0, 1, 0.2),\n      labels = scales::label_percent()\n    ) +\n    scale_x_continuous(\n      limits = c(1990, 2020),\n      breaks = seq(1990, 2020, 10)\n    ) +\n    labs(\n      x=\"\", y=\"removal efficiency\", color=\"\",\n      linetype = \"\"\n    ) +\n  theme(legend.position = \"bottom\")\n  return(g)\n}\n\n\n\nPhosphorusNitrogen\n\n\n\n\nCode\ng1 &lt;- draw_map(sensitive_zones, basins_metropole, \"P_decree_date\") \ng2 &lt;- f_graph_yield_basin(file_basin, \"Pt_yield\", \"Pt\") + labs(y=\"P removal efficiency\")\np &lt;- get_plot_component(g2, \"guide-box\", return_all = TRUE)\n\nplot_grid(\n  plot_grid(\n    g1, g2 + theme(legend.position = \"none\"),\n    rel_widths = c(0.35, 0.65), labels = \"auto\"\n    ),\n  p[[3]], rel_heights = c(0.85, 0.15), ncol = 1\n  )\n\n\n\n\n\nCode\nggsave(#svg\n  \"graphs/P_basin_removal_efficiency_sensitive_zone.svg\",\n  dpi=1000, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/P_basin_removal_efficiency_sensitive_zone.pdf\",\n  dpi=1000, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/P_basin_removal_efficiency_sensitive_zone.png\",\n  dpi=1000, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\ng1 &lt;- draw_map(sensitive_zones, basins_metropole, \"N_decree_date\") \ng2 &lt;- f_graph_yield_basin(file_basin, \"NGL_yield\", \"NGL\") + labs(y=\"N removal efficiency\")\np &lt;- get_plot_component(g2, \"guide-box\", return_all = TRUE)\n\nplot_grid(\n  plot_grid(\n    g1, g2 + theme(legend.position = \"none\"),\n    rel_widths = c(0.35, 0.65), labels = \"auto\"\n    ),\n  p[[3]], rel_heights = c(0.85, 0.15), ncol = 1\n  )\n\n\n\n\n\nCode\nggsave(#svg\n  \"graphs/N_basin_removal_efficiency_sensitive_zone.svg\",\n  dpi=1000, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/N_basin_removal_efficiency_sensitive_zone.pdf\",\n  dpi=1000, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/N_basin_removal_efficiency_sensitive_zone.png\",\n  dpi=1000, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\n\nIndividual WWTP removal efficiency by size and sensitive zone\n\n\nCode\nall_WWTP_adour_garonne &lt;- \n  read_csv(\n    \"output_data/all_WWTP/all_WWTP_05_adour_garonne.csv\", \n    #we have to specify the columns types, otherwise problems to combine basins\n    col_types = cols(INSEE_COM=\"numeric\")\n    ) %&gt;%\n  mutate(\n    basin = \"Adour-Garonne\"\n  )\nall_WWTP_rhin_meuse &lt;- \n  read_csv(\n    \"output_data/all_WWTP/all_WWTP_02_rhin_meuse.csv\", \n    #we have to specify the columns types, otherwise problems to combine basins\n    col_types = cols(INSEE_COM=\"numeric\")\n    ) %&gt;%\n  mutate(\n    basin = \"Rhin-Meuse\"\n  )\nall_WWTP_loire_bretagne &lt;- \n  read_csv(\n    \"output_data/all_WWTP/all_WWTP_04_loire_bretagne.csv\", \n    #we have to specify the columns types, otherwise problems to combine basins\n    col_types = cols(INSEE_COM=\"numeric\")\n    ) %&gt;%\n  mutate(\n    basin = \"Loire-Bretagne\"\n  )\nall_WWTP_seine_normandie &lt;- \n  read_csv(\n    \"output_data/all_WWTP/all_WWTP_03_seine_normandie.csv\", \n    #we have to specify the columns types, otherwise problems to combine basins\n    col_types = cols(INSEE_COM=\"numeric\")\n    ) %&gt;%\n  mutate(\n    basin = \"Seine-Normandie\"\n  )\nall_WWTP_rhone_mediterranee &lt;- \n  read_csv(\n    \"output_data/all_WWTP/all_WWTP_06_rhone_mediterranee.csv\", \n    #we have to specify the columns types, otherwise problems to combine basins\n    col_types = cols(INSEE_COM=\"numeric\")\n    ) %&gt;%\n  mutate(\n    basin = \"Rhône-Méditerranée\"\n  )\nall_WWTP_artois_picardie &lt;- \n  read_csv(\n    \"output_data/all_WWTP/all_WWTP_01_artois_picardie.csv\", \n    #we have to specify the columns types, otherwise problems to combine basins\n    col_types = cols(INSEE_COM=\"numeric\")\n    ) %&gt;%\n  mutate(\n    basin = \"Artois-Picardie\"\n  )\n\nall_WWTP &lt;- \n  bind_rows(\n    all_WWTP_adour_garonne, all_WWTP_rhin_meuse, \n    all_WWTP_loire_bretagne, all_WWTP_seine_normandie,\n    all_WWTP_rhone_mediterranee, all_WWTP_artois_picardie\n    ) %&gt;%\n  mutate(\n    NGL_yield = NGL_yield/100,\n    Pt_yield = Pt_yield/100\n  )\n\n\nrm(all_WWTP_adour_garonne, all_WWTP_artois_picardie, all_WWTP_loire_bretagne, all_WWTP_rhin_meuse,\n   all_WWTP_rhone_mediterranee, all_WWTP_seine_normandie)\n\n#order size categories for graph disposition\nall_WWTP$PE_bin &lt;- \n    factor(\n      all_WWTP$PE_bin, \n      levels = \n        c(\"0 - 200 PE\", \n          \"200 - 2 000 PE\", \n          \"2 000 - 10 000 PE\",\n          \"10 000 - 100 000 PE\", \n          \"&gt; 100 000 PE\"\n          )\n        )\n#order the basins for graph disposition\nall_WWTP$basin &lt;- \n  factor(\n    all_WWTP$basin, \n    levels = \n      c(\"Loire-Bretagne\",\n        \"Rhin-Meuse\",\n        \"Adour-Garonne\", \n        \"Rhône-Méditerranée\"\n        )\n      )\n\n\n\n\nCode\n#we load the sanitation portal data to know if individual WWTP are in sensitive zones or not\nfile_sanitation_portal &lt;- read_csv(\"output_data/all_WWTP/all_WWTP_sanitation_portal.csv\") %&gt;%\n  #for 2018-2020 + exclude small WWTP\n  filter(\n    Year&gt;2017 & Year&lt;2021, \n    PE_bin != \"0 - 200 PE\"\n    ) %&gt;%\n  select(\n    code_WWTP, N_sens, P_sens\n    )\n#as there can be occasional misreporting concerning N and P sensitive zones, we take the most frequent value over the 3 years\nfile_sanitation_portal &lt;- file_sanitation_portal %&gt;% \n  group_by(code_WWTP) %&gt;% \n  summarize (\n    N_sens =names(which.max(table(N_sens))),\n    P_sens =names(which.max(table(P_sens)))\n    )\n\n#we take the mean N and P yields over 2018-2020\ntemp &lt;- all_WWTP %&gt;%\n  filter(\n    NGL_yield&gt;0, Pt_yield&gt;0, #exclude incoherent yields\n    Year&gt;2017 & Year&lt;2021, #over 2018-2020\n    PE_bin != \"0 - 200 PE\", #exclude small WWTP\n    is.na(PE_bin)==F,\n    ) %&gt;%\n  group_by(\n    code_WWTP, name_WWTP, basin, PE_bin, capacity\n    ) %&gt;%\n  summarise(\n    NGL_yield = round(mean(NGL_yield, na.rm=T), 2),\n    Pt_yield = round(mean(Pt_yield, na.rm=T), 2)\n    ) %&gt;%\n filter(\n   !basin %in% c(\"Seine-Normandie\", \"Artois-Picardie\")\n )\n\n#merge yield file and sensitive area file, add colors for graph\ntemp &lt;- left_join(file_sanitation_portal, temp, by=\"code_WWTP\") %&gt;%\n  filter(is.na(basin)==F) %&gt;%\n  #colored if in sensitive area + large enough to be in decree\n  mutate(\n    N_sens_color = case_when(\n      PE_bin %in% c(\"PE 200 - 2 000 PE\", \"2 000 - 10 000 PE\") ~ \"grey\",\n      (PE_bin %in% c(\"10 000 - 100 000 PE\", \"&gt; 100 000 PE\") & N_sens == \"oui\") ~ as.character(basin),\n      T ~ \"grey\"\n    ),\n    P_sens_color = case_when(\n      PE_bin %in% c(\"PE 200 - 2 000 PE\", \"2 000 - 10 000 PE\") ~ \"grey\",\n      (PE_bin %in% c(\"10 000 - 100 000 PE\", \"&gt; 100 000 PE\") & P_sens == \"oui\") ~ as.character(basin),\n      T ~ \"grey\"\n    )\n  )\n\n\n\n\nCode\n#function for graph\nf_graph_yield_WWTP &lt;- function(dataset, nutrient_yield, sensitive_color){\n  \n  g &lt;- ggplot(dataset) + \n    geom_jitter(\n      aes(x= PE_bin, y=!!as.symbol(nutrient_yield), size = capacity/10^3, color=!!as.symbol(sensitive_color)), \n      alpha=.5\n      ) +\n    scale_size_continuous(range = c(0, 15)) + \n    scale_color_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n    coord_flip() + \n    scale_y_continuous(\n      limits = c(0, 1),\n      breaks=seq(0, 1, 0.2),\n      labels = scales::label_percent()\n    ) +\n    labs(\n      x=\"\", y=\"removal efficiency\"\n    ) + \n    theme(legend.position = \"none\") +\n    facet_wrap(vars(basin))\n  \n  return(g)\n}\n\n\n\nPhosphorusNitrogen\n\n\n\n\nCode\nf_graph_yield_WWTP(temp, \"Pt_yield\", \"P_sens_color\") + labs(y=\"P removal efficiency\")\n\n\n\n\n\nCode\nggsave(#svg\n  \"graphs/P_WWTP_removal_efficiency.svg\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/P_WWTP_removal_efficiency.pdf\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/P_WWTP_removal_efficiency.png\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\nf_graph_yield_WWTP(temp, \"NGL_yield\", \"N_sens_color\") + labs(y=\"N removal efficiency\")\n\n\n\n\n\nCode\nggsave(#svg\n  \"graphs/N_WWTP_removal_efficiency.svg\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/N_WWTP_removal_efficiency.pdf\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/N_WWTP_removal_efficiency.png\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\n\nN:P ratio et P:capacity ratio\n\n\nCode\nf_graph_ratio_basin &lt;- function(dataset, ratio_in){\n  g &lt;-ggplot(dataset) +\n    #basins \n    geom_line(\n      aes(Year, !!as.symbol(ratio_in), color=basin),\n      alpha=.7, linewidth=1\n      ) +\n    scale_color_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n    scale_x_continuous(\n      limits = c(1990, 2020),\n      breaks = seq(1990, 2020, 10)\n    ) +\n    theme(legend.position = \"bottom\")\n  return(g)\n}\n\n\n\n\nCode\ng1 &lt;- f_graph_ratio_basin(file_basin, \"Pt_PE_ratio_in\") +\n    labs(\n      x=\"\", y=expression(paste(\"gP.PE\"^\"-1\", \".day\"^\"-1\")),\n      color=\"\"\n    ) +\n    scale_y_continuous(\n      limits = c(0, 2),\n      sec.axis = \n        sec_axis(\n          trans=~.*(365/1000), \n          name=expression(paste(\"kgP.PE\"^\"-1\", \".year\"^\"-1\"))\n          )\n      ) \ng2 &lt;- f_graph_ratio_basin(file_basin, \"N_P_ratio_in\") +\n  labs(\n    x=\"\", y=\"N:P ratio\",\n    color=\"\"\n    ) +\n  scale_y_continuous(\n    limits = c(0, 10),\n    breaks = seq(0, 10, 2)\n    ) \np &lt;- get_plot_component(g1, \"guide-box\", return_all = TRUE)\n\nplot_grid(\n  plot_grid(\n    g2 + theme(legend.position = \"none\"), g1 + theme(legend.position = \"none\")\n  ),\n  p[[3]], rel_heights = c(0.85, 0.15), ncol=1\n)\n\n\n\n\n\nCode\nggsave(#png\n  \"graphs/P_ratios.png\",\n  dpi=1000, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\nggsave(#svg\n  \"graphs/P_ratios.svg\",\n  dpi=1000, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/P_ratios.png\",\n  dpi=1000, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\n\n\n\n\nExcretions\n\n\nCode\npath_source &lt;- \"source_data/0_nutrient_excretion/\"\n\nreview_excretion &lt;- read_csv(paste0(path_source, \"n_p_fractions.csv\"))\n\ntemp &lt;- read_csv(\"output_data/nutrient_ingestion_excretion/excretions_human_france_kt_year.csv\")\n#mean excretion values per capita, four our comparison with litterature review\nN_excr_kg_year &lt;- round(temp$N_excretion/temp$capita, 1)\nP_excr_kg_year &lt;- round(temp$P_excretion/temp$capita, 2)\nN_P_ratio_excr &lt;- round(temp$N_excretion/temp$P_excretion, 1)\n\nreview_excretion &lt;- review_excretion %&gt;%\n  select(\n    P_excr = `total P excretion (kg/y)`, \n    perc_P_urine = `% urine P`, \n    perc_P_feces = `% feces P`, \n    N_excr = `total N excretion (kg/y)`, \n    perc_N_urine = `% urine N`, \n    perc_N_feces = `% feces N`, \n    N_P_ratio = `N:P ratio`,\n    year, country, authors\n  ) %&gt;%\n  mutate(\n    study = paste0(authors, \", \", year, \", \", country),\n    P_urine = round(P_excr*perc_P_urine/100, 2),\n    P_feces = round(P_excr*perc_P_feces/100, 2),\n    N_urine = round(N_excr*perc_N_urine/100, 2),\n    N_feces = round(N_excr*perc_N_feces/100, 2)\n    ) %&gt;%\n  select(-c(year, country, authors)) \n\ng_excr &lt;- function(dataset, label_nutrient, y_lim, our_value, label_unit, g_title){\n  #mean total excretion\n  mean_excr &lt;- round(mean(dataset %&gt;% pull(excr), na.rm=T), 2)\n  \n  #order studies by increasing value\n  dataset$study &lt;- reorder(dataset$study, dataset %&gt;% pull(value_urine_feces))\n  #remove empty values\n  dataset &lt;- dataset %&gt;% filter(is.na(value_urine_feces)==F)\n  \n  #colors of urine and feces \n  colors_fill &lt;- scale_fill_manual(\n    limits = c(\"urine\", \"feces\"),\n    values=c(\"#e3dc00\", \"#591000\")\n  )\n  \n  \n  plot_grid(\n    \n    #plot of the review values\n    ggplot(dataset) +\n      #urine and feces values\n      geom_col(\n        aes(study, value_urine_feces, fill=urine_feces)\n        ) +\n      #urine + feces value (black contour)\n      geom_col(\n        aes(study, excr),\n        color=\"black\", fill=\"transparent\"\n        ) +\n      #label for urine+feces value\n      geom_text(\n        aes(study, excr, label=excr),\n        hjust=-0.1, fontface=\"italic\"\n        ) +\n      colors_fill +#colors\n      ylim(c(0, y_lim)) +\n      coord_flip() +\n      theme(\n        legend.position = \"none\",\n        axis.text.x = element_blank(),\n        plot.subtitle = ggtext::element_markdown() #for colored title\n        ) +\n      labs(\n        x=\"\", y=\"\", \n        title = g_title,\n        subtitle = \"in &lt;span style='color:#e3dc00;'&gt;urine,&lt;/span&gt;&lt;span style='color:#591000;'&gt; feces,&lt;/span&gt; and urine+feces\",\n        ),\n    \n    #plot of our values (INCA3)\n    ggplot(data_frame(study = \"This study (based on INCA3)\", value = our_value)) +\n      geom_col(\n        aes(study, value), fill=\"black\"\n          ) +\n      geom_label(\n        aes(study, value, label=value),\n        hjust=-0.2, fontface=\"bold\"\n        ) +\n      coord_flip() +\n      ylim(c(0, y_lim)) +\n      labs(\n        x=\"\", y=label_unit, \n        fill = \"\"\n      ),\n    \n    \n    ncol=1, rel_heights = c(0.8, 0.2), align=\"v\"\n    \n  )\n}\n\n\n\nPNRepartition urine / fecesN:P ratioComparison with crops needs\n\n\n\n\nCode\n#prepare for P excretion graph\ntemp &lt;- review_excretion %&gt;% \n  select(study, excr=P_excr, urine=P_urine, feces=P_feces) %&gt;%\n  gather(urine_feces, value_urine_feces, urine, feces)\ntemp$urine_feces &lt;- factor(temp$urine_feces, c(\"feces\", \"urine\"))\n\n#graph\ng_excr(temp, \"P\", 0.8, P_excr_kg_year, \"kgP per year\", \"P excretions\")\n\n\n\n\n\nCode\nggsave(#svg\n  \"graphs/P_excretions_review.svg\",\n  dpi=500, width=6, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/P_excretions_review.pdf\",\n  dpi=500, width=6, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/P_excretions_review.png\",\n  dpi=500, width=6, height=4, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\n#prepare for N excretion graph\ntemp &lt;- review_excretion %&gt;% \n  select(study, excr=N_excr, urine=N_urine, feces=N_feces) %&gt;%\n  gather(urine_feces, value_urine_feces, urine, feces) %&gt;%\n  #we round the value\n  mutate(\n    excr = round(excr, 1), \n    value_urine_feces = round(value_urine_feces, 1)\n    )\n\ntemp$urine_feces &lt;- factor(temp$urine_feces, c(\"feces\", \"urine\"))\ng_excr(temp, \"N\", 5, N_excr_kg_year, \"kgN per year\", \"N excretions\")\n\n\n\n\n\nCode\nggsave(#svg\n  \"graphs/N_excretions_review.svg\",\n  dpi=500, width=6, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/N_excretions_review.pdf\",\n  dpi=500, width=6, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/N_excretions_review.png\",\n  dpi=500, width=6, height=4, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\n#prepare file for graph, columns\ntemp &lt;- review_excretion %&gt;% \n  select(study, perc_N_urine, perc_P_urine) %&gt;%\n  gather(perc_type, perc, perc_N_urine, perc_P_urine) %&gt;%\n  mutate(\n    nutrient = case_when(\n      perc_type %in% c(\"perc_N_urine\") ~ \"Nitrogen\",\n      perc_type %in% c(\"perc_P_urine\") ~ \"Phosphorus\"\n    )\n  ) \n\n#for labels\ntemp2 &lt;- temp %&gt;% \n  mutate(\n    perc = round(perc)\n  ) \n\n\ntemp$study &lt;- reorder(temp$study, temp$perc)\n#graph for nitrogen\ng1 &lt;- ggplot(temp %&gt;% filter(nutrient==\"Nitrogen\", is.na(perc)==F)) +\n  #columns for feces\n  geom_col(\n    aes(100, reorder(study, perc)), fill=\"#591000\"\n    ) +\n  #columns of urine\n  geom_col(\n    aes(perc, study), fill=\"#e3dc00\"\n    ) +\n  #labels\n  geom_text(\n    data=temp2 %&gt;% filter(nutrient==\"Nitrogen\", is.na(perc)==F),\n    aes(100, study, label = paste(perc, \"/\", 100-perc, \"%\")),\n    hjust=-0.1, fontface=\"italic\"\n    ) +\n  facet_wrap(vars(nutrient), nrow=2) +\n  theme(plot.title = ggtext::element_markdown()) + #for colored title\n  scale_x_continuous(\n    breaks = seq(0, 100, by=10), \n    limits = c(0, 130)) +\n  labs(\n    x=\"\", y=\"\",\n    title = \"N and P repartition in &lt;span style='color:#e3dc00;'&gt;urine&lt;/span&gt; and in &lt;span style='color:#591000;'&gt;feces&lt;/span&gt;\",\n    subtitle = \"nutrient in urine: ~85% for N and ~60% for P\"\n  )\n#graph for nitrogen\ng2 &lt;- ggplot(temp %&gt;% filter(nutrient==\"Phosphorus\", is.na(perc)==F)) +\n  #columns for feces\n  geom_col(\n    aes(100, reorder(study, perc)), fill=\"#591000\"\n    ) +\n  #columns of urine\n  geom_col(\n    aes(perc, study), fill=\"#e3dc00\"\n    ) +\n  #labels\n  geom_text(\n    data=temp2 %&gt;% filter(nutrient==\"Phosphorus\", is.na(perc)==F),\n    aes(100, study, label = paste(perc, \"/\", 100-perc, \"%\")),\n    hjust=-0.1, fontface=\"italic\"\n    ) +\n  facet_wrap(vars(nutrient), nrow=2) +\n  scale_x_continuous(\n    breaks = seq(0, 100, by=10), \n    limits = c(0, 130)) +\n  labs(\n    x=\"%\", y=\"\"\n  )\nplot_grid(g1, g2, nrow=2, align=\"v\")\n\n\n\n\n\nCode\nggsave(#svg\n  \"graphs/excretions_repartition.svg\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/excretions_repartition.pdf\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/excretions_repartition.png\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\n#prepare data for ratio graph\ntemp &lt;- review_excretion %&gt;%\n  mutate(\n    N_P_ratio_excr = round(N_excr/P_excr, 1),\n    N_P_ratio_urine = round(N_urine/P_urine, 1),\n    N_P_ratio_feces = round(N_feces/P_feces, 1)\n  )\ntemp$study &lt;- reorder(temp$study, temp$N_P_ratio_excr)\ntemp &lt;- temp %&gt;%\n  select(study, N_P_ratio_excr, N_P_ratio_urine, N_P_ratio_feces) %&gt;%\n  gather(ratio_type, ratio_value, N_P_ratio_excr, N_P_ratio_urine, N_P_ratio_feces) %&gt;%\n  filter(is.na(ratio_value)==F) %&gt;%\n  mutate(\n    ratio_type = case_when(\n      ratio_type == \"N_P_ratio_excr\" ~ \"urine + feces\",\n      ratio_type == \"N_P_ratio_urine\" ~ \"urine\",\n      ratio_type == \"N_P_ratio_feces\" ~ \"feces\"\n    )\n  )\ntemp$ratio_type &lt;- factor(temp$ratio_type, levels=c(\"feces\", \"urine\", \"urine + feces\"))\ncolors_fill &lt;- scale_fill_manual(\n    limits = c(\"urine\", \"feces\", \"urine + feces\"),\n    values=c(\"#e3dc00\", \"#591000\", \"black\")\n  )\n\n\n#ratio graph review\ng1 &lt;- ggplot(temp) +\n  geom_col(\n    aes(ratio_value, study, fill=ratio_type), \n    position=\"dodge\"\n    ) +\n  geom_text(\n    aes(x=ratio_value, y=study, label=ratio_value),\n    hjust=0, fontface=\"italic\"\n    ) +\n  colors_fill + \n  theme(\n    legend.position = \"none\",\n    axis.text.x = element_blank(),\n    plot.subtitle = ggtext::element_markdown()  #for colored title\n    ) +\n  facet_wrap(vars(ratio_type), nrow=3) +\n  labs(\n    y=\"\",  x=\"\", \n    subtitle = \"in&lt;span style='color:#e3dc00;'&gt; urine,&lt;/span&gt;&lt;span style='color:#591000;'&gt; feces,&lt;/span&gt; and urine+feces\",\n    ) +\n  xlim(0, 18) \n\n\ng2 &lt;- \n  ggplot(\n    data = \n      data_frame(\n        study=\"Our value, 2017, France\\n(from INCA3 study)\", \n        value = N_P_ratio_excr\n        )\n    ) +\n  geom_col(\n    aes(value, study), \n    fill=\"black\"\n      ) +\n  geom_label(\n    aes(value, study, label=value),\n    hjust=-0.2, fontface=\"italic\"\n    ) +\n  labs(\n    y=\"\", x=\"\"\n    ) +\n  xlim(0, 18)\n\nplot_grid(g1, g2, nrow=2, align=\"v\", rel_heights = c(0.85, 0.15))\n\n\n\n\n\nCode\nggsave(#svg\n  \"graphs/ratio_excretions_review.svg\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/ratio_excretions_review.pdf\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/ratio_excretions_review.png\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\npath_source &lt;- \"source_data/crop_N_P_content/\"\ncrop_N_P_content &lt;- read_csv(paste0(path_source, \"crop_N_P_content.csv\")) %&gt;%\n  #0.8 factor to consider 80% NUE\n  mutate(N_P_ratio = (perc_N/0.8)/perc_P)\n\ncrop_N_P_content &lt;- crop_N_P_content %&gt;%\n  #remove \"protein crops\" (=legumes), because they can fix N\n  filter(group != \"Protein crops\") %&gt;%\n  #remove remaining legumes, and also citrus (outlier with very high N need)\n  filter(\n    !crop %in% c(\"Soybean\", \"Green beans\", \"Dry beans\", \"Green peas\", \"Alfalfa and clover\", \"Natural meadow\", \"Citrus\")\n  )\n                             \nggplot(crop_N_P_content) +\n  #urine N:P ratio\n  annotate(\"rect\", xmin = -Inf, xmax=Inf, ymin = 8, ymax=14, fill=\"#e3dc00\", alpha=.7) +\n  #feces/sludge N:P ratio\n  annotate(\"rect\",xmin = -Inf, xmax=Inf, ymin = 1.5, ymax=3, fill=\"#591000\", alpha=.7) +\n  #urine + feces N:P ratio\n  annotate(\"rect\",xmin = -Inf, xmax=Inf, ymin = 6, ymax=10, fill=\"grey\", alpha=.7) +\n  #crop composition points\n  geom_point(aes(reorder(crop, N_P_ratio), N_P_ratio)) +\n  coord_flip() +\n  scale_y_continuous(breaks = seq(0, 16, by=2), limits=c(0, 16)) +\n  facet_grid(vars(group), scales=\"free_y\", space=\"free_y\") +\n  theme(\n    strip.text.y.right = element_text(angle = 0),\n    plot.subtitle = ggtext::element_markdown()  #for colored title) \n  ) +\n  labs(\n    y=\"N:P crop needs\", x=\"\",\n    subtitle = \"N:P in &lt;span style='color:#e3dc00;'&gt;urine&lt;/span&gt;, &lt;span style='color:#591000;'&gt;feces (similar to WWTP sludge)&lt;/span&gt; and &lt;span style='color:grey;'&gt;urine+feces&lt;/span&gt;\",\n    )\n\n\n\n\n\nCode\n#save\nggsave(#svg\n  \"graphs/ratio_crops_urine.svg\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/ratio_crops_urine.pdf\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/ratio_crops_urine.png\",\n  dpi=350, width=8, height=5, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\n\nSankey\n\n\nCode\nlibrary(networkD3) #for sankey\nlibrary(htmlwidgets) #for sankey\n\n\n\nPN\n\n\n\n\nCode\nf_sankey &lt;- function(sankey){\n  # nodes names for the sankey \n  nodes &lt;- data.frame(\n    name=c(as.character(sankey$source), as.character(sankey$target)) %&gt;% \n      unique())\n  \n  # With networkD3, connection must be provided using id, not using real name like in the links dataframe. So we need to add it.\n  sankey$IDsource &lt;- match(sankey$source, nodes$name)-1\n  sankey$IDtarget &lt;- match(sankey$target, nodes$name)-1\n  \n  # Colors groups (for nodes and flow links)\n  nodes$group &lt;- as.factor(c(\"nodes_group\"))\n  my_color &lt;-\n  'd3.scaleOrdinal()\n  .domain([\"excretion\",\"large industries\" ,\"lost\", \"water\", \"sludge\", \"nodes_group\"])\n  .range([\"#7d6608\" , \"grey\" , \"#5e5e5e\", \"#2e86c1\", \"#6e2c00\", \"black\"])'\n\n  #to ba able to show decimales on the snkey graph\n  # see here https://stackoverflow.com/questions/72129768/r-networkd3-issues\n  # see also https://stackoverflow.com/questions/74259905/network-d3-sankey-node-value-too-precise-using-htmlwidgets\ncustomJS &lt;- '\n  function(el,x) { \n      var link = d3.selectAll(\".link\");\n  \n      var format = d3.formatLocale({\"decimal\": \".\", \"thousands\": \",\", \"grouping\": [3], \"currency\": [\"\", \"\\u00a0€\"]}).format(\",.1f\");\n  \n      link.select(\"title\").select(\"body\")\n          .html(function(d) { return \"&lt;pre&gt;\" + d.source.name + \" \\u2192 \" + d.target.name +\n              \"\\\\n\" + format(d.value) + \" \" + \"&lt;pre&gt;\"; });\n              \n      d3.select(el).selectAll(\".node text\")\n          .html(function(d) { return d.name + \" \" + format(d.value) + \" \"; });\n              \n  }\n  '\n  \n  # Make the sankey\n  p &lt;- \n    sankeyNetwork(\n      Links = sankey, Nodes = nodes, Source = \"IDsource\", Target = \"IDtarget\",\n      Value = \"value\", NodeID = \"name\", colourScale=my_color,\n      fontSize=25, units = \"\", nodePadding = 50,\n      sinksRight = T, margin = c(top = 0, right = 0, bottom = 0, left = 0),\n      LinkGroup=\"flow_group\", NodeGroup=\"group\"\n      )\n  \nonRender(p, customJS)\n}\n\n\n\nCompleteSimplified, per capSimplified, percent\n\n\nall values in ktP per year\n\n\nCode\ntemp &lt;- read_csv(\"output_data/sankey_flows/phosphorus/sankey_P_flows_France.csv\")\nf_sankey(temp)\n\n\n\n\n\n\n\n\nall values in gP per capita per year\n\n\nCode\ntemp &lt;- read_csv(\"output_data/sankey_flows/phosphorus/simplified/sankey_P_France_per_cap.csv\")\nf_sankey(temp)\n\n\n\n\n\n\n\n\nall values in %\n\n\nCode\ntemp &lt;- read_csv(\"output_data/sankey_flows/phosphorus/simplified/sankey_P_France_percent.csv\")\nf_sankey(temp)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nf_sankey &lt;- function(sankey){\n  # nodes names for the sankey \n  nodes &lt;- data.frame(\n    name=c(as.character(sankey$source), as.character(sankey$target)) %&gt;% \n      unique())\n  \n  # With networkD3, connection must be provided using id, not using real name like in the links dataframe. So we need to add it.\n  sankey$IDsource &lt;- match(sankey$source, nodes$name)-1\n  sankey$IDtarget &lt;- match(sankey$target, nodes$name)-1\n  \n  # Colors groups (for nodes and flow links)\n  nodes$group &lt;- as.factor(c(\"nodes_group\"))\n  my_color &lt;-\n  'd3.scaleOrdinal()\n  .domain([\"excretion\", \"large industries\", \"lost\", \"water\", \"sludge\", \"air\", \"nodes_group\"])\n  .range([\"#7d6608\", \"grey\", \"#5e5e5e\", \"#2e86c1\", \"#6e2c00\", \"#3ab02a\", \"black\"])'\n\n  #to ba able to show decimales on the snkey graph\n  # see here https://stackoverflow.com/questions/72129768/r-networkd3-issues\n  # see also https://stackoverflow.com/questions/74259905/network-d3-sankey-node-value-too-precise-using-htmlwidgets\ncustomJS &lt;- '\n  function(el,x) { \n      var link = d3.selectAll(\".link\");\n  \n      var format = d3.formatLocale({\"decimal\": \".\", \"thousands\": \",\", \"grouping\": [3], \"currency\": [\"\", \"\\u00a0€\"]}).format(\",.1f\");\n  \n      link.select(\"title\").select(\"body\")\n          .html(function(d) { return \"&lt;pre&gt;\" + d.source.name + \" \\u2192 \" + d.target.name +\n              \"\\\\n\" + format(d.value) + \" \" + \"&lt;pre&gt;\"; });\n              \n      d3.select(el).selectAll(\".node text\")\n          .html(function(d) { return d.name + \" \" + format(d.value) + \" \"; });\n              \n  }\n  '\n  \n  # Make the sankey\n  p &lt;- \n    sankeyNetwork(\n      Links = sankey, Nodes = nodes, Source = \"IDsource\", Target = \"IDtarget\",\n      Value = \"value\", NodeID = \"name\", colourScale=my_color,\n      fontSize=25, units = \"\", nodePadding = 50,\n      sinksRight = T, margin = c(top = 0, right = 0, bottom = 0, left = 0),\n      LinkGroup=\"flow_group\", NodeGroup=\"group\"\n      )\n  \nonRender(p, customJS)\n}\n\n\n\nCompleteSimplified, per capSimplified, percent\n\n\nall values in ktP per year\n\n\nCode\ntemp &lt;- read_csv(\"output_data/sankey_flows/nitrogen/sankey_N_flows_France.csv\")\nf_sankey(temp)\n\n\n\n\n\n\n\n\nall values in kgN per capita per year\n\n\nCode\ntemp &lt;- read_csv(\"output_data/sankey_flows/nitrogen/simplified/sankey_N_France_per_cap.csv\")\nf_sankey(temp)\n\n\n\n\n\n\n\n\nall values in %\n\n\nCode\ntemp &lt;- read_csv(\"output_data/sankey_flows/nitrogen/simplified/sankey_N_France_percent.csv\")\nf_sankey(temp)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAppendix\n\nWWTP flowsLarge industries flowsSludgeDecrease P discharge\n\n\n\n\nCode\n#prepare graphs\nf_graph_flows &lt;- function(dataset, nutrient, g_title, g_unit){\n  \n  g1 &lt;- ggplot(dataset) +\n    geom_area(\n      aes(Year, !!as.symbol(nutrient), fill=basin), \n      alpha=.6\n      ) +\n    scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n      ) +\n    theme(\n      legend.position=\"none\",\n      axis.text.x = element_text(angle = 60, hjust=1)\n      ) +\n    xlim(2015, 2020) +\n    labs(\n      subtitle =\"Metropolitan France (2015-2020)\",\n      title = g_title,\n      x=\"\", y=g_unit\n      ) \n  \n  g2 &lt;- ggplot(dataset) +\n    geom_area(\n      aes(Year, !!as.symbol(nutrient), fill=basin), \n      alpha=.6\n      ) +\n    scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n      ) +\n    facet_wrap(vars(basin), scales=\"free_y\") +\n    theme(\n      legend.position=\"none\",\n      axis.text.x = element_text(angle = 60, hjust=1)\n      ) +\n    labs(\n      x=\"\", y=\"\",\n      subtitle = \"\", title=\"\"\n      ) \n  \n  g &lt;- plot_grid(\n    g1, g2, rel_widths = c(.3, .7)\n  )\n  \n  return(g)\n}\n\n#order following color gradient\nfile_basin$basin &lt;- \n  factor(\n    file_basin$basin, \n    levels = \n      c(\"Seine-Normandie\",\n        \"Loire-Bretagne\",\n        \"Artois-Picardie\",\n        \"Rhin-Meuse\",\n        \"Adour-Garonne\", \n        \"Rhône-Méditerranée\"\n        )\n      )\n\n\n\nPNUncertainties\n\n\n\ninout\n\n\n\n\nCode\nf_graph_flows(file_basin, \"Pt_in_adj\", \"Incoming Pt into WWTPs\", \"ktP per year\")\n\n\n\n\n\nCode\n#save\nggsave(#svg\n  \"graphs/appendix/P_flow_in.svg\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/appendix/P_flow_in.pdf\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/appendix/P_flow_in.png\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\nf_graph_flows(file_basin, \"Pt_out_adj\", \"Pt discharged by WWTPs\", \"ktP per year\")\n\n\n\n\n\nCode\n#save\nggsave(#svg\n  \"graphs/appendix/P_flow_out.svg\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/appendix/P_flow_out.pdf\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/appendix/P_flow_out.png\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_flows(file_basin, \"NGL_in_adj\", \"Incoming N into WWTPs\", \"ktN per year\")\n\n\n\n\n\nCode\n#save\nggsave(#svg\n  \"graphs/appendix/N_flow_in.svg\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/appendix/N_flow_in.pdf\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/appendix/N_flow_in.png\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\nf_graph_flows(file_basin, \"NGL_out_adj\", \"N discharged by WWTPs\", \"ktN per year\")\n\n\n\n\n\nCode\n#save\nggsave(#svg\n  \"graphs/appendix/N_flow_out.svg\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/appendix/N_flow_out.pdf\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/appendix/N_flow_out.png\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\n\n\n\nCode\n#uncertainty file\nuncertainties_WWTP_basins &lt;- file_basin %&gt;%\n  filter(Year&gt;2014 & Year&lt;2021) %&gt;%\n  select(Year, basin, Pt_in_adj, Pt_out_adj, NGL_in_adj, NGL_out_adj) %&gt;%\n  group_by(basin) %&gt;%\n  mutate(\n    abs_perc_error_P_in = \n      round(\n        100*abs(mean(Pt_in_adj, na.rm=T)-Pt_in_adj)/mean(Pt_in_adj, na.rm=T)\n      ),\n    abs_perc_error_P_out = \n      round(\n        100*abs(mean(Pt_out_adj, na.rm=T)-Pt_out_adj)/mean(Pt_out_adj, na.rm=T)\n      ),\n    abs_perc_error_N_in = \n      round(\n        100*abs(mean(NGL_in_adj, na.rm=T)-NGL_in_adj)/mean(NGL_in_adj, na.rm=T)\n      ),\n    abs_perc_error_N_out = \n      round(\n        100*abs(mean(NGL_out_adj, na.rm=T)-NGL_out_adj)/mean(NGL_out_adj, na.rm=T)\n      )\n    )\n\n\n\n\nCode\n#summarize at the national scale for years 2015-2020\ntemp &lt;- uncertainties_WWTP_basins %&gt;%\n  # Seine-Normandie not included in coefficient of variation computation because this basin is incomplete in 2016, 2017 and 2019\n  filter(\n    basin != \"Seine-Normandie\"\n    ) %&gt;%\n  select(\n    Year, Pt_in_adj, Pt_out_adj, NGL_in_adj, NGL_out_adj\n    ) %&gt;%\n  # Compute total nutrient flow (in and out) of remaining basins\n  group_by(\n    Year\n    ) %&gt;%\n  summarise(\n    Pt_in_adj = sum(Pt_in_adj, na.rm=T),\n    Pt_out_adj = sum(Pt_out_adj, na.rm=T),\n    NGL_in_adj = sum(NGL_in_adj, na.rm=T),\n    NGL_out_adj = sum(NGL_out_adj, na.rm=T)\n    )\n\n#coefficient of variation over 2015-2020\nCV_WWTP_flows_france &lt;- temp %&gt;%\n  #compute coefficient of variation\n  summarise(\n    Pt_in = round(sd(Pt_in_adj)/mean(Pt_in_adj)*100, 1),\n    Pt_out = round(sd(Pt_out_adj)/mean(Pt_out_adj)*100, 1),\n    NGL_in = round(sd(NGL_in_adj)/mean(NGL_in_adj)*100, 1),\n    NGL_out = round(sd(NGL_out_adj)/mean(NGL_out_adj)*100, 1)\n    ) %&gt;%\n  mutate(\n    type = \"coefficient of\\nvariation\"\n    )\n\n#max variation (% of the mean) over 2015-2020\nmax_var_WWTP_flows_france &lt;- temp %&gt;%\n  #compute coefficient of variation\n  summarise(\n    Pt_in = round(max(abs(1-Pt_in_adj/mean(Pt_in_adj))*100), 1),\n    Pt_out = round(max(abs(1-Pt_out_adj/mean(Pt_out_adj))*100), 1),\n    NGL_in = round(max(abs(1-NGL_in_adj/mean(NGL_in_adj))*100), 1),\n    NGL_out = round(max(abs(1-NGL_out_adj/mean(NGL_out_adj))*100), 1)\n    ) %&gt;%\n  mutate(\n    type = \"maximum variation\\nover 2015-2020\"\n    )\n\nuncertainties_WWTP_france &lt;- bind_rows(CV_WWTP_flows_france, max_var_WWTP_flows_france) %&gt;%\n  gather(nutrient, value, -type)\n\n\n\nggplot(uncertainties_WWTP_france) +\n  geom_col(aes(nutrient, value, fill=type), position=\"dodge\", alpha=.7) +\n  theme(legend.position = \"top\") +\n  labs(fill=\"\", y=\"%\", x=\"\") +\n  labs(title = \"Nutrient flows variations in WWTP\", subtitle = \"over 2015-2020, metropolitan France\")\n\n\n\n\n\nCode\nf_save_csv_files(\n  uncertainties_WWTP_france, \"output_data/uncertainties\",\n  \"WWTP_uncertainties.csv\"\n)\n\n\nrm(temp, max_var_WWTP_flows_france, CV_WWTP_flows_france, uncertainties_WWTP_france)\n\n\n\n\nCode\nggplot(uncertainties_WWTP_basins) +\n  geom_col(aes(Year, abs_perc_error_P_in, fill=basin), alpha=.7) +\n  facet_wrap(vars(basin)) +\n  scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n  theme(legend.position=\"none\") +\n  labs(x=\"\", y=\"absolute difference to the mean (%)\", title=\"Uncertainty on incoming P\")\n\n\n\n\n\n\n\nCode\nggplot(uncertainties_WWTP_basins) +\n  geom_col(aes(Year, abs_perc_error_P_out, fill=basin), alpha=.7) +\n  facet_wrap(vars(basin)) +\n  scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n  theme(legend.position=\"none\") +\n  labs(x=\"\", y=\"absolute difference to the mean (%)\", title=\"Uncertainty on discharged P\")\n\n\n\n\n\n\n\nCode\nggplot(uncertainties_WWTP_basins) +\n  geom_col(aes(Year, abs_perc_error_N_in, fill=basin), alpha=.7) +\n  facet_wrap(vars(basin)) +\n  scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n  theme(legend.position=\"none\") +\n  labs(x=\"\", y=\"absolute difference to the mean (%)\", title=\"Uncertainty on incoming N\")\n\n\n\n\n\n\n\nCode\nggplot(uncertainties_WWTP_basins) +\n  geom_col(aes(Year, abs_perc_error_N_out, fill=basin), alpha=.7) +\n  facet_wrap(vars(basin)) +\n  scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n  theme(legend.position=\"none\") +\n  labs(x=\"\", y=\"absolute difference to the mean (%)\", title=\"Uncertainty on discharged P\")\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npath_source &lt;- \"output_data/industry_sewers_network_discharge/\"\nfile_industry_discharge &lt;- read_csv(paste0(path_source, \"industry_sewers_network_discharge_GEREP_basins.csv\")) %&gt;%\n  filter(basin != \"Metropolitan France\"\n         )\n\n#prepare graphs\nf_graph_industry &lt;- function(dataset, nutrient, g_title, g_unit){\n  g1 &lt;- ggplot(dataset) +\n    geom_area(aes(Year, !!as.symbol(nutrient), fill=basin), alpha=.6) +\n    scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n    theme(\n      legend.position=\"none\",\n      axis.text.x = element_text(angle = 60, hjust=1)\n      ) +\n    xlim(2015, 2020) +\n    labs(\n      subtitle =\"Metropolitan France (2015-2020)\",\n      title = g_title,\n      x=\"\", y=g_unit\n      ) \n  \n  g2 &lt;- ggplot(dataset) +\n    geom_area(aes(Year, !!as.symbol(nutrient), fill=basin), alpha=.6) +\n    scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n      ) +\n    facet_wrap(vars(basin), scales=\"free_y\") +\n    theme(\n      legend.position=\"none\",\n      axis.text.x = element_text(angle = 60, hjust=1)\n      ) +\n    scale_x_continuous(\n      breaks = c(2012, 2016, 2020),\n      limits = c(2012, 2020)\n    ) +\n    labs(\n      x=\"\", y=\"\",\n      subtitle = \"\", title=\"\"\n      ) \n  \n  g &lt;- plot_grid(\n    g1, g2, rel_widths = c(.3, .7)\n  )\n  \n  return(g)\n}\n\n\n#order following color gradient\nfile_industry_discharge$basin &lt;- \n  factor(\n    file_industry_discharge$basin, \n    levels = \n      c(\"Seine-Normandie\",\n        \"Loire-Bretagne\",\n        \"Artois-Picardie\",\n        \"Rhin-Meuse\",\n        \"Adour-Garonne\", \n        \"Rhône-Méditerranée\"\n        )\n      )\n\n\n\nPNUncertainties\n\n\n\n\nCode\nf_graph_industry(file_industry_discharge, \"Pt_in\", \"Large industries P discharge in sewers\", \"ktP per year\")\n\n\n\n\n\nCode\n#save\nggsave(#svg\n  \"graphs/appendix/P_industry.svg\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/appendix/P_industry.pdf\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/appendix/P_industry.png\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\nf_graph_industry(file_industry_discharge, \"NGL_in\", \"Large industries N discharge in sewers\", \"ktN per year\")\n\n\n\n\n\nCode\n#save\nggsave(#svg\n  \"graphs/appendix/N_industry.svg\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/appendix/N_industry.pdf\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/appendix/N_industry.png\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\n#uncertainty file\nuncertainties_industries_basins &lt;- file_industry_discharge %&gt;%\n  filter(Year&gt;2014 & Year&lt;2021) %&gt;%\n  select(Year, basin, Pt_in, NGL_in) %&gt;%\n  group_by(basin) %&gt;%\n  mutate(\n    abs_perc_error_P_in = \n      round(\n        100*abs(mean(Pt_in, na.rm=T)-Pt_in)/mean(Pt_in, na.rm=T)\n      ),\n    abs_perc_error_N_in = \n      round(\n        100*abs(mean(NGL_in, na.rm=T)-NGL_in)/mean(NGL_in, na.rm=T)\n      )\n    )\n\n\n\n\nCode\n#summarize at the national scale for years 2015-2020\ntemp &lt;- uncertainties_industries_basins %&gt;%\n  select(\n    Year, Pt_in, NGL_in\n    ) %&gt;%\n  # Compute total incoming nutrient flow all basins together\n  group_by(\n    Year\n    ) %&gt;%\n  summarise(\n    Pt_in = sum(Pt_in, na.rm=T),\n    NGL_in = sum(NGL_in, na.rm=T),\n    )\n\n#coefficient of variation over 2015-2020\nCV_industries_flows_france &lt;- temp %&gt;%\n  #compute coefficient of variation\n  summarise(\n    Pt_in = round(sd(Pt_in)/mean(Pt_in)*100, 1),\n    NGL_in = round(sd(NGL_in)/mean(NGL_in)*100, 1),\n    ) %&gt;%\n  mutate(\n    type = \"coefficient of\\nvariation\"\n    )\n\n#max variation (% of the mean) over 2015-2020\nmax_var_industries_flows_france &lt;- temp %&gt;%\n  #compute coefficient of variation\n  summarise(\n    Pt_in = round(max(abs(1-Pt_in/mean(Pt_in))*100), 1),\n    NGL_in = round(max(abs(1-NGL_in/mean(NGL_in))*100), 1)\n    ) %&gt;%\n  mutate(\n    type = \"maximum variation\\nover 2015-2020\"\n    )\n\nuncertainties_industries_france &lt;- bind_rows(CV_industries_flows_france, max_var_industries_flows_france) %&gt;%\n  gather(nutrient, value, -type)\n\nggplot(uncertainties_industries_france) +\n  geom_col(aes(nutrient, value, fill=type), position=\"dodge\", alpha=.7) +\n  theme(legend.position = \"top\") +\n  labs(fill=\"\", y=\"%\", x=\"\") +\n  labs(title = \"Nutrient flows variations of industries discharge to sewers\", subtitle = \"over 2015-2020, metropolitan France\")\n\n\n\n\n\nCode\nf_save_csv_files(\n  uncertainties_industries_france, \"output_data/uncertainties\",\n  \"industries_uncertainties.csv\"\n)\n\n\nrm(temp, max_var_industries_flows_france, CV_industries_flows_france, uncertainties_industries_france)\n\n\n\n\nCode\nggplot(uncertainties_industries_basins) +\n  geom_col(aes(Year, abs_perc_error_P_in, fill=basin), alpha=.7) +\n  facet_wrap(vars(basin)) +\n  scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n  theme(legend.position=\"none\") +\n  labs(x=\"\", y=\"absolute difference to the mean (%)\", title=\"Uncertainty on industry discharged P\")\n\n\n\n\n\n\n\nCode\nggplot(uncertainties_industries_basins) +\n  geom_col(aes(Year, abs_perc_error_N_in, fill=basin), alpha=.7) +\n  facet_wrap(vars(basin)) +\n  scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n  theme(legend.position=\"none\") +\n  labs(x=\"\", y=\"absolute difference to the mean (%)\", title=\"Uncertainty on industry discharged N\")\n\n\n\n\n\n\n\n\n\n\n\nProductionDestinationsslidge recycling uncertaintySludge composition\n\n\n\n\nCode\nfile_sludge &lt;- read_csv(\"output_data/basins/basin_sanitation_portal.csv\") %&gt;%\n  filter(\n    basin != \"Metropolitan France\",\n    Year&gt;2014\n    )\n\nf_graph_sludge_production &lt;- function(dataset, nutrient, g_title, g_unit){\n  g1 &lt;- ggplot(dataset) +\n    geom_area(aes(Year, !!as.symbol(nutrient), fill=basin), alpha=.6) +\n    scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n    theme(\n      legend.position=\"none\",\n      axis.text.x = element_text(angle = 60, hjust=1)\n      ) +\n    xlim(2015, 2020) +\n    labs(\n      subtitle =\"Metropolitan France (2015-2020)\",\n      title = g_title,\n      x=\"\", y=g_unit\n      ) \n  \n  g2 &lt;- ggplot(dataset) +\n    geom_area(aes(Year, !!as.symbol(nutrient), fill=basin), alpha=.6) +\n    scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n      ) +\n    facet_wrap(vars(basin), scales=\"free_y\") +\n    theme(\n      legend.position=\"none\",\n      axis.text.x = element_text(angle = 60, hjust=1)\n      ) +\n    scale_x_continuous(\n      breaks = c(2015, 2017, 2019, 2021),\n      limits = c(2015, 2021)\n    ) +\n    labs(\n      x=\"\", y=\"\",\n      subtitle = \"\", title=\"\"\n      ) \n  \n  g &lt;- plot_grid(\n    g1, g2, rel_widths = c(.3, .7)\n  )\n  \n  return(g)\n}\n\n#order following color gradient\nfile_sludge$basin &lt;- \n  factor(\n    file_sludge$basin, \n    levels = \n      c(\"Seine-Normandie\",\n        \"Loire-Bretagne\",\n        \"Artois-Picardie\",\n        \"Rhin-Meuse\",\n        \"Adour-Garonne\", \n        \"Rhône-Méditerranée\"\n        )\n      )\n\n\n\n\nCode\nf_graph_sludge_production(file_sludge, \"sludge_production\", \"Sludge Production\", \"Mt of dry matter per year\")\n\n\n\n\n\nCode\n#save\nggsave(#svg\n  \"graphs/appendix/sludge_production.svg\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/appendix/sludge_production.pdf\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/appendix/sludge_production.png\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\n#prepare destinations file for plot\ntemp &lt;- file_sludge %&gt;%\n  filter(Year&gt;2017 & Year&lt;2022) %&gt;%\n  select(-sludge_production, -capacity, -nb_WWTP) %&gt;%\n  gather(\n    destination, value, sludge_spread, sludge_incinerated, \n    sludge_compost, sludge_landfill,\n    sludge_industrial_valorisation,\n    sludge_to_other_WWTP\n  ) %&gt;%\n  mutate(\n    destination = case_when(\n      destination == \"sludge_spread\" ~ \"spread\",\n      destination == \"sludge_incinerated\" ~ \"incinerated\",\n      destination == \"sludge_compost\" ~ \"composted\",\n      destination == \"sludge_landfill\" ~ \"landfilled\",\n      destination == \"sludge_industrial_valorisation\" ~ \"other\",\n      destination == \"sludge_to_other_WWTP\" ~ \"other\"\n    )\n  )\n\n#order factors fro graph\ntemp$destination &lt;- \n  factor(\n    temp$destination, \n    levels = \n      c(\"other\",\n        \"landfilled\",\n        \"incinerated\",\n        \"spread\",\n        \"composted\"\n        )\n      )\n\n#basins graph\ng2 &lt;- ggplot(temp) +\n  geom_col(\n    aes(Year, value, fill=destination),\n    position = \"fill\",\n    alpha=.6\n  ) +\n  facet_wrap(vars(basin), scales = \"free_y\") +\n  labs(y=\"\", x=\"\", title = \"\") + \n  theme(\n    legend.position=\"none\",\n    axis.text.x = element_text(angle = 60, hjust=1)\n    )\n\n\n\n#metropolitan France graph\ntemp &lt;- temp %&gt;%\n  group_by(Year, destination) %&gt;%\n  summarise(value = sum(value, na.rm=T))\ng1 &lt;- ggplot(temp) +\n  geom_col(\n    aes(Year, value, fill=destination),\n    position = \"fill\",\n    alpha=.6\n  ) +\n  labs(\n    y=\"proportion\", x=\"\",\n    title = \"Relative destination of WWTP sludge\",\n    subtitle = \"Metropolitan France\"\n    ) +\n  theme(\n    legend.position = \"bottom\", \n    legend.title = element_blank(),\n    axis.text.x = element_text(angle = 60, hjust=1)\n    )\n\n#legend\np &lt;- get_plot_component(g1, \"guide-box\", return_all = TRUE)\n\n\n\n\nCode\n#total graph\nplot_grid(\n  plot_grid(\n    g1 + theme(legend.position=\"none\"), g2, rel_widths = c(.3, .7)\n  ),\n  p[[3]], rel_heights = c(.9, .1), nrow = 2\n)\n\n\n\n\n\nCode\n#save\nggsave(#svg\n  \"graphs/appendix/sludge_destination.svg\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/appendix/sludge_destination.pdf\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/appendix/sludge_destination.png\",\n  dpi=500, width=7, height=4, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\nuncertainties_sludge_recycling &lt;- temp %&gt;%\n  spread(destination, value) %&gt;%\n  mutate(\n    `sludge recycling` = spread + composted\n    ) %&gt;%\n  select(`sludge recycling`)\n\n#coefficient of variation over 2015-2020\nCV_sludge_recycle_france &lt;- uncertainties_sludge_recycling %&gt;%\n  ungroup() %&gt;%\n  #compute coefficient of variation\n  summarise(\n    `sludge recycling` = round(sd(`sludge recycling`)/mean(`sludge recycling`)*100, 1),\n    ) %&gt;%\n  mutate(\n    type = \"coefficient of\\nvariation\"\n    )\n\n#max variation (% of the mean) over 2015-2020\nmax_var_sludge_recycle_france &lt;- uncertainties_sludge_recycling %&gt;%\n  ungroup() %&gt;%\n  #compute coefficient of variation\n  summarise(\n    `sludge recycling` = round(max(abs(1-`sludge recycling`/mean(`sludge recycling`))*100), 1)\n    ) %&gt;%\n  mutate(\n    type = \"maximum variation\\nover 2015-2020\"\n    )\n\nuncertainties_sludge_recycling &lt;- bind_rows(CV_sludge_recycle_france, max_var_sludge_recycle_france) \n\nggplot(uncertainties_sludge_recycling) +\n  geom_col(aes(as.factor(\"\"), `sludge recycling`, fill=type), position=\"dodge\", alpha=.7) +\n  theme(legend.position = \"top\") +\n  labs(fill=\"\", y=\"%\", x=\"\") +\n  labs(title = \"Variation of WWTP sludge recycling in France\", subtitle = \"over 2015-2020, metropolitan France\")\n\n\n\n\n\nCode\nf_save_csv_files(\n  uncertainties_sludge_recycling, \"output_data/uncertainties\",\n  \"sludge_recycling_uncertainties.csv\"\n)\n\n\nrm(temp, max_var_sludge_recycle_france, CV_sludge_recycle_france, uncertainties_sludge_recycling)\n\n\n\n\n\n\nCode\npath_source &lt;- \"source_data/0_sludge_composition/\"\n#review values\nreview_sludge_composition &lt;- read_csv(paste0(path_source, \"sludge_composition_ESCO_MAFOR.csv\")) \nreview_sludge_composition$compost &lt;- factor(\n  review_sludge_composition$compost,\n  c(\"not composted\", \"composted\")\n)\nreview_sludge_composition &lt;- review_sludge_composition %&gt;%\n  mutate(\n    P = round(P, 0), \n    N= round(N, 0)\n  )\n\n#To assess our sludge composition, we use the sludge production data for each basin, and take the mean over 2015-2020. We then combine this with the N and P flows computed in the Sankey diagram to deduce the sludge compositions at the basin scales.\nsludge_production &lt;- read_csv(\"output_data/basins/basin_sanitation_portal.csv\")\nsludge_production &lt;- sludge_production %&gt;%\n  select(basin, Year, sludge_production) %&gt;%\n  filter(Year&gt;2014)\nsludge_production &lt;- sludge_production %&gt;%\n  group_by(basin) %&gt;%\n  summarise(\n    sludge_production = round(mean(sludge_production, na.rm=T), 3)\n    )\n\n# P in sludge\npath_source &lt;- \"output_data/sankey_flows/phosphorus/\"\nsankey_P &lt;- bind_rows(\n  read_csv(paste0(path_source, \"sankey_P_flows_Adour_Garonne.csv\")) %&gt;% mutate(basin = \"Adour-Garonne\"),\n  read_csv(paste0(path_source, \"sankey_P_flows_Artois_Picardie.csv\")) %&gt;% mutate(basin = \"Artois-Picardie\"),\n  read_csv(paste0(path_source, \"sankey_P_flows_Loire_Bretagne.csv\")) %&gt;% mutate(basin = \"Loire-Bretagne\"),\n  read_csv(paste0(path_source, \"sankey_P_flows_Rhin_Meuse.csv\")) %&gt;% mutate(basin = \"Rhin-Meuse\"),\n  read_csv(paste0(path_source, \"sankey_P_flows_Rhone_Mediterranee.csv\")) %&gt;% mutate(basin = \"Rhône-Méditerranée\"),\n  read_csv(paste0(path_source, \"sankey_P_flows_Seine_Normandie.csv\")) %&gt;% mutate(basin = \"Seine-Normandie\"),\n  read_csv(paste0(path_source, \"sankey_P_flows_France.csv\")) %&gt;% mutate(basin = \"Metropolitan France\")\n)\ntemp &lt;- sankey_P %&gt;% \n  filter(target==\"sludge\") %&gt;%\n  select(basin, sludge_P = value) %&gt;%\n  left_join(sludge_production) %&gt;%\n  mutate(\n    P = round(sludge_P/sludge_production)\n    )\n\n# N in sludge\npath_source &lt;- \"output_data/sankey_flows/nitrogen/\"\nsankey_N &lt;- bind_rows(\n  read_csv(paste0(path_source, \"sankey_N_flows_Adour_Garonne.csv\")) %&gt;% mutate(basin = \"Adour-Garonne\"),\n  read_csv(paste0(path_source, \"sankey_N_flows_Artois_Picardie.csv\")) %&gt;% mutate(basin = \"Artois-Picardie\"),\n  read_csv(paste0(path_source, \"sankey_N_flows_Loire_Bretagne.csv\")) %&gt;% mutate(basin = \"Loire-Bretagne\"),\n  read_csv(paste0(path_source, \"sankey_N_flows_Rhin_Meuse.csv\")) %&gt;% mutate(basin = \"Rhin-Meuse\"),\n  read_csv(paste0(path_source, \"sankey_N_flows_Rhone_Mediterranee.csv\")) %&gt;% mutate(basin = \"Rhône-Méditerranée\"),\n  read_csv(paste0(path_source, \"sankey_N_flows_Seine_Normandie.csv\")) %&gt;% mutate(basin = \"Seine-Normandie\"),\n  read_csv(paste0(path_source, \"sankey_N_flows_France.csv\")) %&gt;% mutate(basin = \"Metropolitan France\")\n)\ntemp2 &lt;- sankey_N %&gt;% \n  filter(target==\"sludge\") %&gt;%\n  select(basin, sludge_N = value) %&gt;%\n  left_join(sludge_production) %&gt;%\n  mutate(\n    N = round(sludge_N/sludge_production)\n    )\n\n#combine both, computes N:P ratio\ntemp &lt;- left_join(temp , temp2)\n\ntemp &lt;- bind_rows(\n  review_sludge_composition %&gt;% \n    filter(compost==\"not composted\") %&gt;%\n    select(Study, P, N) %&gt;%\n    mutate(source = \"French review\"),\n  temp %&gt;%\n    select(Study = basin, P, N) %&gt;%\n    mutate(source = \"This study\")\n)\n\n\n\n\nCode\n#function for graph\ng_composition &lt;- function(dataset, select_variable){\n  #order studies by increasing value\n  dataset$Study &lt;- reorder(dataset$Study, dataset %&gt;% pull(!!as.symbol(select_variable)))\n  #remove empty values\n  dataset &lt;- dataset %&gt;% filter(is.na(!!as.symbol(select_variable))==F)\n  \n  ggplot(dataset) +\n    geom_col(aes(Study, !!as.symbol(select_variable), fill=source)) +\n    geom_text(\n      aes(Study, !!as.symbol(select_variable), label=!!as.symbol(select_variable)),\n      hjust=0, fontface=\"italic\"\n      ) +\n    coord_flip() +\n    labs(\n      x=\"\", y=\"\", \n      fill = \"\"\n    ) \n}\n\n\n\nNP\n\n\n\n\nCode\ng_composition(temp, \"N\") +\n  labs(\n    y = \"gN per kg of Dry Matter\"\n  ) +\n  ylim(0, 60)\n\n\n\n\n\nCode\nggsave(#svg\n  \"graphs/appendix/sludge_compo_N.svg\",\n  dpi=500, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/appendix/sludge_compo_N.pdf\",\n  dpi=500, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/appendix/sludge_compo_N.png\",\n  dpi=500, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\nCode\ng_composition(temp, \"P\") +\n  labs(\n    y = \"gP per kg of Dry Matter\"\n  ) +\n  ylim(0, 40)\n\n\n\n\n\nCode\nggsave(#svg\n  \"graphs/appendix/sludge_compo_P.svg\",\n  dpi=500, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/appendix/sludge_compo_P.pdf\",\n  dpi=500, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/appendix/sludge_compo_P.png\",\n  dpi=500, width=5, height=2.8, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nall_WWTP_adour_garonne &lt;- \n  read_csv(\n    \"output_data/all_WWTP/all_WWTP_05_adour_garonne.csv\", \n    #we have to specify the columns types, otherwise problems to combine basins\n    col_types = cols(INSEE_COM=\"numeric\")\n    ) %&gt;%\n  mutate(\n    basin = \"Adour-Garonne\"\n  )\nall_WWTP_rhin_meuse &lt;- \n  read_csv(\n    \"output_data/all_WWTP/all_WWTP_02_rhin_meuse.csv\", \n    #we have to specify the columns types, otherwise problems to combine basins\n    col_types = cols(INSEE_COM=\"numeric\")\n    ) %&gt;%\n  mutate(\n    basin = \"Rhin-Meuse\"\n  )\nall_WWTP_loire_bretagne &lt;- \n  read_csv(\n    \"output_data/all_WWTP/all_WWTP_04_loire_bretagne.csv\", \n    #we have to specify the columns types, otherwise problems to combine basins\n    col_types = cols(INSEE_COM=\"numeric\")\n    ) %&gt;%\n  mutate(\n    basin = \"Loire-Bretagne\"\n  )\nall_WWTP_seine_normandie &lt;- \n  read_csv(\n    \"output_data/all_WWTP/all_WWTP_03_seine_normandie.csv\", \n    #we have to specify the columns types, otherwise problems to combine basins\n    col_types = cols(INSEE_COM=\"numeric\")\n    ) %&gt;%\n  mutate(\n    basin = \"Seine-Normandie\"\n  )\nall_WWTP_rhone_mediterranee &lt;- \n  read_csv(\n    \"output_data/all_WWTP/all_WWTP_06_rhone_mediterranee.csv\", \n    #we have to specify the columns types, otherwise problems to combine basins\n    col_types = cols(INSEE_COM=\"numeric\")\n    ) %&gt;%\n  mutate(\n    basin = \"Rhône-Méditerranée\"\n  )\nall_WWTP_artois_picardie &lt;- \n  read_csv(\n    \"output_data/all_WWTP/all_WWTP_01_artois_picardie.csv\", \n    #we have to specify the columns types, otherwise problems to combine basins\n    col_types = cols(INSEE_COM=\"numeric\")\n    ) %&gt;%\n  mutate(\n    basin = \"Artois-Picardie\"\n  )\n\nall_WWTP &lt;- \n  bind_rows(\n    all_WWTP_adour_garonne, all_WWTP_rhin_meuse, \n    all_WWTP_loire_bretagne, all_WWTP_seine_normandie,\n    all_WWTP_rhone_mediterranee, all_WWTP_artois_picardie\n    ) %&gt;%\n  mutate(\n    NGL_yield = NGL_yield/100,\n    Pt_yield = Pt_yield/100\n  )\n\n\nrm(all_WWTP_adour_garonne, all_WWTP_artois_picardie, all_WWTP_loire_bretagne, all_WWTP_rhin_meuse,\n   all_WWTP_rhone_mediterranee, all_WWTP_seine_normandie)\n\n#order size categories for graph disposition\nall_WWTP$PE_bin &lt;- \n    factor(\n      all_WWTP$PE_bin, \n      levels = \n        c(\"0 - 200 PE\", \n          \"200 - 2 000 PE\", \n          \"2 000 - 10 000 PE\",\n          \"10 000 - 100 000 PE\", \n          \"&gt; 100 000 PE\"\n          )\n        )\n#order the basins for graph disposition\nall_WWTP$basin &lt;- \n  factor(\n    all_WWTP$basin, \n    levels = \n      c(\"Loire-Bretagne\",\n        \"Rhin-Meuse\",\n        \"Adour-Garonne\", \n        \"Artois-Picardie\"\n        )\n      )\n\n\n\n\nCode\nWWTP_2000_Pt_out &lt;- all_WWTP %&gt;% \n  filter(Year==2000, is.na(Pt_out)==F) %&gt;%\n  select(code_WWTP, Pt_out_2000=Pt_out) %&gt;%\n  distinct()\n\nWWTP_2020_Pt_in &lt;- all_WWTP %&gt;% \n  filter(Year==2020, is.na(Pt_out)==F) %&gt;%\n  select(code_WWTP, Pt_out_2020=Pt_out, basin, capacity, PE_bin) %&gt;%\n  distinct()\n\nWWTP_Pt_change &lt;- inner_join(WWTP_2000_Pt_out, WWTP_2020_Pt_in, by=\"code_WWTP\") %&gt;%\n  mutate(Pt_change=(Pt_out_2000-Pt_out_2020)/Pt_out_2000*100) %&gt;%\n  filter(is.na(code_WWTP)==F)\n\n\nggplot(WWTP_Pt_change %&gt;% filter(capacity&gt;200)) +\n  ggbeeswarm::geom_quasirandom(aes(PE_bin, Pt_change, color=basin, size=capacity), alpha=.5) +\n  geom_boxplot(aes(PE_bin, Pt_change), width=.1) +\n  facet_wrap(vars(basin), nrow = 3) +\n  labs(\n    y=\"% decrease in P discharge from 2000 to 2020\", \n    x=\"WWTP capacity\"\n    ) +\n  scale_size_continuous(range = c(0, 15)) + \n  theme(\n    legend.position = \"none\"\n    ) +\n  ylim(0, NA)\n\n\n\n\n\n\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "21_flows_synthesis.html",
    "href": "21_flows_synthesis.html",
    "title": "Nutrient flows synthesis",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#loading relevant packages\n# library(tidyr)\n# library(tidyverse) #mainly for reading files functions\n# library(dplyr)\n# library(ggplot2) #for ggplot graphs\nlibrary(cowplot) #for plot_grid()\n# library(stringr) #to manipulate strings\n# library(ggpattern) #to have patterns area with geom_area_pattern\n# library(viridis)\n# library(readxl) #to read excel file\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(\n      plot.title = element_text(face=\"bold\")\n      )\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\nSource &lt;- \"Sources: Water Agencies\\nComputation Thomas Starck\"\n\n\n#WOULD BE BETTER IF SIAAP WERE THE SAME COLOR AS SEINE-NORMANDIE BASIN\n\n# Load the function file\nsource(\"functions.R\")\n\n\n\nLoad basins files\nWe create a file combining the different basins flows and ratios, for metropolitan France and for each basin. Since the Seine-Normandie basin data is only available for 2015, we also load the SIAAP data, containing 5 of the largest WWTP of Seine-Normandie, over a longer time period.\n\n\nCode\npath_source &lt;- \"output_data/basins/\"\n#artois-picardie\nfile_basin_artois_picardie &lt;- read_csv(paste0(path_source, \"basin_01_artois_picardie.csv\")) %&gt;% \n  mutate(basin=\"Artois-Picardie\")\n#rhin-meuse\nfile_basin_rhin_meuse &lt;- read_csv(paste0(path_source, \"basin_02_rhin_meuse.csv\")) %&gt;% \n  mutate(basin=\"Rhin-Meuse\")\n#SIAAP\nfile_basin_SIAAP &lt;- read_csv(paste0(path_source, \"basin_03_SIAAP.csv\")) %&gt;%\n  mutate(basin=\"SIAAP\")\n#Seine-Normandie\nfile_basin_seine_normandie &lt;- read_csv(paste0(path_source, \"basin_03_seine_normandie.csv\")) %&gt;%\n  mutate(basin=\"Seine-Normandie\")\n#Loire-Bretagne\nfile_basin_loire_bretagne &lt;- read_csv(paste0(path_source, \"basin_04_loire_bretagne.csv\")) %&gt;% \n  mutate(basin=\"Loire-Bretagne\")\n#Adour-Garonne\nfile_basin_adour_garonne &lt;- read_csv(paste0(path_source, \"basin_05_adour_garonne.csv\")) %&gt;% \n  mutate(basin=\"Adour-Garonne\")\n#Rhone-Mediterranée\nfile_basin_rhone_mediterranee &lt;- read_csv(paste0(path_source, \"basin_06_rhone_mediterranee.csv\")) %&gt;% \n  mutate(basin=\"Rhône-Méditerranée\")\n\nfile_basin &lt;- \n  bind_rows(\n    file_basin_artois_picardie,\n    file_basin_rhin_meuse,\n    file_basin_seine_normandie,\n    file_basin_loire_bretagne,\n    file_basin_adour_garonne,\n    file_basin_rhone_mediterranee\n  )\nrm(\n  file_basin_artois_picardie, \n  file_basin_rhin_meuse, \n  file_basin_seine_normandie, \n  file_basin_loire_bretagne, \n  file_basin_adour_garonne, \n  file_basin_rhone_mediterranee\n  )\n\n\nWe load the same data as above but including nominal capacities categories (Basin x Capacity tabs below).\n\n\nCode\npath_source &lt;- \"output_data/basins_PE/\"\n#artois-picardie\nfile_basin_PE_artois_picardie &lt;- read_csv(paste0(path_source, \"basin_PE_01_artois_picardie.csv\")) %&gt;% \n  mutate(basin=\"Artois-Picardie\")\n#rhin-meuse\nfile_basin_PE_rhin_meuse &lt;- read_csv(paste0(path_source, \"basin_PE_02_rhin_meuse.csv\")) %&gt;% \n  mutate(basin=\"Rhin-Meuse\")\n#SIAAP\nfile_basin_PE_SIAAP &lt;- read_csv(paste0(path_source, \"basin_PE_03_SIAAP.csv\")) %&gt;%\n  mutate(basin=\"SIAAP\")\n#Seine-Normandie\nfile_basin_PE_seine_normandie &lt;- read_csv(paste0(path_source, \"basin_PE_03_seine_normandie.csv\")) %&gt;%\n  mutate(basin=\"Seine-Normandie\")\n#Loire-Bretagne\nfile_basin_PE_loire_bretagne &lt;- read_csv(paste0(path_source, \"basin_PE_04_loire_bretagne.csv\")) %&gt;% \n  mutate(basin=\"Loire-Bretagne\")\n#Adour-Garonne\nfile_basin_PE_adour_garonne &lt;- read_csv(paste0(path_source, \"basin_PE_05_adour_garonne.csv\")) %&gt;% \n  mutate(basin=\"Adour-Garonne\")\n#Rhone-Mediterranée\nfile_basin_PE_rhone_mediterranee &lt;- read_csv(paste0(path_source, \"basin_PE_06_rhone_mediterranee.csv\")) %&gt;% \n  mutate(basin=\"Rhône-Méditerranée\")\n\n\nfile_basin_PE &lt;- \n  bind_rows(\n    file_basin_PE_artois_picardie,\n    file_basin_PE_rhin_meuse,\n    file_basin_PE_seine_normandie,\n    file_basin_PE_loire_bretagne,\n    file_basin_PE_adour_garonne,\n    file_basin_PE_rhone_mediterranee\n  ) \n\nfile_basin_PE$PE_bin &lt;- \n    factor(\n      file_basin_PE$PE_bin, \n      levels = \n        c(\"unreported PE\",\n          \"0 - 200 PE\", \n          \"200 - 2 000 PE\", \n          \"2 000 - 10 000 PE\",\n          \"10 000 - 100 000 PE\", \n          \"&gt; 100 000 PE\"\n          )\n        )\n\nrm(\n  file_basin_PE_artois_picardie, \n  file_basin_PE_rhin_meuse, \n  file_basin_PE_seine_normandie, \n  file_basin_PE_loire_bretagne, \n  file_basin_PE_adour_garonne, \n  file_basin_PE_rhone_mediterranee\n  )\n\n\n\n\nNutrient Ratios\n\nBasin scaleBasin x Capacity\n\n\n\n\nCode\nf_graph_ratio_basin &lt;- function(dataset, ratio_in, ratio_out, ratio_label, y_min, y_max, legend_x, legend_y){\n  g &lt;- plot_grid(\n    ggplot(dataset) +\n      #basins\n      geom_line(\n        aes(Year, !!as.symbol(ratio_in), color=basin)\n        ) +\n      #SIAAP and it dotted line\n      geom_line(\n        data = file_basin_SIAAP, aes(Year, !!as.symbol(ratio_in), linetype=\"SIAAP\")\n        ) +\n      scale_linetype_manual(values=c(\"dotted\")) +\n      #Seine-Normandie basin point for 20157\n      geom_point(\n        data = dataset %&gt;% filter(basin==\"Seine-Normandie\"), \n        aes(Year, !!as.symbol(ratio_in), color = factor(basin))\n        ) +\n      ylim(y_min, y_max) +\n      theme(legend.position = \"none\") +\n      labs(\n        x=\"\", y=\"\",\n        title = paste(ratio_label, \"in the different French basins\"),\n        subtitle = \"Incoming flow\",\n        caption = \"\\n\"\n      ),\n    ggplot(dataset) +\n      #basins and the modified legend\n      geom_line(\n        aes(Year, !!as.symbol(ratio_out), color=basin)\n        ) +\n      guides(\n        color = \n          guide_legend(\n            override.aes = \n              list(\n                linetype = c(1, 1, 1, 1, 1, 0),\n                shape = c(NA, NA, NA, NA, NA, 19)\n                )\n            ) \n      ) +\n      #SIAAP and its dotter line\n      geom_line(\n        data = file_basin_SIAAP, \n        aes(Year, !!as.symbol(ratio_out), linetype=\"SIAAP\")\n        ) +\n      scale_linetype_manual(values=c(\"dotted\")) +\n      #Seine Normandie point in 2015\n      geom_point(\n        data = dataset %&gt;% filter(basin==\"Seine-Normandie\"), \n        aes(Year, !!as.symbol(ratio_out), color = basin)\n        ) +\n      ylim(y_min, y_max) +\n      theme(legend.position = c(legend_x, legend_y)) +\n      labs(\n        x=\"\", y=\"\",\n        title = \"\",\n        subtitle = \"Discharged flow\",\n        caption = Source,\n        color=\"\",\n        linetype = \"\"\n      )\n      )\n  return(g)\n}\n\n\n\nN:P ratioDCO:DBO5 ratioDBO5:Pt ratioDBO5:NGL ratioDCO:Pt ratioDCO:NGL ratio\n\n\n\n\nCode\nf_graph_ratio_basin(file_basin, \"N_P_ratio_in\", \"N_P_ratio_out\", \"N:P ratio\", 0, 16, -0.85, 0.7) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_ratio_basin(file_basin, \"DCO_DBO5_ratio_in\", \"DCO_DBO5_ratio_out\", \"DCO:DBO5 ratio\", 0, 8, -0.6, 0.7)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_ratio_basin(file_basin, \"DBO5_P_ratio_in\", \"DBO5_P_ratio_out\", \"DBO5:P ratio\", 0, 40, 0.7, 0.75)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_ratio_basin(file_basin, \"DBO5_N_ratio_in\", \"DBO5_N_ratio_out\", \"DBO5:N ratio\", 0, 6, 0.7, 0.6)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_ratio_basin(file_basin, \"DCO_P_ratio_in\", \"DCO_P_ratio_out\", \"DCO:P ratio\", 0, 100, -0.5, 0.35)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_ratio_basin(file_basin, \"DCO_N_ratio_in\", \"DCO_N_ratio_out\", \"DCO:N ratio\", 0, 15, 0.4, 0.7)\n\n\n\n\n\n\n\n\n\n\nWe do not analyse the very small WWTP (0 to 200 PE) which are very noisy and unreliable. Furthermore, they represent only a few percent of total flows.\n\n\nCode\nf_graph_ratio_basin_PE &lt;- function(dataset, nutrient_ratio, ratio_label, y_min, y_max){\n  g &lt;- ggplot(dataset %&gt;% filter(PE_bin !=\"unreported PE\")) + \n    #basins and the modified legend\n    geom_line(aes(Year, !!as.symbol(nutrient_ratio), color=basin)) +\n      guides(\n        color = \n          guide_legend(\n            override.aes = \n              list(\n                linetype = c(1, 1, 1, 1, 1, 0),\n                shape = c(NA, NA, NA, NA, NA, 19)\n                )\n            ) \n      ) +\n    #SIAAP and its dotted line\n    geom_line(\n      data = file_basin_PE_SIAAP, aes(Year, !!as.symbol(nutrient_ratio), linetype=\"SIAAP\")\n      ) +\n    scale_linetype_manual(values=c(\"dotted\")) +\n    # Seine-Normandie 2015 point\n    geom_point(\n      data = dataset %&gt;% filter(basin==\"Seine-Normandie\"), \n      aes(Year, !!as.symbol(nutrient_ratio), color = factor(basin))\n      ) +\n    labs(\n      x=\"\", y=\"\", color=\"\",\n      title = paste(ratio_label, \"ratio at the basins scale\"),\n      subtitle = \"in the different French basins for each capacity category\",\n      caption = Source, \n      linetype = \"\"\n    ) +\n    facet_wrap(vars(PE_bin)) +\n    ylim(y_min, y_max)\n  return(g)\n}\n\n\n\nN:P ratioDCO:DBO5 ratioDBO5:Pt ratioDBO5:NGL ratioDCO:Pt ratioDCO:NGL ratio\n\n\n\ninout\n\n\n\n\nCode\nf_graph_ratio_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"N_P_ratio_in\", \"incoming N:P\", 0, 10)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_ratio_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"N_P_ratio_out\", \"discharged N:P\", 0, 31)\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_ratio_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DCO_DBO5_ratio_in\", \"incoming DCO:DBO5\", 0, 3)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_ratio_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DCO_DBO5_ratio_out\", \"discharged DCO:DBO5\", 0, 10)\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_ratio_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DBO5_P_ratio_in\", \"incoming DBO5:P\", 0, 40)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_ratio_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DBO5_P_ratio_out\", \"discharged DBO5:P\", 0, 20)\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_ratio_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DBO5_N_ratio_in\", \"incoming DBO5:N\", 0, 6)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_ratio_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DBO5_N_ratio_out\", \"discharged DBO5:N\", 0, 2)\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_ratio_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DCO_P_ratio_in\", \"incoming DCO:P\", 0, 100)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_ratio_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DCO_P_ratio_out\", \"discharged DCO:P\", 0, 100)\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_ratio_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DCO_N_ratio_in\", \"incoming DCO:N\", 0, 15)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_ratio_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DCO_N_ratio_out\", \"discharged DCO:N\", 0, 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYield\n\nBasinBasin x Capacity\n\n\n\n\nCode\nf_graph_yield_basin &lt;- function(dataset, nutrient_yield, yield_label){\n  g &lt;- ggplot(dataset) +\n    # basins and the adapted legend\n    geom_line(aes(Year, !!as.symbol(nutrient_yield), color=basin)) +\n    guides(\n        color = \n          guide_legend(\n            override.aes = \n              list(\n                linetype = c(1, 1, 1, 1, 1, 0),\n                shape = c(NA, NA, NA, NA, NA, 19)\n                )\n            ) \n      ) +\n    #SIAAP and its dotter line\n    geom_line(\n      data = file_basin_SIAAP, aes(Year, !!as.symbol(nutrient_yield), linetype=\"SIAAP\")\n      ) +\n    scale_linetype_manual(values=c(\"dotted\")) +\n    #Seine-Normandie 2015 point\n    geom_point(\n      data = dataset %&gt;% filter(basin==\"Seine-Normandie\"), \n      aes(Year, !!as.symbol(nutrient_yield), color = basin)\n      ) +\n    ylim(0, 100) +\n    labs(\n      x=\"\", y=\"yield (%)\", color=\"\",\n      title = paste(yield_label, \"wastewater treatment plant yield at the basins scale\"),\n      subtitle = \"in the different French basins\",\n      linetype = \"\"\n    )\n  return(g)\n}\n\n\n\nPtNGLDBO5DCOMES\n\n\n\n\nCode\nf_graph_yield_basin(file_basin, \"Pt_yield\", \"Pt\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_basin(file_basin, \"NGL_yield\", \"NGL\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_basin(file_basin, \"DBO5_yield\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_basin(file_basin, \"DCO_yield\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_basin(file_basin, \"MES_yield\", \"MES\")\n\n\n\n\n\n\n\n\n\n\nWe do not analyse the very small WWTP (0 to 200 PE) which are very noisy and unreliable. Furthermore, they represent only a few percent of total flows.\n\n\nCode\nf_graph_yield_basin_PE &lt;- function(dataset, nutrient_yield, yield_label){\n  g &lt;- ggplot(dataset %&gt;% filter(PE_bin !=\"unreported PE\")) + \n    #basins and adapted legend\n    geom_line(aes(Year, !!as.symbol(nutrient_yield), color=basin)) +\n    guides(\n        color = \n          guide_legend(\n            override.aes = \n              list(\n                linetype = c(1, 1, 1, 1, 1, 0),\n                shape = c(NA, NA, NA, NA, NA, 19)\n                )\n            ) \n      ) +\n    #SIAAP and its dotter line\n    geom_line(\n      data = file_basin_PE_SIAAP, aes(Year, !!as.symbol(nutrient_yield), linetype=\"SIAAP\")\n      ) +\n    scale_linetype_manual(values=c(\"dotted\")) +\n    #Seine-Normandie basin in 2015\n    geom_point(\n      data = dataset %&gt;% filter(basin==\"Seine-Normandie\"), \n      aes(Year, !!as.symbol(nutrient_yield), color = basin)\n    ) +\n    ylim(0, 100) +\n    labs(\n      x=\"\", y=\"yield (%)\", color=\"\",\n      title = paste(yield_label, \"wastewater treatment plant yield at the basins scale\"),\n      subtitle = \"in the different French basins\",\n      caption = Source,\n      linetype = \"\"\n    ) +\n    facet_wrap(vars(PE_bin)) \n  return(g)\n}\n\n\n\nPtNGLDBO5DCOMES\n\n\n\n\nCode\nf_graph_yield_basin_PE(file_basin_PE %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \"Pt_yield\", \"Pt\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_basin_PE(file_basin_PE %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \"NGL_yield\", \"NGL\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_basin_PE(file_basin_PE %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \"DBO5_yield\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_basin_PE(file_basin_PE %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \"DCO_yield\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_basin_PE(file_basin_PE %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \"MES_yield\", \"MES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlow / Capacity\n\nBasinBasin x Capacity\n\n\n\n\nCode\nf_graph_capacity_basin &lt;- function(dataset, ratio_in, ratio_out, ratio_label, y_min, y_max, legend_x, legend_y){\n  g &lt;- plot_grid(\n    ggplot(dataset) +\n      #basins \n      geom_line(aes(Year, !!as.symbol(ratio_in), color=basin)) +\n      #SIAAP dotted line\n      geom_line(\n        data = file_basin_SIAAP, aes(Year, !!as.symbol(ratio_in), linetype=\"SIAAP\")\n        ) +\n      scale_linetype_manual(values=c(\"dotted\")) +\n      #Seine-Normandie point in 2015\n      geom_point(\n        data = dataset %&gt;% filter(basin==\"Seine-Normandie\"), \n        aes(Year, !!as.symbol(ratio_in), color = factor(basin))\n        ) +\n      theme(legend.position = \"none\") +\n      labs(\n        x=\"\", y=expression(paste(\"g.PE\"^\"-1\", \".day\"^\"-1\")),\n        title = paste(ratio_label, \"per nominal PE in the different French basins\"),\n        subtitle = \"Incoming flow\",\n        caption = \"\\n\"\n      ) +\n      scale_y_continuous(\n        limits = c(y_min, y_max),\n        sec.axis = \n          sec_axis(\n            trans=~.*(365/1000), \n            name=\"\"\n            )\n          ),\n    ggplot(dataset) +\n      #basins and adapted legend\n      geom_line(aes(Year, !!as.symbol(ratio_out), color=basin)) +\n      guides(\n        color = \n          guide_legend(\n            override.aes = \n              list(\n                linetype = c(1, 1, 1, 1, 1, 0),\n                shape = c(NA, NA, NA, NA, NA, 19)\n                )\n            ) \n        ) +\n      #SIAAP\n      geom_line(\n        data = file_basin_SIAAP, \n        aes(Year, !!as.symbol(ratio_out), linetype=\"SIAAP\")\n        ) +\n      scale_linetype_manual(values=c(\"dotted\")) +\n      #Seine Normandie\n      geom_point(\n        data = dataset %&gt;% filter(basin==\"Seine-Normandie\"), \n        aes(Year, !!as.symbol(ratio_out), color = basin)\n        ) +\n      theme(legend.position = c(legend_x, legend_y)) +\n      labs(\n        x=\"\", y=\"\",\n        title = \"\",\n        subtitle = \"Discharged flow\",\n        caption = Source,\n        color=\"\",\n        linetype = \"\"\n      ) +\n      scale_y_continuous(\n        limits = c(y_min, y_max),\n        sec.axis = \n          sec_axis(\n            trans=~.*(365/1000), \n            name=expression(paste(\"kg.PE\"^\"-1\", \".year\"^\"-1\"))\n            )\n        )\n      )\n  return(g)\n}\n\n\n\nPt / nominal PENGL / nominal PEDBO5 / nominal PEDCO / nominal PEMES / nominal PE\n\n\n\n\nCode\nf_graph_capacity_basin(file_basin, \"Pt_PE_ratio_in\", \"Pt_PE_ratio_out\", \"Pt\", 0, 2, 0.7, 0.7) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_capacity_basin(file_basin, \"NGL_PE_ratio_in\", \"NGL_PE_ratio_out\", \"NGL\", 0, 12, 0.25, 0.75)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_capacity_basin(file_basin, \"DBO5_PE_ratio_in\", \"DBO5_PE_ratio_out\", \"DBO5\", 0, 40, 0.6, 0.7)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_capacity_basin(file_basin, \"DCO_PE_ratio_in\", \"DCO_PE_ratio_out\", \"DCO\", 0, 90, 0.6, 0.7)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_capacity_basin(file_basin, \"MES_PE_ratio_in\", \"MES_PE_ratio_out\", \"MES\", 0, 60, 0.6, 0.7)\n\n\n\n\n\n\n\n\n\n\nWe do not analyse the very small WWTP (0 to 200 PE) which are very noisy and unreliable. Furthermore, they represent only a few percent of total flows.\n\n\nCode\nf_graph_capacity_basin_PE &lt;- function(dataset, nutrient_ratio, ratio_label, y_min, y_max){\n  g &lt;- ggplot(dataset %&gt;% filter(PE_bin !=\"unreported PE\")) + \n    #basins and adapted legend\n    geom_line(aes(Year, !!as.symbol(nutrient_ratio), color=basin)) +\n    guides(\n        color = \n          guide_legend(\n            override.aes = \n              list(\n                linetype = c(1, 1, 1, 1, 1, 0),\n                shape = c(NA, NA, NA, NA, NA, 19)\n                )\n            ) \n      ) +\n    #seine normandie point in 2015\n    geom_point(\n      data = dataset %&gt;% filter(basin==\"Seine-Normandie\"), \n      aes(Year, !!as.symbol(nutrient_ratio), color = factor(basin))\n      ) +\n    #SIAAP dotted line\n    geom_line(\n      data = file_basin_PE_SIAAP, aes(Year, !!as.symbol(nutrient_ratio), linetype=\"SIAAP\")\n      ) +\n    scale_linetype_manual(values=c(\"dotted\")) +\n    labs(\n      x=\"\", y=expression(paste(\"g.PE\"^\"-1\", \".day\"^\"-1\")), \n      color=\"\",\n      title = paste(ratio_label, \"per nominal PE in the different French basins\"),\n      subtitle = \"in the different French basins for each capacity category\",\n      caption = Source,\n      linetype =\"\"\n    ) +\n  facet_wrap(vars(PE_bin)) +\n    scale_y_continuous(\n        limits = c(y_min, y_max),\n        sec.axis = \n          sec_axis(\n            trans=~.*(365/1000), \n            name=expression(paste(\"kg.PE\"^\"-1\", \".year\"^\"-1\"))\n            )\n        )\n  return(g)\n}\n\n\n\nPt / nominal PENGL / nominal PEDBO5 / nominal PEDCO / nominal PEMES / nominal PE\n\n\n\ninout\n\n\n\n\nCode\nf_graph_capacity_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"Pt_PE_ratio_in\", \"Incoming Pt\", 0, 2) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_capacity_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"Pt_PE_ratio_out\", \"Discharged Pt\", 0, 1.5)\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_capacity_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"NGL_PE_ratio_in\", \"Incoming NGL\", 0, 12)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_capacity_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"NGL_PE_ratio_out\", \"Discharged NGL\", 0, 5)\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_capacity_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DBO5_PE_ratio_in\", \"Incoming DBO5\", 0, 40)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_capacity_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DBO5_PE_ratio_out\", \"Discharged DBO5\", 0, 5)\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_capacity_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DCO_PE_ratio_in\", \"Incoming DCO\", 0, 100)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_capacity_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"DCO_PE_ratio_out\", \"Discharged DCO\", 0, 15)\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_capacity_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"MES_PE_ratio_in\", \"Incoming DCO\", 0, 60)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_capacity_basin_PE(file_basin_PE %&gt;% filter(PE_bin !=\"0 - 200 PE\"), \"MES_PE_ratio_out\", \"Discharged DCO\", 0, 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIndustrial network discharge\n\n\nCode\npath_source &lt;- \"output_data/industry_sewers_network_discharge/\"\ntemp &lt;- read_csv(paste0(path_source, \"industry_sewers_network_discharge_GEREP_basins.csv\"))\n\n\n\n\nCode\nSource &lt;- \"GEREP database\\nComputation by Thomas Starck\"\n\nf_graph_industry_discharge &lt;- function(dataset, nutrient_select, nutrient_label){\n  g &lt;- plot_grid(\n    ggplot(temp %&gt;% filter(basin != \"Metropolitan France\")) +\n      geom_area(aes(Year, !!as.symbol(nutrient_select), fill = basin), alpha=.8) +\n      geom_line(\n        data = temp %&gt;% filter(basin == \"Metropolitan France\"),\n        aes(Year, !!as.symbol(nutrient_select))) +\n      theme(legend.position = \"none\") +\n      labs(\n        x=\"\", y=\"kt per year\",\n        fill = \"\",\n        title = paste(\"Industrial\", nutrient_label ,\"pollution discharged in sewage network\"),\n        subtitle = \"Metropolitan France\",\n        caption = \"\\n\"\n      ),\n    ggplot(temp %&gt;% filter(basin != \"Metropolitan France\")) +\n      geom_area(aes(Year, !!as.symbol(nutrient_select), fill = basin), alpha=.8) +\n      labs(\n        x=\"\", y=\"\",\n        fill = \"\",\n        title = \"\",\n        subtitle = \"for each basin\",\n        caption = Source\n      ) +\n      theme(legend.position = \"none\") +\n      facet_wrap(vars(basin), scales = \"free_y\"),\n    rel_widths = c(0.25, 0.75)\n    )\n  \n  return(g)\n}\n\n\n\nPtNGLDBO5DCOMES\n\n\n\n\nCode\nf_graph_industry_discharge(temp, \"Pt_in\", \"Pt\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_industry_discharge(temp, \"NGL_in\", \"NGL\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_industry_discharge(temp, \"DBO5_in\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_industry_discharge(temp, \"DCO_in\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_industry_discharge(temp, \"MES_in\", \"MES\")\n\n\n\n\n\n\n\n\n\n\nCapacities distribution\n\n\nCode\npath_source &lt;- \"output_data/zipf_law\"\nSource &lt;- \"Source: Water Agencies\\nComputation by Thomas Starck\"\n\nfile_zipf_law &lt;- \n  list.files( \n    #read and merge csv of all years\n    path = path_source,\n    pattern = \"zipf_law*\", \n    full.names = T, \n    recursive = T\n    ) %&gt;% \n  lapply(read_csv) %&gt;% \n  bind_rows\n\n\n\nNb of WWTPs vs CapacityZipf law\n\n\n\nlinear scalelog scale\n\n\n\n\nCode\nggplot(file_zipf_law) +\n  geom_step(\n    aes(percent_rank, percent_cumulative_capacity, color = basin)\n    ) +\n  labs(\n    x=\"% of WWTP, by basin\", y=\"% of total capacity\",\n    title = \"Cumulative distribution\",\n    subtitle = \"nb of WWTP vs total capacity, by basin\"\n  ) +\n  ylim(0, 100)\n\n\n\n\n\n\n\n\n\nCode\nggplot(file_zipf_law) +\n  geom_step(\n    aes(percent_rank, percent_cumulative_capacity, color = basin)\n    ) +\n  scale_x_log10(labels = scales::label_number(drop0trailing = TRUE)) +\n  scale_y_log10(labels = scales::label_number(drop0trailing = TRUE)) +\n  labs(\n    x=\"% of WWTP, by basin\", y=\"% of total capacity\",\n    title = \"Cumulative distribution\",\n    subtitle = \"nb of WWTP vs total capacity, by basin\"\n  ) +\n  ylim(0, 100)\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(file_zipf_law) +\n  geom_point(\n    aes(rank_STEU, capacity, color = basin)\n    ) +\n  geom_line(\n    aes(rank_STEU, capacity, color = basin)\n    ) +\n  scale_x_log10(labels = scales::label_number(drop0trailing = TRUE)) +\n  scale_y_log10(labels = scales::label_number(drop0trailing = TRUE)) +\n  labs(\n    x=\"rank of WWTP capacity, by basin\", y=\"WWTP nominal capacity\\n(population equivalent)\",\n    title = \"Looking for a Zipf Law\",\n    subtitle = \"as an indication, shaded area represent the -1 power law\"\n  ) +\n  geom_function(fun = ~ (2*10^6)*.x^-(1), linewidth=9, alpha=.4)\n\n\n\n\n\n\n\n\n\n\nSave final data\nWe save the adjusted nutrient flows for each basin, averaged over the 2015-2020 period.\n\n\nCode\n#basin mean over 2015-2020\ntemp &lt;- file_basin %&gt;%\n  filter(Year&gt;2014 & Year&lt;2021) %&gt;%\n  mutate(Year = \"2015-2020 mean\") %&gt;%\n  select(\n    basin, Year,\n    Pt_in_adj, Pt_out_adj,\n    NGL_in_adj, NGL_out_adj,\n    DBO5_in_adj, DBO5_out_adj,\n    DCO_in_adj, DCO_out_adj,\n    MES_in_adj, MES_out_adj\n  ) %&gt;%\n  group_by(Year, basin) %&gt;%\n  summarise_all(mean, na.rm=T) %&gt;%\n  mutate_if(\n    is.numeric, signif, 2\n    )\n\n#metropolitan mean over 2015-2020\ntemp2 &lt;- temp %&gt;%\n  mutate(basin = \"Metropolitan France\") %&gt;%\n  group_by(Year, basin) %&gt;%\n  summarise_all(sum) \n\n#save all data\ntemp &lt;- bind_rows(\n  temp2, temp\n)\npath_output &lt;- \"output_data/0_final_data/\"\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basins_flows_2015_2020.csv\"\n)\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "11_WWTP_synthesis.html",
    "href": "11_WWTP_synthesis.html",
    "title": "Synthesis",
    "section": "",
    "text": "In a further version of the project, we will merge the data from the 6 different basins with the data from the sanitation portal.\nThis will produce a unique dataset of harmonized WWTP data, with extensive description of their characteristics and inflows and outflows, over 1-2 decades (depending on the water agency basin)."
  },
  {
    "objectID": "06_rhone_mediterranee.html",
    "href": "06_rhone_mediterranee.html",
    "title": "Rhone Méditerranee Corse",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#loading additional relevant packages\nlibrary(cowplot) #for plot_grid()\n\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(\n      plot.title = element_text(face=\"bold\")\n      )\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\nSource &lt;- \"Agence de l'Eau Rhône-Méditerranée Corse\\nComputation by Thomas Starck\"\n\nYear_analysis &lt;- 2020\n\n# Load the function file\nsource(\"functions.R\")\n\n\n\nSource and Description\n\nBasin descriptionData SourceFirst cleaningCreating files\n\n\nSome information can be found on the Guide de l’eau (water guides), here and here.\nThe Etat des lieux report ican be found here. There are 15.5 million inhabitants on the basin.\n\n\nAll data were downloaded here. We use 2 kind of data\n\nperformances steps (1999-2020), described here. Data about pollution flows in and out of WWTP.\ndescriptif STEU (1993-2020), described here. Description of WWTP.\n\n\n\nthe 2017 file related to WWTP description is not present in the data (apparently replaced by the performance file by error).\nWe load the files related to WWTP performances.\nWe consider incoming NGL and NTK are the same (only NTK reported before 2009 and only NGL after 2009). This approximation does not hold for outgoing NTK and NGL.\n\n\nCode\n#now need to read separately files 1999-2007 vs 2009-2020 (no file for 2008), because they are not reported in the same columns format\n\n#path for data \npath_source &lt;- \"source_data/06_rhone_mediterranee/performance_STEU/\"\n\n#reading files for years 1999-2007\nfile_1999_2007 &lt;- list.files( #read and merge csv of all years\n    path = path_source,\n    pattern = c(\"1999|2000|2001|2002|2003|2004|2005|2006|2007\"), \n    full.names = T, recursive = T) %&gt;%\n    lapply(read_csv2, locale=locale(encoding=\"latin1\")) %&gt;% bind_rows()\nfile_1999_2007 &lt;- file_1999_2007 %&gt;% distinct() \n\n#read and merge csv of all years\nfile_2008_2020 &lt;- list.files(\n    path = path_source,\n    pattern = c(\"2009|2010|2011|2012|2013|2014|2015|2016|2017|2018|2019|2020\"), \n    full.names = T, recursive = T) %&gt;%\n    lapply(read_csv2, locale=locale(encoding=\"latin1\")) %&gt;% bind_rows()\nfile_2008_2020 &lt;- file_2008_2020 %&gt;% distinct()\n\n\n# ON PEUT ENCORE SELECTIONNERNOM ET CODE COMMUNE, DEP, REG ET ZONE HYDROGRAPHIQUE\nN_P_rhone_mediterranee_1999_2007 &lt;- file_1999_2007 %&gt;%\n  select(\n    Year = Année, \n    code_WWTP = code_STEP, \n    name_WWTP = Nom_STEP, \n    name_commune = Nom_commune,\n    treatment_type = Dispositif_traitement,\n    capacity = Capacité_traitement, \n    PE_mean_in = Quantité_pollution_entrante,\n    PE_mean_out = Quantité_pollution_sortante, \n    MES_in = Quantité_MES_entrante,\n    MES_out = Quantité_MES_sortante,\n    Pt_in = Quantité_P_entrante,\n    Pt_out = Quantité_P_sortante,\n    NTK_in = Quantité_NR_entrante, \n    NTK_out = Quantité_NR_sortante\n  ) %&gt;%\n  mutate(\n    NGL_in = NTK_in,\n    NGL_out = NA,\n    DBO5_in = PE_mean_in*0.06,\n    DBO5_out = PE_mean_out*0.06\n  )\n\n#ON PEUT ENCORE SELECTIONNER NOM COMMUNE, DEP, REG\nN_P_rhone_mediterranee_2008_2020 &lt;- file_2008_2020 %&gt;%\n  select(\n    Year = ANNEE, \n    code_WWTP = `CODE NATIONAL STATION`, \n    name_WWTP = `NOM STATION`, \n    name_commune = `NOM COMMUNE IMPLANTATION STATION`,\n    capacity = `CAPACITE STATION EN EH`, \n    DBO5_in = `FLUX EN ENTREE DE STATION - DBO5`, \n    DBO5_out = `FLUX EN SORTIE DE STATION - DBO5`, \n    DCO_in = `FLUX EN ENTREE DE STATION - DCO`,\n    DCO_out = `FLUX EN SORTIE DE STATION - DCO`,\n    MES_in = `FLUX EN ENTREE DE STATION - MES`,\n    MES_out = `FLUX EN SORTIE DE STATION - MES`,\n    NGL_in = `FLUX EN ENTREE DE STATION - NGL`,\n    NGL_out = `FLUX EN SORTIE DE STATION - NGL`,\n    Pt_in = `FLUX EN ENTREE DE STATION - PT`,\n    Pt_out = `FLUX EN SORTIE DE STATION - PT` \n  ) %&gt;%\n  mutate(\n    NTK_in = NGL_in,\n    NTK_out = NA,\n    treatment_type = NA,\n  )\n\nN_P_rhone_mediterranee &lt;- \n  bind_rows(\n    N_P_rhone_mediterranee_1999_2007, N_P_rhone_mediterranee_2008_2020\n  )\n\n\n\n\nCode\n#finding double reporting\ndoublons_1999_2007 &lt;-N_P_rhone_mediterranee_1999_2007 %&gt;%\n  select(Year, code_WWTP) %&gt;%\n  count(Year, code_WWTP) %&gt;%\n  filter(n !=1)\n\ndoublons_1999_2007 &lt;- inner_join(\n  doublons_1999_2007,\n  N_P_rhone_mediterranee_1999_2007,\n  by = c(\"Year\", \"code_WWTP\")\n)\n\n#no doublons in 2008-2020 ; uncomment to check\n# doublons_2008_2020 &lt;-N_P_rhone_mediterranee_2008_2020 %&gt;%\n#   select(Year, code_WWTP) %&gt;%\n#   count(Year, code_WWTP) %&gt;%\n#   filter(n !=1)\n\n#for now just remove, see later if we can keep values\n#remove double reported lines from main file\nN_P_rhone_mediterranee_1999_2007 &lt;- \n  anti_join(\n    N_P_rhone_mediterranee_1999_2007,\n    doublons_1999_2007\n    )\n\n\nloading files of WWTP descriptions\n\n\nCode\npath_source &lt;- \"source_data/06_rhone_mediterranee/description_STEU/\"\n# need to load separately the years because different format reporting of the files\n# + 2017 file is missing (they provided the performance instead)\n\nfile_WWTP_1999_2007 &lt;- list.files(\n    path = path_source,\n    pattern = c(\"1999|2000|2001|2002|2003|2004|2005|2006|2007\"), \n    full.names = T, recursive = T) %&gt;%\n    lapply(read_csv2, locale=locale(encoding=\"latin1\")) %&gt;% bind_rows()\n\nfile_WWTP_2008_2013 &lt;- \n  list.files(\n    path = path_source,\n    pattern = c(\"2008|2009|2010|2011|2012|2013\"), \n    full.names = T, recursive = T\n    ) %&gt;%\n  lapply(\n    read_csv2, locale=locale(encoding=\"latin1\")) %&gt;% \n  bind_rows()\n\nfile_WWTP_2014_2020 &lt;- \n  list.files(\n    path = path_source,\n    pattern = c(\"2014|2015|2016|2018|2019|2020\"), \n    full.names = T, recursive = T\n    ) %&gt;%\n  lapply(\n    read_csv2, locale=locale(encoding=\"latin1\")\n  ) %&gt;%\n  bind_rows()\n#Eroor for 2017, they supply the performance file and not the description file =&gt; no data\n\n#ON PEUT ENCORE SELECTIONNER LA PRECISION DU REJET, CODE ET NOM COM, DEP, REG, ZONE HYDRO\nWWTP_1999_2007 &lt;- file_WWTP_1999_2007 %&gt;%\n  select(\n    Year = Année,\n    code_WWTP = Code_step,\n    name_WWTP = Nom_step, \n    capacity = Capacité_traitement,\n    treatment_type = Dispositif_traitement,\n    lat_WWTP = CoordonnéeX_step,\n    long_WWTP = CoordonnéeY_step,\n    lat_discharge = CoordonnéeX_rejet,\n    long_discharge = CoordonnéeY_rejet,\n    INSEE_COM = Code_département\n  ) \n#ON PEUT ENCORE SELECTIONNER LA PRECISION DU REJET, CODE ET NOM COM, DEP, REG, ZONE HYDRO\nWWTP_2008_2013 &lt;- file_WWTP_2008_2013 %&gt;%\n  select(\n    Year = Année,\n    code_WWTP = code_STEP,\n    name_WWTP = Nom_STEP, \n    capacity = Capacité_traitement,\n    treatment_type = Dispositif_traitement,\n    lat_WWTP = Coordonnées_STEP_X,\n    long_WWTP = Coordonnées_STEP_Y,\n    lat_discharge = Coordonnées_REJET_X,\n    long_discharge = Coordonnées_REJET_X,\n    INSEE_COM = Code_Département_STEP\n  )\n\n#ON PEUT ENCORE SELECTIONNER LA PRECISION DU REJET, CODE ET NOM COM, DEP, REG, ZONE HYDRO\nWWTP_2014_2020 &lt;- file_WWTP_2014_2020 %&gt;%\n  select(\n    Year = Année,\n    code_WWTP = code_STEP,\n    name_WWTP = Nom_STEP, \n    capacity = Capacité_EH, #apparently in kgDBO5 ?\n    treatment_type = Dispositif_traitement,\n    lat_WWTP = Coordonnées_STEP_X,\n    long_WWTP = Coordonnées_STEP_Y,\n    lat_discharge = Coordonnées_REJET_X,\n    long_discharge = Coordonnées_REJET_X,\n    INSEE_COM = Code_Département_STEP\n  )\nWWTP &lt;- \n  bind_rows(WWTP_1999_2007, WWTP_2008_2013, WWTP_2014_2020)\n\n\nCareful, there are a lot of double reporting starting 2008 ! We clean it.\n\n\nCode\n# Careful, a lot of doubel reporting !!!! check it in this this file\ndouble_reporting_WWTP &lt;- WWTP %&gt;%\n  select(Year, code_WWTP) %&gt;%\n  count(Year, code_WWTP) %&gt;%\n  filter(n !=1)\n# we remove the double reporting\nWWTP &lt;- WWTP %&gt;% distinct()\n\n\nThere remains a few double reporting, with different values. In the WWTP description files, these are :\n\nRoussilon (code SANDRE 060984102001) in 1999: remove the one with capacity 350 (kept: 1100)\nBISINCHI (code SANDRE 060920039001) in 2001: remove the one with capacity 500 (kept: 600)\nST ROMAIN DE JALIONAS (code SANDRE 060938451001) in 2001: remove the one with capacity 3200 (kept: 9000)\nSARRAS - CHAMPIALET (code SANDRE 060907308002) in 2005: remove the one with capacity 50 (kept: 30)\nAREGNO (code SANDRE 060920020001) in 2005 : remove the one with capacity 400 (kept: 9500)\nJAILLANS - CHEF LIEU (code SANDRE 060926381001) in 2006: remove the one with capacity 200 (kept: 560)\nST APPOLINAIRE (code SANDRE 060969181001) in 2007 : remove the one with capacity 150 (kept: 170)\nMontpellier (Maera) (code SANDRE 060934172001) in 2018, 2019, 2020: remove the one with unreported discharge coordinates\n\nFor the WWTP performances files, these are almost the same errors (except for Montpellier which is not double reported here). We correct both files.\n\n\nCode\ndoublons_WWTP &lt;- WWTP %&gt;%\n  select(Year, code_WWTP) %&gt;%\n  count(Year, code_WWTP) %&gt;%\n  filter(n !=1) %&gt;%\n  left_join(WWTP, by=c(\"Year\", \"code_WWTP\"))\n\ndoublons_N_P &lt;- N_P_rhone_mediterranee %&gt;%\n  select(Year, code_WWTP) %&gt;%\n  count(Year, code_WWTP) %&gt;%\n  filter(n !=1) %&gt;%\n  left_join(N_P_rhone_mediterranee, by=c(\"Year\", \"code_WWTP\"))\n\n#the ones to be removed in WWTP\ntemp &lt;- doublons_WWTP %&gt;%\n  filter(!(code_WWTP==\"060984102001\" & Year==1999 & capacity==350)) %&gt;%\n  filter(!(code_WWTP==\"060920039001\" & Year==2001 & capacity==500)) %&gt;%\n  filter(!(code_WWTP==\"060938451001\" & Year==2001 & capacity==3200)) %&gt;%\n  filter(!(code_WWTP==\"060907308002\" & Year==2005 & capacity==50)) %&gt;%\n  filter(!(code_WWTP==\"060920020001\" & Year==2005 & capacity==400)) %&gt;%\n  filter(!(code_WWTP==\"060926381001\" & Year==2006 & capacity==200)) %&gt;%\n  filter(!(code_WWTP==\"060969181001\" & Year==2007 & capacity==150)) %&gt;%\n  filter(!(code_WWTP==\"060934172001\" & is.na(lat_discharge)==T))\n\nWWTP &lt;- anti_join(WWTP, temp)\n\n#the ones to be removed in N_P_rhone_med\ntemp &lt;- doublons_WWTP %&gt;%\n  filter(!(code_WWTP==\"060984102001\" & Year==1999 & capacity==350)) %&gt;%\n  filter(!(code_WWTP==\"060920039001\" & Year==2001 & capacity==500)) %&gt;%\n  filter(!(code_WWTP==\"060938451001\" & Year==2001 & capacity==3200)) %&gt;%\n  filter(!(code_WWTP==\"060907308002\" & Year==2005 & capacity==50)) %&gt;%\n  filter(!(code_WWTP==\"060920020001\" & Year==2005 & capacity==400)) %&gt;%\n  filter(!(code_WWTP==\"060926381001\" & Year==2006 & capacity==200)) %&gt;%\n  filter(!(code_WWTP==\"060969181001\" & Year==2007 & capacity==150)) \n\nN_P_rhone_mediterranee &lt;- anti_join(N_P_rhone_mediterranee, temp)\n\n\nWe check reporting coherence of the 2 files. Starting 2010, the WWTP description file reports more WWTP (left), but in terms of total reported capacity the 2 are very similar (because the unreported stations are very small)..\n\n\nCode\ntemp &lt;- WWTP %&gt;%\n  group_by(Year) %&gt;%\n  summarise(capacity=sum(capacity, na.rm = T)/10^6, n=n())\n\ntemp2 &lt;- N_P_rhone_mediterranee %&gt;%\n  group_by(Year) %&gt;%\n  summarise(capacity=sum(capacity, na.rm = T)/10^6, n=n())\n\nplot_grid(\n  ggplot(temp) + \n    geom_line(aes(Year, n, color = \"CAT_descrip_step files\")) + \n    geom_line(data = temp2, aes(Year, n, color = \"CAT_perfostep files\")) + \n    ylim(0, NA) +\n    labs(\n      x=\"\", y=\"\", subtitle = \"nb of WWTP\", caption = \"\"\n    ) +\n    theme(\n      legend.position = \"none\"\n    ),\n  ggplot(temp) + \n    geom_line(data = temp, aes(Year, capacity, color = \"CAT_descrip_step files\")) + \n    geom_line(data = temp2, aes(Year, capacity, color = \"CAT_perfostep files\")) + \n    ylim(0, NA) +\n    labs(\n      x=\"\", y=\"\", subtitle = \"total capacity\", caption =  Source\n    ) +\n    theme(\n      legend.position = c(0.4, 0.3), \n      legend.title = element_blank()\n    )\n)\n\n\n\n\n\nCode\n#only 1 WWTP not reporting capacity each year in the CAT_descrip_step files =&gt; OK\ntest &lt;- WWTP %&gt;%\n  filter(is.na(capacity)==T) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(n=n())\n\n# &lt;50 WWTP not reporting capacity each year in CAT_perfostep files files =&gt; OK\ntest &lt;- N_P_rhone_mediterranee %&gt;%\n  filter(is.na(capacity)==T) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(n=n())\n\nrm(test)\n\n\nWe merge the 2 files. For the capacities, we give priority to the one reported in the perf file, and if it is empty, we use the one in the description file.\n\n\nCode\n#first wee keep the capacity, treatment type and name reported in both files\nN_P_rhone_mediterranee &lt;- \n  left_join(\n    N_P_rhone_mediterranee %&gt;%\n      rename(\n        treatment_type_perf = treatment_type,\n        capacity_perf = capacity,\n        name_WWTP_perf = name_WWTP\n        ), \n    WWTP %&gt;%\n      rename(\n        treatment_type_descr = treatment_type,\n        capacity_descr = capacity,\n        name_WWTP_descr = name_WWTP\n        ), \n    by=c(\"Year\", \"code_WWTP\")\n  )\n\n#we give priority to the perf file, and if empty we take the values of descr file\nN_P_rhone_mediterranee &lt;- N_P_rhone_mediterranee %&gt;%\n  mutate(\n    capacity_perf = case_when(\n      is.na(capacity_perf)==T ~ capacity_descr,\n      T ~ capacity_perf\n    ),\n    treatment_type_perf = case_when(\n      is.na(treatment_type_perf)==T ~ treatment_type_descr,\n      T ~ treatment_type_perf\n    ),\n    name_WWTP_perf = case_when(\n      is.na(name_WWTP_perf)==T ~ name_WWTP_descr,\n      T ~ name_WWTP_perf\n    )\n  )\n\n#We keep only the corrected ones\nN_P_rhone_mediterranee &lt;- N_P_rhone_mediterranee %&gt;%\n  rename(\n    capacity = capacity_perf,\n    treatment_type = treatment_type_perf,\n    name_WWTP = name_WWTP_perf\n  ) %&gt;%\n  select(\n    -capacity_descr, -treatment_type_descr, -name_WWTP_descr\n  )\n\n\nIf nutrient flows are negative or null we replace them with empty values\n\n\nCode\n# Some reported flows are negative or null. We replace them with empty values.\n#Pt\nN_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$Pt_in &lt;= 0] &lt;- NA\nN_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$Pt_out &lt;= 0] &lt;- NA\n#DBO5\nN_P_rhone_mediterranee$DBO5_in[N_P_rhone_mediterranee$DBO5_in &lt;= 0] &lt;- NA\nN_P_rhone_mediterranee$DBO5_out[N_P_rhone_mediterranee$DBO5_out &lt;= 0] &lt;- NA\n#DCO\nN_P_rhone_mediterranee$DCO_in[N_P_rhone_mediterranee$DCO_in &lt;= 0] &lt;- NA\nN_P_rhone_mediterranee$DCO_out[N_P_rhone_mediterranee$DCO_out &lt;= 0] &lt;- NA\n#MES\nN_P_rhone_mediterranee$MES_in[N_P_rhone_mediterranee$MES_in &lt;= 0] &lt;- NA\nN_P_rhone_mediterranee$MES_out[N_P_rhone_mediterranee$MES_out &lt;= 0] &lt;- NA\n#NTK\nN_P_rhone_mediterranee$NTK_in[N_P_rhone_mediterranee$NTK_in &lt;= 0] &lt;- NA\nN_P_rhone_mediterranee$NTK_out[N_P_rhone_mediterranee$NTK_out &lt;= 0] &lt;- NA\n#NGL\nN_P_rhone_mediterranee$NGL_in[N_P_rhone_mediterranee$NGL_in &lt;= 0] &lt;- NA\nN_P_rhone_mediterranee$NGL_out[N_P_rhone_mediterranee$NGL_out &lt;= 0] &lt;- NA\n\n\nSome WWTP have unreported capacities. For the most recent of them we are able to get their capacity from the sanitation portal data.\n\n\nCode\n#get the list of WWTP with unreported capacities\nunreported_capacity &lt;- N_P_rhone_mediterranee %&gt;% filter(is.na(capacity))\n\n#get capacities from the sanitation portal\nsanitation_portal_capacity &lt;- read_csv(\"output_data/all_WWTP/all_WWTP_sanitation_portal.csv\") %&gt;%\n  select(code_WWTP, capacity) %&gt;%\n  distinct()\n\n#change value when possible\nunreported_capacity &lt;- left_join(\n  unreported_capacity %&gt;% rename(capacity_LB = capacity), \n  sanitation_portal_capacity %&gt;% \n    select(code_WWTP, capacity), \n  by=\"code_WWTP\"\n) %&gt;%\n  select(-capacity_LB)\n\n#we change the values in the main file.\nN_P_rhone_mediterranee &lt;- N_P_rhone_mediterranee %&gt;% \n  filter(is.na(capacity)==F)\n\nN_P_rhone_mediterranee &lt;- bind_rows(\n  N_P_rhone_mediterranee, unreported_capacity\n)\n\n\nIn spite of this correction, there remains some unreported capacities but it is negligible (cf non discernable areas near 0 in the 2 graphs below).\n\n\nCode\ntemp &lt;- N_P_rhone_mediterranee %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    Pt_in = sum(Pt_in, na.rm=T)*365/10^6,\n    nb_WWTP = n()\n  )\ntemp2 &lt;- unreported_capacity %&gt;%\n  filter(is.na(capacity)) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    Pt_in = sum(Pt_in, na.rm=T)*365/10^6,\n    nb_WWTP = n()\n  )\n\nplot_grid(\n  ggplot(temp) +\n    geom_line(aes(Year, nb_WWTP)) +\n    geom_area(data = temp2, aes(Year, nb_WWTP)) +\n    labs(\n      x=\"\", y=\"\",\n      subtitle = \"nb of wastewater treatment plants\",\n      title = \"Stations not reporting their nominal capacity\",\n      caption = \"\\n\"\n    ),\n  ggplot(temp) +\n    geom_line(aes(Year, Pt_in)) +\n    geom_area(data = temp2, aes(Year, Pt_in)) +\n    labs(\n      x=\"\", y=\"kt per year\",\n      subtitle = \"in terms of incoming Pt flows\",\n      title = \"\",\n      caption = Source\n    ) +\n    ylim(0, 15)\n)\n\n\n\n\n\n\n\nWe compute yield and capacity categories\n\n\nCode\nN_P_rhone_mediterranee &lt;-\n  N_P_rhone_mediterranee %&gt;%\n  mutate(\n    #Computes yields (even though sometimes yield is already reported, but we compare the consistency)\n    Pt_yield = (1-Pt_out/Pt_in)*100, #to compare with reported P yield\n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    DBO5_yield =(1-DBO5_out/DBO5_in)*100, \n    DCO_yield =(1-DCO_out/DCO_in)*100,\n    MES_yield =(1-MES_out/MES_in)*100,\n    #nutrient ratios\n    N_P_ratio_in = NGL_in/Pt_in, \n    N_P_ratio_out = NGL_out/Pt_out,\n    DCO_DBO5_ratio_in = DCO_in/DBO5_in,\n    DCO_DBO5_ratio_out = DCO_out/DBO5_out,\n    DBO5_N_ratio_in = DBO5_in/NGL_in,\n    DBO5_N_ratio_out = DBO5_out/NGL_out,\n    DBO5_P_ratio_in = DBO5_in/Pt_in,\n    DBO5_P_ratio_out = DBO5_out/Pt_out\n  )\n\n\nWe create the capacity categories in terms of population equivalent.\n\n\nCode\n#function to create capacity categories\nf_PE_bin_categories &lt;- function(dataset){\n  #Creating size categories\n  dataset &lt;- \n    dataset %&gt;%\n    mutate(\n      PE_bin = case_when(\n        capacity &lt; 200 ~ \"0 - 200 PE\",\n        (capacity &gt;= 200) & (capacity &lt;2000) ~ \"200 - 2 000 PE\",\n        (capacity &gt;= 2000) & (capacity &lt;10000) ~ \"2 000 - 10 000 PE\",\n        (capacity &gt;= 10000) & (capacity &lt;100000) ~ \"10 000 - 100 000 PE\",\n        capacity &gt;= 100000 ~ \"&gt; 100 000 PE\",\n        T ~ \"unreported PE\"\n      )\n    )\n  \n  #reorders treatment by their share of total capacity\n  dataset$PE_bin &lt;- \n    factor(\n      dataset$PE_bin, \n      levels = \n        c(\"unreported PE\",\n          \"0 - 200 PE\", \n          \"200 - 2 000 PE\", \n          \"2 000 - 10 000 PE\",\n          \"10 000 - 100 000 PE\", \n          \"&gt; 100 000 PE\"\n          )\n        )\n  return(dataset)\n}\nN_P_rhone_mediterranee &lt;- f_PE_bin_categories(N_P_rhone_mediterranee)\n\n\nWe create the file with aggregated flows at the basin scale, and also by capacity categories.\n\n\nCode\nf_basin_flows &lt;- function(dataset){\n  basin &lt;- dataset %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      across(\n        c(\n          NGL_in, NTK_in, Pt_in, DBO5_in, DCO_in, MES_in,\n          NGL_out, NTK_out, Pt_out, DBO5_out, DCO_out, MES_out\n        ),\n        ~signif(sum(.x, na.rm = T)*365/10^6, digits=3)\n      ),\n    #nb of waste water treatment plant\n    nb_WWTP = n(),\n    #capacity converted in million Population Equivalent\n    capacity = signif(sum(capacity, na.rm = T)/10^6, digits=3),\n    )\n  return(basin)\n}\nbasin_N_P_rhone_mediterranee &lt;- f_basin_flows(N_P_rhone_mediterranee)\n\nf_basin_PE_flows &lt;- function(dataset){\n  basin &lt;- dataset %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      across(\n        c(\n          NGL_in, NTK_in, Pt_in, DBO5_in, DCO_in, MES_in,\n          NGL_out, NTK_out, Pt_out, DBO5_out, DCO_out, MES_out\n        ),\n        ~signif(sum(.x, na.rm = T)*365/10^6, digits=3)\n      ),\n    #nb of waste water treatment plant\n    nb_WWTP = n(),\n    #capacity converted in million Population Equivalent\n    capacity = signif(sum(capacity, na.rm = T)/10^6, digits=3),\n    )\n  return(basin)\n}\nbasin_PE_N_P_rhone_mediterranee &lt;- f_basin_PE_flows(N_P_rhone_mediterranee)\n\n\nWe compute the nutrient ratios at the basin scale, and also by capacity categories.\n\n\nCode\n#have to do this in case 1 nutrient is more reported than the other, which would create a bia if we took the ratio of the already aggregated flows\nf_nutrient_ratio_basin &lt;- function(basin, dataset, nutrient1, nutrient2){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrient1))==F & is.na(!!as.symbol(nutrient2))==F\n      ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      nutrient_1 = sum(!!as.symbol(nutrient1), na.rm=T),\n      nutrient_2 = sum(!!as.symbol(nutrient2), na.rm=T),\n      ratio = signif(nutrient_1/nutrient_2, digits=3)\n    ) %&gt;%\n    select(-nutrient_1, -nutrient_2)\n  basin &lt;- left_join(\n    basin, temp, by=\"Year\"\n  )\n  return(basin)\n}\n\nf_nutrient_ratio_basin_PE &lt;- function(basin_PE, dataset, nutrient1, nutrient2){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrient1))==F & is.na(!!as.symbol(nutrient2))==F\n      ) %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      nutrient_1 = sum(!!as.symbol(nutrient1), na.rm=T),\n      nutrient_2 = sum(!!as.symbol(nutrient2), na.rm=T),\n      ratio = signif(nutrient_1/nutrient_2, digits=3)\n    ) %&gt;%\n    select(-nutrient_1, -nutrient_2)\n  basin_PE &lt;- left_join(\n    basin_PE, temp, by=c(\"Year\", \"PE_bin\")\n  )\n  return(basin_PE)\n}\n\nf_all_nutrient_ratios_basin &lt;- function(basin, dataset){\n  basin &lt;- basin %&gt;%\n    \n    #nutrient ratios\n    #N_P in\n    f_nutrient_ratio_basin(dataset, \"NGL_in\", \"Pt_in\") %&gt;%\n    rename(N_P_ratio_in = ratio) %&gt;%\n    #N_P out\n    f_nutrient_ratio_basin(dataset, \"NGL_out\", \"Pt_out\") %&gt;%\n    rename(N_P_ratio_out = ratio) %&gt;%\n    #DCO_DBO5 in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"DBO5_in\") %&gt;%\n    rename(DCO_DBO5_ratio_in = ratio) %&gt;%\n    #DCO_DBO5 out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"DBO5_out\") %&gt;%\n    rename(DCO_DBO5_ratio_out = ratio) %&gt;%\n    #DBO5_N in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"NGL_in\") %&gt;%\n    rename(DBO5_N_ratio_in = ratio) %&gt;%\n    #DBO5_N out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"NGL_out\") %&gt;%\n    rename(DBO5_N_ratio_out = ratio) %&gt;%\n    #DBO5_P in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"Pt_in\") %&gt;%\n    rename(DBO5_P_ratio_in = ratio) %&gt;%\n    #DBO5_P out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"Pt_out\") %&gt;%\n    rename(DBO5_P_ratio_out = ratio) %&gt;%\n    #DCO_N in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"NGL_in\") %&gt;%\n    rename(DCO_N_ratio_in = ratio) %&gt;%\n    #DCO_N out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"NGL_out\") %&gt;%\n    rename(DCO_N_ratio_out = ratio) %&gt;%\n    #DCO_P in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"Pt_in\") %&gt;%\n    rename(DCO_P_ratio_in = ratio) %&gt;%\n    #DCO_P out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"Pt_out\") %&gt;%\n    rename(DCO_P_ratio_out = ratio) %&gt;%\n    \n    #capacity ratios\n    #Pt_PE_in\n    f_nutrient_ratio_basin(dataset, \"Pt_in\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_in = ratio) %&gt;%\n    #Pt_PE_out\n    f_nutrient_ratio_basin(dataset, \"Pt_out\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_out = ratio) %&gt;%\n    #NGL_PE_in\n    f_nutrient_ratio_basin(dataset, \"NGL_in\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_in = ratio) %&gt;%\n    #NGL_PE_out\n    f_nutrient_ratio_basin(dataset, \"NGL_out\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_out = ratio) %&gt;%\n    #DBO5_PE_in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_in = ratio) %&gt;%\n    #DBO5_PE_out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_out = ratio) %&gt;%\n    #DCO_PE_in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_in = ratio) %&gt;%\n    #DCO_PE_out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_out = ratio) %&gt;%\n    #MES_PE_in\n    f_nutrient_ratio_basin(dataset, \"MES_in\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_in = ratio) %&gt;%\n    #MES_PE_out\n    f_nutrient_ratio_basin(dataset, \"MES_out\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_out = ratio) %&gt;%\n    \n    #convert from kg per PE per day to g per PE per day\n    mutate(\n      across(\n        c(\n          Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, DBO5_PE_ratio_in, DBO5_PE_ratio_out,\n          DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n        ), ~.x*1000 \n      )\n    )\n  return(basin)\n}\n\nf_all_nutrient_ratios_basin_PE &lt;- function(basin_PE, dataset){\n  basin_PE &lt;- basin_PE %&gt;%\n    \n    #nutrient ratios\n    #N_P in\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_in\", \"Pt_in\") %&gt;%\n    rename(N_P_ratio_in = ratio) %&gt;%\n    #N_P out\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_out\", \"Pt_out\") %&gt;%\n    rename(N_P_ratio_out = ratio) %&gt;%\n    #DCO_DBO5 in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"DBO5_in\") %&gt;%\n    rename(DCO_DBO5_ratio_in = ratio) %&gt;%\n    #DCO_DBO5 out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"DBO5_out\") %&gt;%\n    rename(DCO_DBO5_ratio_out = ratio) %&gt;%\n    #DBO5_N in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"NGL_in\") %&gt;%\n    rename(DBO5_N_ratio_in = ratio) %&gt;%\n    #DBO5_N out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"NGL_out\") %&gt;%\n    rename(DBO5_N_ratio_out = ratio) %&gt;%\n    #DBO5_P in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"Pt_in\") %&gt;%\n    rename(DBO5_P_ratio_in = ratio) %&gt;%\n    #DBO5_P out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"Pt_out\") %&gt;%\n    rename(DBO5_P_ratio_out = ratio) %&gt;%\n    #DCO_N in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"NGL_in\") %&gt;%\n    rename(DCO_N_ratio_in = ratio) %&gt;%\n    #DCO_N out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"NGL_out\") %&gt;%\n    rename(DCO_N_ratio_out = ratio) %&gt;%\n    #DCO_P in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"Pt_in\") %&gt;%\n    rename(DCO_P_ratio_in = ratio) %&gt;%\n    #DCO_P out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"Pt_out\") %&gt;%\n    rename(DCO_P_ratio_out = ratio) %&gt;%\n    \n    #capacity ratios\n    #Pt_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"Pt_in\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_in = ratio) %&gt;%\n    #Pt_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"Pt_out\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_out = ratio) %&gt;%\n    #NGL_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_in\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_in = ratio) %&gt;%\n    #NGL_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_out\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_out = ratio) %&gt;%\n    #DBO5_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_in = ratio) %&gt;%\n    #DBO5_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_out = ratio) %&gt;%\n    #DCO_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_in = ratio) %&gt;%\n    #DCO_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_out = ratio) %&gt;%\n    #MES_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"MES_in\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_in = ratio) %&gt;%\n    #MES_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"MES_out\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_out = ratio) %&gt;%\n    \n    #convert from kg per PE per day to g per PE per day\n    mutate(\n      across(\n        c(\n          Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, DBO5_PE_ratio_in, DBO5_PE_ratio_out,\n          DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n        ), ~.x*1000 \n      )\n    )\n  return(basin_PE)\n}\n\nbasin_N_P_rhone_mediterranee &lt;- f_all_nutrient_ratios_basin(basin_N_P_rhone_mediterranee, N_P_rhone_mediterranee)\n\nbasin_PE_N_P_rhone_mediterranee &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_rhone_mediterranee, N_P_rhone_mediterranee)\n\n\nWe compute the yields at the basin scale, and also by capacity categories.\n\n\nCode\n#have to do this in case inflow or outflow is more reported than the other one, which would create a bias if we took the ratio of the already aggregated flows\nf_yield_basin &lt;- function(basin, dataset, nutrientIN, nutrientOUT){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrientIN))==F & is.na(!!as.symbol(nutrientOUT))==F\n      ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      nutrient_in = sum(!!as.symbol(nutrientIN), na.rm=T),\n      nutrient_out = sum(!!as.symbol(nutrientOUT), na.rm=T),\n      yield = round((1-nutrient_out/nutrient_in)*100, digits = 0)\n    ) %&gt;%\n    select(-nutrient_in, -nutrient_out)\n  basin &lt;- left_join(\n    basin, temp, by=\"Year\"\n  )\n  return(basin)\n}\n\nf_yield_basin_PE &lt;- function(basin_PE, dataset, nutrientIN, nutrientOUT){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrientIN))==F & is.na(!!as.symbol(nutrientOUT))==F\n      ) %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      nutrient_in = sum(!!as.symbol(nutrientIN), na.rm=T),\n      nutrient_out = sum(!!as.symbol(nutrientOUT), na.rm=T),\n      yield = round((1-nutrient_out/nutrient_in)*100, digits = 0)\n    ) %&gt;%\n    select(-nutrient_in, -nutrient_out)\n  basin_PE &lt;- left_join(\n    basin_PE, temp, by=c(\"Year\", \"PE_bin\")\n  )\n  return(basin_PE)\n}\n\nf_all_yields_basin &lt;- function(basin, dataset){\n  basin &lt;- basin %&gt;%\n    #NGL yield\n    f_yield_basin(dataset, \"NGL_in\", \"NGL_out\") %&gt;%\n    rename(NGL_yield = yield) %&gt;%\n    #Pt yield\n    f_yield_basin(dataset, \"Pt_in\", \"Pt_out\") %&gt;%\n    rename(Pt_yield = yield) %&gt;%\n    #DBO5 yield\n    f_yield_basin(dataset, \"DBO5_in\", \"DBO5_out\") %&gt;%\n    rename(DBO5_yield = yield) %&gt;%\n    #DCO yield\n    f_yield_basin(dataset, \"DCO_in\", \"DCO_out\") %&gt;%\n    rename(DCO_yield = yield) %&gt;%\n    #MES yield\n    f_yield_basin(dataset, \"MES_in\", \"MES_out\") %&gt;%\n    rename(MES_yield = yield) \n  return(basin)\n}\n\nf_all_yields_basin_PE &lt;- function(basin_PE, dataset){\n  basin_PE &lt;- basin_PE %&gt;%\n    #NGL yield\n    f_yield_basin_PE(dataset, \"NGL_in\", \"NGL_out\") %&gt;%\n    rename(NGL_yield = yield) %&gt;%\n    #Pt yield\n    f_yield_basin_PE(dataset, \"Pt_in\", \"Pt_out\") %&gt;%\n    rename(Pt_yield = yield) %&gt;%\n    #DBO5 yield\n    f_yield_basin_PE(dataset, \"DBO5_in\", \"DBO5_out\") %&gt;%\n    rename(DBO5_yield = yield) %&gt;%\n    #DCO yield\n    f_yield_basin_PE(dataset, \"DCO_in\", \"DCO_out\") %&gt;%\n    rename(DCO_yield = yield) %&gt;%\n    #MES yield\n    f_yield_basin_PE(dataset, \"MES_in\", \"MES_out\") %&gt;%\n    rename(MES_yield = yield) \n  return(basin_PE)\n}\n\nbasin_N_P_rhone_mediterranee &lt;- f_all_yields_basin(basin_N_P_rhone_mediterranee, N_P_rhone_mediterranee)\n\nbasin_PE_N_P_rhone_mediterranee &lt;- f_all_yields_basin_PE(basin_PE_N_P_rhone_mediterranee, N_P_rhone_mediterranee)\n\n\nWe create the years categories (every 5 years).\n\n\nCode\n#function to create years categories\nf_year_categories &lt;- function(dataset){\n  dataset &lt;- dataset %&gt;%\n    mutate(\n      Year_category = case_when(\n        Year %in% c(1991, 1992, 1993, 1994, 1995) ~ \"1991-1995\",\n        Year %in% c(1996, 1997, 1998, 1999, 2000) ~ \"1996-2000\",\n        Year %in% c(2001, 2002, 2003, 2004, 2005) ~ \"2001-2005\",\n        Year %in% c(2006, 2007, 2008, 2009, 2010) ~ \"2006-2010\",\n        Year %in% c(2011, 2012, 2013, 2014, 2015) ~ \"2011-2015\",\n        Year %in% c(2016, 2017, 2018, 2019, 2020) ~ \"2016-2020\",\n      )\n    )\n  return(dataset)\n}\nN_P_rhone_mediterranee &lt;- f_year_categories(N_P_rhone_mediterranee)\nbasin_N_P_rhone_mediterranee &lt;- f_year_categories(basin_N_P_rhone_mediterranee)\nbasin_PE_N_P_rhone_mediterranee &lt;- f_year_categories(basin_PE_N_P_rhone_mediterranee)\n\n\n\n\nCode\nrm(\n  file_WWTP_1999_2007, file_WWTP_2008_2013, file_WWTP_2014_2020,\n  file_1999_2007, file_2008_2020,\n  WWTP_1999_2007, WWTP_2008_2013, WWTP_2014_2020,\n  N_P_rhone_mediterranee_1999_2007, N_P_rhone_mediterranee_2008_2020,\n  doublons_N_P, doublons_WWTP, doublons_1999_2007, double_reporting_WWTP,\n  unreported_capacity,\n  sanitation_portal_capacity\n)\n\n\n\n\n\n\n\nData cleaning\n\nOutliers : first visualization\n\n\n\n\nCode\nf_graph_nutrient &lt;- function(dataset, nutrient_in, nutrient_out, label, legend_x, legend_y){\n  p &lt;- ggplot(dataset) + \n    #nutrient inflow\n    geom_line(\n      aes(\n        Year, \n        !!as.symbol(nutrient_in), \n        color=nutrient_in\n        )\n      ) + \n    #nutrient outflow\n    geom_line(\n      aes(\n        Year,\n        !!as.symbol(nutrient_out), \n        color = nutrient_out\n        )\n      ) +\n    ylim(0, NA) +\n    theme(\n      legend.position = c(legend_x, legend_y), \n      legend.title = element_blank()\n      ) +\n    labs(\n      x=\"\", y=paste(\"kt of\", label) , \n      title = paste(\"Reported\", label, \"flows in Rhône-Méditerranée WWTPs\") ,\n      subtitle = \"reported, not necessarily actual ; here before data cleaning\", \n      caption = Source\n      )\n  return(p)\n}\n##if want to try interactive plot :\n# library(plotly)\n# ggplotly(p, tooltip = c(\"y\", \"x\"))\n\n\nWe correct 1 large outliers to be able to visualize the flows : incoming NGL and NTK in2018 for STATION D’EPURATION DE NARBONNE - VILLE (code SANDRE 060911262001): error of 4 ODM\n\n\nCode\nN_P_rhone_mediterranee$NGL_in[N_P_rhone_mediterranee$code_WWTP == \"060911262001\" & N_P_rhone_mediterranee$Year == 2018] &lt;- \n  N_P_rhone_mediterranee$NGL_in[N_P_rhone_mediterranee$code_WWTP == \"060911262001\" & N_P_rhone_mediterranee$Year == 2018]/10^4\n\nN_P_rhone_mediterranee$NTK_in[N_P_rhone_mediterranee$code_WWTP == \"060911262001\" & N_P_rhone_mediterranee$Year == 2018] &lt;- \n  N_P_rhone_mediterranee$NTK_in[N_P_rhone_mediterranee$code_WWTP == \"060911262001\" & N_P_rhone_mediterranee$Year == 2018]/10^4\n\n\nWe recompute the basin flows after this correction.\n\n\nCode\nN_P_rhone_mediterranee &lt;-\n  N_P_rhone_mediterranee %&gt;%\n  mutate(\n    #Computes yields (even though sometimes yield is already reported, but we compare the consistency)\n    Pt_yield = (1-Pt_out/Pt_in)*100, #to compare with reported P yield\n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    DBO5_yield =(1-DBO5_out/DBO5_in)*100, \n    DCO_yield =(1-DCO_out/DCO_in)*100,\n    MES_yield =(1-MES_out/MES_in)*100,\n    #nutrient ratios\n    N_P_ratio_in = NGL_in/Pt_in, \n    N_P_ratio_out = NGL_out/Pt_out,\n    DCO_DBO5_ratio_in = DCO_in/DBO5_in,\n    DCO_DBO5_ratio_out = DCO_out/DBO5_out,\n    DBO5_N_ratio_in = DBO5_in/NGL_in,\n    DBO5_N_ratio_out = DBO5_out/NGL_out,\n    DBO5_P_ratio_in = DBO5_in/Pt_in,\n    DBO5_P_ratio_out = DBO5_out/Pt_out\n  )\n\n#recompute basin values (flows, yields, ratios..)\nbasin_N_P_rhone_mediterranee &lt;- f_basin_flows(N_P_rhone_mediterranee)\nbasin_N_P_rhone_mediterranee &lt;- f_all_nutrient_ratios_basin(basin_N_P_rhone_mediterranee, N_P_rhone_mediterranee)\nbasin_N_P_rhone_mediterranee &lt;- f_all_yields_basin(basin_N_P_rhone_mediterranee, N_P_rhone_mediterranee)\nbasin_N_P_rhone_mediterranee &lt;- f_year_categories(basin_N_P_rhone_mediterranee)\n\n#recompute basin x PE values (flows, yields, ratios..)\nbasin_PE_N_P_rhone_mediterranee &lt;- f_basin_PE_flows(N_P_rhone_mediterranee)\nbasin_PE_N_P_rhone_mediterranee &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_rhone_mediterranee, N_P_rhone_mediterranee)\nbasin_PE_N_P_rhone_mediterranee &lt;- f_all_yields_basin_PE(basin_PE_N_P_rhone_mediterranee, N_P_rhone_mediterranee)\nbasin_PE_N_P_rhone_mediterranee &lt;- f_year_categories(basin_PE_N_P_rhone_mediterranee)\n\n\n#we introduce empty values for unreported flows\n#flows basin\nbasin_N_P_rhone_mediterranee$NGL_out[basin_N_P_rhone_mediterranee$Year &lt; 2009] &lt;- NA\nbasin_N_P_rhone_mediterranee$NTK_out[basin_N_P_rhone_mediterranee$Year &gt; 2007] &lt;- NA\nbasin_N_P_rhone_mediterranee$DCO_in[basin_N_P_rhone_mediterranee$Year &lt; 2009] &lt;- NA\nbasin_N_P_rhone_mediterranee$DCO_out[basin_N_P_rhone_mediterranee$Year &lt; 2009] &lt;- NA\n#flows basin x PE\nbasin_PE_N_P_rhone_mediterranee$NGL_out[basin_PE_N_P_rhone_mediterranee$Year &lt; 2009] &lt;- NA\nbasin_PE_N_P_rhone_mediterranee$NTK_out[basin_PE_N_P_rhone_mediterranee$Year &gt; 2007] &lt;- NA\nbasin_PE_N_P_rhone_mediterranee$DCO_in[basin_PE_N_P_rhone_mediterranee$Year &lt; 2009] &lt;- NA\nbasin_PE_N_P_rhone_mediterranee$DCO_out[basin_PE_N_P_rhone_mediterranee$Year &lt; 2009] &lt;- NA\n\n\nIt also appears that in 2014, all flows of the Pia sation (code SANDRE 060966141002) are overestimated by a 3 OM.\n\nNGLNTKPtDBO5DCOMESOutliers correction\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhone_mediterranee, \"NGL_in\", \"NGL_out\", \"NGL\", 0.7, 0.5) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhone_mediterranee, \"NTK_in\", \"NTK_out\", \"NTK\", 0.7, 0.5) \n\n\n\n\n\n\n\noutliers :\n\nPt in - 2019, STATION D’EPURATION DE BESSEGES, code SANDRE 060930037002 - 2010, STATION D’EPURATION DE ALES, code SANDRE 060930259003 - 2019, STATION D’EPURATION DE ST AMBROIX - MAS CHABERT, code SANDRE 060930227002 - 2006, DIJON (EAUVITALE), code SANDRE 060921231001\nPt_out - 2019, STATION D’EPURATION DE ST AMBROIX - MAS CHABERT, code SANDRE 060930227002 - 2019, STATION D’EPURATION DE BESSEGES, code SANDRE 060930037002 - 2014, STATION D’EPURATION DE SCIENTRIER, code SANDRE 060974220001\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhone_mediterranee, \"Pt_in\", \"Pt_out\", \"Pt\", 0.4, 0.5) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhone_mediterranee, \"DBO5_in\", \"DBO5_out\", \"DBO5\", 0.4, 0.5)  \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhone_mediterranee, \"DCO_in\", \"DCO_out\", \"DCO\", 0.4, 0.5)  \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhone_mediterranee, \"MES_in\", \"MES_out\", \"MES\", 0.4, 0.5)\n\n\n\n\n\n\n\nFor Pia in 2014, we correct all flows by 3 ODM\n\n\nCode\n#Pia 2014, all flows\n#MES_in\nN_P_rhone_mediterranee$MES_in[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014] &lt;- \n  N_P_rhone_mediterranee$MES_in[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014]/10^3\n#MES_out\nN_P_rhone_mediterranee$MES_out[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014] &lt;- \n  N_P_rhone_mediterranee$MES_out[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014]/10^3\n#Pt_in\nN_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014] &lt;- \n  N_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014]/10^3\n#Pt_out\nN_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014] &lt;- \n  N_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014]/10^3\n#NTK_in\nN_P_rhone_mediterranee$NTK_in[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014] &lt;- \n  N_P_rhone_mediterranee$NTK_in[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014]/10^3\n#NGL_in\nN_P_rhone_mediterranee$NGL_in[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014] &lt;- \n  N_P_rhone_mediterranee$NGL_in[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014]/10^3\n#NGL_out\nN_P_rhone_mediterranee$NGL_out[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014] &lt;- \n  N_P_rhone_mediterranee$NGL_out[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014]/10^3\n#DBO5_in\nN_P_rhone_mediterranee$DBO5_in[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014] &lt;- \n  N_P_rhone_mediterranee$DBO5_in[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014]/10^3\n#DBO5_out\nN_P_rhone_mediterranee$DBO5_out[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014] &lt;- \n  N_P_rhone_mediterranee$DBO5_out[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014]/10^3\n#DCO_in\nN_P_rhone_mediterranee$DCO_in[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014] &lt;- \n  N_P_rhone_mediterranee$DCO_in[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014]/10^3\n#DCO_out\nN_P_rhone_mediterranee$DCO_out[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014] &lt;- \n  N_P_rhone_mediterranee$DCO_out[N_P_rhone_mediterranee$code_WWTP == \"060966141002\" & N_P_rhone_mediterranee$Year == 2014]/10^3\n\n\nThe remaining errors are mainly for Pt\n\nPt in - 2019 and 2020, STATION D’EPURATION DE BESSEGES, code SANDRE 060930037002, 3 OM - 2010 and 2009, STATION D’EPURATION DE ALES, code SANDRE 060930259003, inconsistent = &gt;removed - 2019, STATION D’EPURATION DE ST AMBROIX - MAS CHABERT, code SANDRE 060930227002 , 3 OM - 2006, DIJON (EAUVITALE), code SANDRE 060921231001, 1 OM\nPt_out - 2019, STATION D’EPURATION DE ST AMBROIX - MAS CHABERT, code SANDRE 060930227002, 3 OM - 2019 and 2020, STATION D’EPURATION DE BESSEGES, code SANDRE 060930037002, 3 OM - 2013 and 2014, STATION D’EPURATION DE SCIENTRIER, code SANDRE 060974220001, 1 and 2 OM\n\n\n\nCode\n#Pt in\n#Besseges\nN_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$code_WWTP == \"060930037002\" & N_P_rhone_mediterranee$Year == 2019] &lt;- \n  N_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$code_WWTP == \"060930037002\" & N_P_rhone_mediterranee$Year == 2019]/10^3\nN_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$code_WWTP == \"060930037002\" & N_P_rhone_mediterranee$Year == 2020] &lt;- \n  N_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$code_WWTP == \"060930037002\" & N_P_rhone_mediterranee$Year == 2020]/10^3\n#Ales\nN_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$code_WWTP == \"060930259003\" & N_P_rhone_mediterranee$Year == 2009] &lt;- NA\nN_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$code_WWTP == \"060930259003\" & N_P_rhone_mediterranee$Year == 2010] &lt;- NA\n#St ambroix\nN_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$code_WWTP == \"060930227002\" & N_P_rhone_mediterranee$Year == 2019] &lt;- \n  N_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$code_WWTP == \"060930227002\" & N_P_rhone_mediterranee$Year == 2019]/10^3\n#Dijon\nN_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$code_WWTP == \"060921231001\" & N_P_rhone_mediterranee$Year == 2006] &lt;- \n  N_P_rhone_mediterranee$Pt_in[N_P_rhone_mediterranee$code_WWTP == \"060921231001\" & N_P_rhone_mediterranee$Year == 2006]/10\n\n#Pt out\n#Saint Ambroix\nN_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$code_WWTP == \"060930227002\" & N_P_rhone_mediterranee$Year == 2019] &lt;- \n  N_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$code_WWTP == \"060930227002\" & N_P_rhone_mediterranee$Year == 2019]/10^3\n#Besseges\nN_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$code_WWTP == \"060930037002\" & N_P_rhone_mediterranee$Year == 2019] &lt;- \n  N_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$code_WWTP == \"060930037002\" & N_P_rhone_mediterranee$Year == 2019]/10^3\nN_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$code_WWTP == \"060930037002\" & N_P_rhone_mediterranee$Year == 2020] &lt;- \n  N_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$code_WWTP == \"060930037002\" & N_P_rhone_mediterranee$Year == 2020]/10^3\n#Scientrier\nN_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$code_WWTP == \"060974220001\" & N_P_rhone_mediterranee$Year == 2013] &lt;- \n  N_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$code_WWTP == \"060974220001\" & N_P_rhone_mediterranee$Year == 2013]/10\nN_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$code_WWTP == \"060974220001\" & N_P_rhone_mediterranee$Year == 2014] &lt;- \n  N_P_rhone_mediterranee$Pt_out[N_P_rhone_mediterranee$code_WWTP == \"060974220001\" & N_P_rhone_mediterranee$Year == 2014]/10^2\n\n\nWe recompute the values after the outliers corrections.\n\n\nCode\nN_P_rhone_mediterranee &lt;-\n  N_P_rhone_mediterranee %&gt;%\n  mutate(\n    #Computes yields (even though sometimes yield is already reported, but we compare the consistency)\n    Pt_yield = (1-Pt_out/Pt_in)*100, #to compare with reported P yield\n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    DBO5_yield =(1-DBO5_out/DBO5_in)*100, \n    DCO_yield =(1-DCO_out/DCO_in)*100,\n    MES_yield =(1-MES_out/MES_in)*100,\n    #nutrient ratios\n    N_P_ratio_in = NGL_in/Pt_in, \n    N_P_ratio_out = NGL_out/Pt_out,\n    DCO_DBO5_ratio_in = DCO_in/DBO5_in,\n    DCO_DBO5_ratio_out = DCO_out/DBO5_out,\n    DBO5_N_ratio_in = DBO5_in/NGL_in,\n    DBO5_N_ratio_out = DBO5_out/NGL_out,\n    DBO5_P_ratio_in = DBO5_in/Pt_in,\n    DBO5_P_ratio_out = DBO5_out/Pt_out\n  )\n\n#recompute basin values (flows, yields, ratios..)\nbasin_N_P_rhone_mediterranee &lt;- f_basin_flows(N_P_rhone_mediterranee)\nbasin_N_P_rhone_mediterranee &lt;- f_all_nutrient_ratios_basin(basin_N_P_rhone_mediterranee, N_P_rhone_mediterranee)\nbasin_N_P_rhone_mediterranee &lt;- f_all_yields_basin(basin_N_P_rhone_mediterranee, N_P_rhone_mediterranee)\nbasin_N_P_rhone_mediterranee &lt;- f_year_categories(basin_N_P_rhone_mediterranee)\n\n#recompute basin x PE values (flows, yields, ratios..)\nbasin_PE_N_P_rhone_mediterranee &lt;- f_basin_PE_flows(N_P_rhone_mediterranee)\nbasin_PE_N_P_rhone_mediterranee &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_rhone_mediterranee, N_P_rhone_mediterranee)\nbasin_PE_N_P_rhone_mediterranee &lt;- f_all_yields_basin_PE(basin_PE_N_P_rhone_mediterranee, N_P_rhone_mediterranee)\nbasin_PE_N_P_rhone_mediterranee &lt;- f_year_categories(basin_PE_N_P_rhone_mediterranee)\n\n\n#we introduce empty values for unreported flows\n#flows basin\nbasin_N_P_rhone_mediterranee$NGL_out[basin_N_P_rhone_mediterranee$Year &lt; 2009] &lt;- NA\nbasin_N_P_rhone_mediterranee$NTK_out[basin_N_P_rhone_mediterranee$Year &gt; 2007] &lt;- NA\nbasin_N_P_rhone_mediterranee$DCO_in[basin_N_P_rhone_mediterranee$Year &lt; 2009] &lt;- NA\nbasin_N_P_rhone_mediterranee$DCO_out[basin_N_P_rhone_mediterranee$Year &lt; 2009] &lt;- NA\n#flows basin x PE\nbasin_PE_N_P_rhone_mediterranee$NGL_out[basin_PE_N_P_rhone_mediterranee$Year &lt; 2009] &lt;- NA\nbasin_PE_N_P_rhone_mediterranee$NTK_out[basin_PE_N_P_rhone_mediterranee$Year &gt; 2007] &lt;- NA\nbasin_PE_N_P_rhone_mediterranee$DCO_in[basin_PE_N_P_rhone_mediterranee$Year &lt; 2009] &lt;- NA\nbasin_PE_N_P_rhone_mediterranee$DCO_out[basin_PE_N_P_rhone_mediterranee$Year &lt; 2009] &lt;- NA\n\n\n\n\n\n\n\n\n\n\nCapacities distribution\n\nReporting EvolutionLarge categoriesHistogramCumulative distribution\n\n\n\n\nCode\ntemp &lt;- N_P_rhone_mediterranee %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    capacity = sum(capacity, na.rm = T)/10^6, #capacity in million PE\n    nb_WWTP = n()\n  )\n\n\n\n\nCode\ncoef &lt;- max(temp$capacity)/max(temp$nb_WWTP)\nggplot(temp) +\n  geom_line(\n    aes(\n      Year, nb_WWTP, \n      color = \"number of reported facilities (left)\"\n      )\n    ) + \n  geom_line(\n    aes(\n      Year, capacity/coef, \n      color = \"total reported capacity (right)\"\n      )\n    ) + \n  scale_y_continuous(\n    limits = c(0, NA),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, \n        name=\"million Population Equivalent\"\n        )\n    ) +\n  labs(\n    title = \"Evolution of the reporting in the database\",\n    subtitle = \"in terms of number of WWTP reported and total reported capacity\",\n    y=\"\", x=\"\", \n    color=\"\", caption =Source\n  ) +\n  theme(\n    legend.position = c(0.7, 0.3)\n  )\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_rhone_mediterranee %&gt;%\n  filter(is.na(capacity)==F) %&gt;%\n  select(Year, capacity, PE_bin) %&gt;%\n  group_by(Year, PE_bin) %&gt;%\n  summarise(\n    `capacity (million PE)` = sum(capacity)/10^6,\n    `number of stations` = n()\n  ) %&gt;% \n  gather(key=capacity_or_n, value = value, `capacity (million PE)`, `number of stations`)\n\n\n\nAbsoluteRelative\n\n\n\n\nCode\nggplot(temp) + \n  geom_area(aes(Year, value, fill=PE_bin)) + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"For each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) + \n  geom_area(aes(Year, value, fill=PE_bin), position = \"fill\") + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"Proportion of each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_rhone_mediterranee %&gt;% filter(Year==Year_analysis)\nggplot(temp) + \n  geom_histogram(\n    aes(\n      capacity, \n      fill = \"Nb of facilities\"\n      ), \n    n=100, alpha=.4, stat=\"density\"\n    ) +\n  geom_histogram(\n    aes(\n      capacity, weight = capacity, \n      fill=\"Nb of facilities weighted by capacity\"\n      ), \n    n=100, alpha=.4, stat=\"density\"\n    ) +\n  theme(\n    legend.position = c(0.7,0.8),\n  ) +\n  labs(\n    x=\"Waste Water Treatment Plant Capacity \\n(Population Equivalent)\",\n    y=\"Distribution density\",\n    fill=\"Distribution of\",\n    title = paste(\"WWTP capacities distribution\", as.character(Year_analysis)),\n    subtitle = \"raw of weighted by capacity\"\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    )\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_rhone_mediterranee %&gt;% \n  ungroup() %&gt;%\n  filter(Year==Year_analysis) %&gt;% \n  select(code_WWTP, name_WWTP, capacity) %&gt;%\n  filter(is.na(capacity) == F) %&gt;%\n  arrange(desc(capacity)) %&gt;%\n  mutate( \n    cumulative_capacity = cumsum(capacity)/10^6,\n    rank_STEU = rank(-capacity, ties.method = \"first\"),\n    percent_cumulative_capacity = round(cumulative_capacity/sum(capacity/10^6)*100, digits = 1),\n    percent_rank = round(rank_STEU/n()*100, digits = 1)\n    ) \n\nf_save_csv_files(\n  temp %&gt;% mutate(basin = \"Rhône-Méditerranée\"), \n  \"output_data/zipf_law/\",\n  \"zipf_law_06_rhone_mediterranee.csv\"\n)\n\ncoef &lt;- max(temp$rank_STEU)/100\ncoef2 &lt;- max(temp$cumulative_capacity)/100\n\n\n\nNb of WWTPs vs Capacity (linear scale)Nb of WWTPs vs Capacity (log scale)Zipf law\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(\n      x = percent_rank, y = percent_cumulative_capacity\n      )\n    ) + \n  labs(\n    title = paste(\"Cumulative distribution,\", Year_analysis),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) +\n  scale_x_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions PE)\"\n        )\n    ) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(\n      x = percent_rank, y = percent_cumulative_capacity\n      )\n    ) + \n  labs(\n    title = paste(\"Cumulative distribution,\", Year_analysis),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, \n        name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions Population Equivalent)\"\n        )\n    ) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_point(\n    aes(\n      x = rank_STEU, y = capacity\n      )\n    ) + \n  labs(\n    title = paste(\"WWTP capacity vs rank, 2014,\", Year_analysis),\n    subtitle = \"looking for a Zipf law\",\n    x=\"Waste Water Treatment Plant \\n(ranked by capacity)\",\n    y=\" Waste Water Treatment Plant capacity\\n(Population Equivalent)\"\n    ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    ) + \n  scale_y_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\nPollution flows\n\nData Quality : reporting ratesBasin scaleReal flow extrapolation\n\n\n\n\nCode\n#function for plots : to be finished\nf_graph_reporting_nutrients &lt;- function(pollution_in, pollution_out){\n  temp &lt;- N_P_rhone_mediterranee %&gt;%\n    select(\n      Year, capacity, \n      !!as.symbol(pollution_in), !!as.symbol(pollution_out)\n      ) %&gt;%\n    mutate(\n      nutrient_in = is.na(!!as.symbol(pollution_in))==F,\n      nutrient_out = is.na(!!as.symbol(pollution_out))==F\n      ) %&gt;%\n    gather(\n      key=in_out_flow, \n      value = `reported pollution`, \n      nutrient_in, nutrient_out\n      ) %&gt;%\n    group_by(\n      Year, in_out_flow, `reported pollution`\n      ) %&gt;%\n    summarise(\n      `number of WWTP`=n(), \n      `capacity (million PE)` = sum(capacity, na.rm=T)/10^6\n      ) %&gt;%\n    gather(\n      key=n_or_capacity, \n      value = value, \n      `number of WWTP`, `capacity (million PE)`\n      ) %&gt;%\n    #renaming labels\n    mutate(\n      in_out_flow = case_when(\n        in_out_flow == \"nutrient_in\" ~ pollution_in,\n        in_out_flow == \"nutrient_out\" ~ pollution_out,\n      )\n    )\n\n  g &lt;- ggplot(temp) +\n    geom_area(aes(Year, value, fill=`reported pollution`)) +\n    facet_grid(\n      n_or_capacity~in_out_flow, \n      scales=\"free_y\", switch = \"y\") +\n    labs(\n      y=\"\", x=\"\",\n      title = \"Reporting of nutrient inflows (left) and outflows (right)\",\n      subtitle = \"In terms of total capacity (top) and nb of WWTP (bottom)\",\n      caption = Source\n      ) \n\n  return(g)\n}\n\n\n\nNGLNTKPtDBO5DCOMES\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NGL_in\", \"NGL_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NTK_in\", \"NTK_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"Pt_in\", \"Pt_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"DBO5_in\", \"DBO5_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"DCO_in\", \"DCO_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"MES_in\", \"MES_out\")\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#changing the graph function to change the subtitle (before data cleaning =&gt; after data cleaning)\nf_graph_nutrient &lt;- function(dataset, nutrient_in, nutrient_out, label, legend_x, legend_y){\n  p &lt;- ggplot(dataset) + \n    #nutrient inflow\n    geom_line(\n      aes(\n        Year, \n        !!as.symbol(nutrient_in), \n        color=nutrient_in\n        )\n      ) + \n    #nutrient outflow\n    geom_line(\n      aes(\n        Year,\n        !!as.symbol(nutrient_out), \n        color = nutrient_out\n        )\n      ) +\n    ylim(0, NA) +\n    theme(\n      legend.position = c(legend_x, legend_y), \n      legend.title = element_blank()\n      ) +\n    labs(\n      x=\"\", y=paste(\"kt of\", label) , \n      title = paste(\"Reported\", label, \"flows in Rhône-Méditerranée WWTPs\") ,\n      subtitle = \"reported, not necessarily actual ; here after data cleaning\", \n      caption = Source\n      ) \n  return(p)\n}\n\n\n\nNGLNTKPtDBO5DCOMES\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhone_mediterranee, \"NGL_in\", \"NGL_out\", \"NGL\", 0.7, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhone_mediterranee, \"NTK_in\", \"NTK_out\", \"NTK\", 0.7, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhone_mediterranee, \"Pt_in\", \"Pt_out\", \"Pt\", 0.4, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhone_mediterranee, \"DBO5_in\", \"DBO5_out\", \"DBO5\", 0.4, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhone_mediterranee, \"DCO_in\", \"DCO_out\", \"DCO\", 0.4, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhone_mediterranee, \"MES_in\", \"MES_out\", \"MES\", 0.4, 0.5)\n\n\n\n\n\n\n\n\n\n\n\nCoefficient calculationPtNGLDBO5DCOMES\n\n\nWe compute in terms of installed capacity the reported and unreported flows for NGL, Pt, DBO5, DCO and MES. We do this for each year and for each capacity category.\n\n\nCode\n#create file of reported \ntemp &lt;- N_P_rhone_mediterranee %&gt;%\n  select(\n    Year, PE_bin, capacity, \n    Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    ) %&gt;%\n  #spots unreported values for each nutrient flow\n  mutate(\n    across(\n      c(Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out),\n      ~ is.na(.x)==F\n      )\n    ) %&gt;%\n  #gather to ba able to then group by flow and count capacity\n  gather(\n    key=nutrient_flow, \n    value = reported_pollution, \n    Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    )  %&gt;%\n  #count reported capacity and unreported capacity for each (Year, capacity category, nutrient flow)\n  group_by(\n    Year, PE_bin, nutrient_flow, reported_pollution\n    ) %&gt;%\n  summarise(\n    capacity = sum(capacity, na.rm=T)/10^6\n    ) %&gt;%\n  #creates reported/unreported names for each nutrient flow and spreads into columns\n  mutate(\n    nutrient_flow = case_when(\n      reported_pollution == T ~ paste0(nutrient_flow, \"_reported\"),\n      reported_pollution == F ~ paste0(nutrient_flow, \"_unreported\")\n    )\n  ) %&gt;%\n  select(-reported_pollution) %&gt;%\n  spread(nutrient_flow, capacity)\n\n# NA values replaced by 0 for future coeff computation\ntemp[is.na(temp)] &lt;- 0\n\n\nFrom this we compute proportionate coefficient to extrapolate real flows.\n\n\nCode\ntemp &lt;- temp %&gt;%\n  mutate(\n    #Pt\n    Pt_in_coeff = (Pt_in_reported + Pt_in_unreported)/Pt_in_reported,\n    Pt_out_coeff = (Pt_out_reported + Pt_out_unreported)/Pt_out_reported,\n    #NGL\n    NGL_in_coeff = (NGL_in_reported + NGL_in_unreported)/NGL_in_reported,\n    NGL_out_coeff = (NGL_out_reported + NGL_out_unreported)/NGL_out_reported,\n    #DBO5\n    DBO5_in_coeff = (DBO5_in_reported + DBO5_in_unreported)/DBO5_in_reported,\n    DBO5_out_coeff = (DBO5_out_reported + DBO5_out_unreported)/DBO5_out_reported,\n    #DCO\n    DCO_in_coeff = (DCO_in_reported + DCO_in_unreported)/DCO_in_reported,\n    DCO_out_coeff = (DCO_out_reported + DCO_out_unreported)/DCO_out_reported,\n    #MES\n    MES_in_coeff = (MES_in_reported + MES_in_unreported)/MES_in_reported,\n    MES_out_coeff = (MES_out_reported + MES_out_unreported)/MES_out_reported,\n  ) %&gt;%\n  select(\n    -c(\n      Pt_in_reported, Pt_in_unreported,\n      Pt_out_reported, Pt_out_unreported,\n      NGL_in_reported, NGL_in_unreported,\n      NGL_out_reported, NGL_out_unreported,\n      DBO5_in_reported, DBO5_in_unreported,\n      DBO5_out_reported, DBO5_out_unreported,\n      DCO_in_reported, DCO_in_unreported, \n      DCO_out_reported, DCO_out_unreported, \n      MES_in_reported, MES_in_unreported, \n      MES_out_reported, MES_out_unreported\n      )\n    )\n\n#replace Inf values by 1 (when divided by 0)\ntemp[temp == Inf] &lt;- 1\n#replace NAN values by 1 (case of the unerported capacities)\ntemp[is.na(temp)] &lt;- 1\n\n\nWith these coefficients we compute the adjusted flows\n\n\nCode\n#file with reported flows and adjustment coefficient\ntemp2 &lt;- left_join(\n  basin_PE_N_P_rhone_mediterranee %&gt;%\n    #selects only flows and not yields or ratios\n    select(\n      Year, PE_bin, \n      Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    ),\n  temp, by=c(\"Year\", \"PE_bin\")\n)\n\n#computes adjusted flows\ntemp2 &lt;- temp2 %&gt;%\n  mutate(\n    #Pt\n    Pt_in_adj = round(Pt_in_coeff*Pt_in, 5),\n    Pt_out_adj = round(Pt_out_coeff*Pt_out, 5),\n    #NGL\n    NGL_in_adj = round(NGL_in_coeff*NGL_in, 5),\n    NGL_out_adj = round(NGL_out_coeff*NGL_out, 5),\n    #DBO5\n    DBO5_in_adj = round(DBO5_in_coeff*DBO5_in, 5),\n    DBO5_out_adj = round(DBO5_out_coeff*DBO5_out, 5),\n    #DCO\n    DCO_in_adj = round(DCO_in_coeff*DCO_in, 5),\n    DCO_out_adj = round(DCO_out_coeff*DCO_out, 5),\n    #MES\n    MES_in_adj = round(MES_in_coeff*MES_in, 5),\n    MES_out_adj = round(MES_out_coeff*MES_out, 5)\n  ) %&gt;%\n  #we remove coefficients and unajusted flows\n  select(\n    -c(\n      Pt_in, Pt_in_coeff, Pt_out, Pt_out_coeff,\n      NGL_in, NGL_in_coeff, NGL_out, NGL_out_coeff,\n      DBO5_in, DBO5_in_coeff, DBO5_out, DBO5_out_coeff,\n      DCO_in, DCO_in_coeff, DCO_out, DCO_out_coeff, \n      MES_in, MES_in_coeff, MES_out, MES_out_coeff\n    )\n  )\n\n\nWe add these adjusted flows to the main files reporting flows at the basin scale\n\n\nCode\n#adding adjusted flows to the basin x capacity files\nbasin_PE_N_P_rhone_mediterranee &lt;- left_join(\n  basin_PE_N_P_rhone_mediterranee, temp2, by=c(\"Year\", \"PE_bin\")\n)\n\n#aggregating adjusted flows at the basin scale without the capacity categories\ntemp &lt;- temp2 %&gt;%\n  select(-PE_bin) %&gt;%\n  group_by(Year) %&gt;%\n  summarise_all(~signif(sum(.x), 3))\n\n#adding adjusted flows to the basin files\nbasin_N_P_rhone_mediterranee &lt;- left_join(\n  basin_N_P_rhone_mediterranee, temp, by=\"Year\"\n)\n\n\nWe plot the comparison reported / adjusted in the following graphs.\n\n\nCode\nf_graph_adjusted &lt;- function(basin_file, basin_PE_file, nutrient_adjusted, nutrient_reported, nutrient_label){\n  g &lt;- plot_grid(\n    ggplot(basin_PE_file) +\n      geom_line(\n        data = basin_file,\n        aes(Year, !!as.symbol(nutrient_adjusted)), \n        color=\"black\", size=1\n        ) + \n      geom_area(\n        aes(Year, !!as.symbol(nutrient_reported), fill=PE_bin), \n        alpha=.7\n        ) + \n      theme(legend.position = \"none\") +\n      labs(\n        x=\"\", y=\"kt per year\",\n        caption = \"\\n\",\n        title = paste(\"Adjusted\", nutrient_label, \"flows\")\n    ),\n    ggplot(basin_PE_file) +\n      geom_line(\n        aes(Year, !!as.symbol(nutrient_adjusted), color=PE_bin), \n        size=1\n        ) + \n      geom_area(\n        aes(Year, !!as.symbol(nutrient_reported), fill=PE_bin), \n        alpha=.7\n        ) + \n      theme(legend.position = \"none\") +\n      facet_wrap(vars(PE_bin), scales=\"free\") +\n      labs(\n        x=\"\", y=\"\",\n        caption = Source,\n        title = \"\",\n        subtitle = \"line: adjusted flow ; area: reported flow\"\n      ),\n    rel_widths = c(0.3, 0.7)\n  )\n  return(g)\n}\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhone_mediterranee, \n  basin_PE_N_P_rhone_mediterranee,\n  \"Pt_in_adj\", \"Pt_in\", \"incoming Pt\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhone_mediterranee, \n  basin_PE_N_P_rhone_mediterranee,\n  \"Pt_out_adj\", \"Pt_out\", \"discharged Pt\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhone_mediterranee, \n  basin_PE_N_P_rhone_mediterranee,\n  \"NGL_in_adj\", \"NGL_in\", \"incoming NGL\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhone_mediterranee, \n  basin_PE_N_P_rhone_mediterranee,\n  \"NGL_out_adj\", \"NGL_out\", \"discharged NGL\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhone_mediterranee, \n  basin_PE_N_P_rhone_mediterranee,\n  \"DBO5_in_adj\", \"DBO5_in\", \"incoming DBO5\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhone_mediterranee, \n  basin_PE_N_P_rhone_mediterranee,\n  \"DBO5_out_adj\", \"DBO5_out\", \"discharged DBO5\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhone_mediterranee, \n  basin_PE_N_P_rhone_mediterranee,\n  \"DCO_in_adj\", \"DCO_in\", \"incoming DCO\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhone_mediterranee, \n  basin_PE_N_P_rhone_mediterranee,\n  \"DCO_out_adj\", \"DCO_out\", \"discharged DCO\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhone_mediterranee, \n  basin_PE_N_P_rhone_mediterranee,\n  \"MES_in_adj\", \"MES_in\", \"incoming MES\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhone_mediterranee, \n  basin_PE_N_P_rhone_mediterranee,\n  \"MES_out_adj\", \"MES_out\", \"discharged MES\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRatios\n\nBasin scale\n\n\n\nN:PDCO:DBO5DBO5:N vs DBO5:P\n\n\n\n\nCode\n#temporal P/N ratio\nggplot(basin_N_P_rhone_mediterranee) + \n  geom_line(aes(Year, N_P_ratio_in, color=\"N:P in\")) + \n  geom_line(aes(Year, N_P_ratio_out, color = \"N:P out\")) + \n  ylim(0, NA) +\n  theme(\n    legend.position = c(0.7, 0.6)\n  ) +\n  labs(\n    x=\"\", y=\"N:P ratio\",\n    title = \"N:P ratio in Rhône-Méditerranéee basin\",\n    subtitle = \"increase over time reflect phosphate detergent ban\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_rhone_mediterranee) + \n  geom_line(aes(Year, DCO_in/DBO5_in, color=\"DCO:DBO5 in\")) + \n  geom_line(aes(Year, DCO_out/DBO5_out, color = \"DCO:DBO5 out\")) + \n  ylim(0, NA) +\n  theme(\n    legend.position = c(0.7, 0.6)\n  ) +\n  labs(\n    x=\"\", y=\"DCO:DBO5 ratio\",\n    title = \"DCO:DBO5 ratio in Rhône-Méditerranéee basin\",\n    subtitle = \"decrease in outflow shows biodegradation\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_rhone_mediterranee) + \n  geom_point(\n    aes(\n      DBO5_in/NGL_in, DBO5_in/Pt_in, \n      color=Year_category\n      )\n    ) +\n  geom_point(\n    aes(\n      DBO5_out/NGL_out, DBO5_out/Pt_out, \n      color=Year_category\n        )\n    ) +\n  ylim(0, NA) +\n  annotate(\n    geom=\"text\", label =\"inflow\",\n    x=4, y=25\n  ) +\n  annotate(\n    geom=\"text\", label =\"outflow\",\n    x=1.3, y=8\n  ) +\n  labs(\n    x=\"DBO5:Pt ratio\", y=\"DBO5:NGL ratio\",\n    title = \"DBO5:NGL vs DBO5:Pt ratio in Rhône-Méditerranéee basin WWTPs\",\n    subtitle = \"decrease in outflow shows biodegradation\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nBasin yield\n\nBasinBasin x Capacity\n\n\n\n\nCode\nggplot(basin_N_P_rhone_mediterranee) + \n  geom_line(aes(Year, Pt_yield, color=\"P\")) + \n  geom_line(aes(Year, NGL_yield, color = \"N\")) + \n  geom_line(aes(Year, DBO5_yield, color = \"DBO5\")) +\n  geom_line(aes(Year, DCO_yield, color = \"DCO\")) +\n  geom_line(aes(Year, MES_yield, color = \"MES\")) +\n  ylim(0,100) +\n  theme(legend.position = c(0.7, 0.3)) +\n  labs(\n    title = \"Global abatement rate of Rhône-Méditerranée WWTPs\", \n    x=\"\", y=\"Yield (%)\", color=\"\",\n    caption = Source\n    )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE &lt;- function(dataset, nutrient_yield, nutrient_label){\n  g &lt;- ggplot(dataset %&gt;% filter(PE_bin !=\"unreported PE\")) + \n    geom_line(aes(Year, !!as.symbol(nutrient_yield), color=PE_bin)) + \n    ylim(0,100) +\n    theme(legend.position = c(0.7, 0.3)) +\n    labs(\n      title = paste(\"Global\", nutrient_label, \"yield of Rhône-Méditerranée basin\"), \n      subtitle = \"by capacity (population equivalent)\",\n      x=\"\", y=\"Yield (%)\", color=\"\",\n      caption = Source\n      )\n  return(g)\n}\n\n\n\nPtNGLDBO5DCOMES\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_rhone_mediterranee %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"Pt_yield\", \"Pt\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_rhone_mediterranee %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"NGL_yield\", \"NGL\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_rhone_mediterranee %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"DBO5_yield\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_rhone_mediterranee %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"DCO_yield\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_rhone_mediterranee %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"MES_yield\", \"MES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave data\nWe save the data. We consider all the absolute flows to be unreliable before 2009, and so we do not save them. We also remove the ratios nutrient_flow:capacities.\nBefore 2009, we also all data that include outgoing DBO5 to be unreliable. This includes:\n\noutgoing DBO5:Pt ratio\nDBO5 yield\n(not need for DBO5:DCO and DBO5:NGL since outgoing NGL and DCO are not reported before 2009)\n\n\n\nCode\n#for N_P_rhone_mediterranee file\ntemp &lt;- N_P_rhone_mediterranee %&gt;%\n  filter(Year&lt;2009) %&gt;%\n  mutate(\n    across(\n      c(\n        DBO5_in, DCO_in, MES_in, NGL_in, NTK_in, Pt_in,\n        DBO5_out, DCO_out, MES_out, NGL_out, NTK_out, Pt_out,\n        DBO5_yield\n      ),~NA\n    )\n  )\nN_P_rhone_mediterranee &lt;- bind_rows(\n  temp,\n  N_P_rhone_mediterranee %&gt;% filter(Year &gt;= 2009)\n)\n\n#for basin_N_P_rhone_mediterranee file\ntemp &lt;- basin_N_P_rhone_mediterranee %&gt;%\n  filter(Year&lt;2009) %&gt;%\n  mutate(\n    across(\n      c(\n        #in and out flows (adjusted and unadjusted)\n        Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, NTK_in,\n        DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n        Pt_out, Pt_out_adj, NGL_out, NGL_out_adj, NTK_out,\n        DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n        #PE ratios\n        Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n        DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out,\n        #flows with outgoing DBO5\n        DBO5_P_ratio_out, DBO5_yield\n      ),~NA\n    )\n  )\nbasin_N_P_rhone_mediterranee &lt;- bind_rows(\n  temp,\n  basin_N_P_rhone_mediterranee %&gt;% filter(Year &gt;= 2009)\n)\n\n#for basin_PE_N_P_rhone_mediterranee file\ntemp &lt;- basin_PE_N_P_rhone_mediterranee %&gt;%\n  filter(Year&lt;2009) %&gt;%\n  mutate(\n    across(\n      c(\n        #in and out flows (adjusted and unadjusted)\n        Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, NTK_in,\n        DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n        Pt_out, Pt_out_adj, NGL_out, NGL_out_adj, NTK_out,\n        DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n        #PE ratios\n        Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n        DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out,\n        #nutrient ratio\n        DBO5_P_ratio_out, DBO5_yield\n      ),~NA\n    )\n  )\nbasin_PE_N_P_rhone_mediterranee &lt;- bind_rows(\n  temp,\n  basin_PE_N_P_rhone_mediterranee %&gt;% filter(Year &gt;= 2009)\n)\n\n\n\n\nCode\n#all WWTP file\npath_output &lt;- \"output_data/all_WWTP/\"\ntemp &lt;- N_P_rhone_mediterranee %&gt;%\n  select(\n    code_WWTP, name_WWTP, Year, capacity, name_commune, INSEE_COM, lat_WWTP, long_WWTP, PE_bin,\n    DBO5_in, DCO_in, MES_in, NGL_in, NTK_in, Pt_in,\n    DBO5_out, DCO_out, MES_out, NGL_out, NTK_out, Pt_out,\n    DBO5_yield, DCO_yield, MES_yield, NGL_yield, Pt_yield,\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"all_WWTP_06_rhone_mediterranee.csv\"\n)\n\n#basin agregated file\npath_output &lt;- \"output_data/basins/\"\ntemp &lt;- basin_N_P_rhone_mediterranee %&gt;%\n  select(\n    Year, capacity, nb_WWTP,\n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_06_rhone_mediterranee.csv\"\n)\n\n#basin x PE agregated file\npath_output &lt;- \"output_data/basins_PE/\"\ntemp &lt;- basin_PE_N_P_rhone_mediterranee %&gt;%\n  select(\n    Year, capacity, nb_WWTP, PE_bin, \n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_PE_06_rhone_mediterranee.csv\"\n)\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "04_loire_bretagne.html",
    "href": "04_loire_bretagne.html",
    "title": "Loire-Bretagne",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#loading additional relevant packages\nlibrary(cowplot) #for plot_grid() (multiple plots)\nlibrary(viridis) #for viridis colors\nlibrary(readxl) # to read excel file\n\n#path for data \npath_source &lt;- \"source_data/04_loire_bretagne/provided_by_mail/\"\n\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(\n      plot.title = element_text(face=\"bold\")\n      )\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\n#reference year when graph analyse needs a particular year\nYear_analysis &lt;- 2020 \n\n#caption for all graphs\nSource &lt;- \"Agence de l'Eau Loire Bretagne, 2021.\\nComputation by Thomas Starck\"\n\n# Load the function file\nsource(\"functions.R\")\n\n\n\nSource and description\n\nData source and descriptionBasin presentationLoading data\n\n\nWe could not find data related to waste water treatment plants nutrient loads on Loire-Bretagne water agency website. Only are available the waste water treatment plants list and their capacity here and industrial discharges there.\nThe data presented here were provided by email.\nFor the Year 2019, we also got the data from the Etat des Lieux (status report) here, which is an expert assessment made by the water agency.\nTwo main files were transmitted :\n\nOne excel file describing each facility : facility name and code, city and department code, treatment type, plant capacity (in Population Equivalent, DBO5, and water flow), coordinates of the facility and of the discharge.\nOne excel file reporting for each wastewater treatment plant inflow and outflow DBO5, DCO, MES, NK, NGL, NO2, NO3, PO4 and P as well as water flow, from 2002 to 2020. Inflow and outflow are coded under the point names A3 and A4. More details on these points can be found here.\n\nWe will focus on the second file, which is the more adequate for our purpose. The first file will also be used to add the capacity and the treatment type for each plant.\n\n\nInformation about the basin ca be found in the “Etat des lieux 2019” (status report).\nThere are 13 million inhabitants in the basin. Data are measured in 3700 stations, representing 95% of the pollution flows. There are about 7000 wastewater treatment plants. In the 2013 report, it is said that about 1/4 of the people are not connected to sewers and use Individual Autonomous Systems.\nMore description in the “Guide de l’eau” (water guide) here and here\n\n\nWe load the data and prepare the file. For the nutrient flows which reporte null or negative values, we replace them with empty values.\n\n\nCode\nfile_loire_bretagne &lt;- \n  read_excel(\n    paste0(\n      path_source, \"STEU_E_S.xlsx\"\n      ), \n    range = \"A3:Z46177\")\n#selecting and renaming data\nN_P_loire_bretagne &lt;- file_loire_bretagne %&gt;%\n  select(\n    code_WWTP = ID, name_WWTP = NAME, Year, \n    NGL_in_reported = NGL_in, NTK_in=NK_in, NH4_in = N_NH4_in, NO2_in = N_NO2_in, NO3_in = N_NO3_in, \n    PO4_in = P_PO4_in, Pt_in = P_total_in, DBO5_in, DCO_in, MES_in,\n    NGL_out_reported = NGL_out, NTK_out=NK_out, NH4_out = N_NH4_out, NO2_out = N_NO2_out, NO3_out = N_NO3_out, \n    PO4_out = P_PO4_out, Pt_out = P_total_out, DBO5_out, DCO_out, MES_out\n    ) \n\n#uncomment to see data of 2021 without yearly average and with many more indicators (micropolluants...)\n# temp &lt;- read_csv2(file = paste(path_source, \"J_2021.csv\", sep=\"\"))\n\n#data for capacity and treatment type, to be merged with main file\nfile_WWTP &lt;- read_excel(paste(path_source, \"steu collectivit‚ descriptif.xlsx\", sep=\"\"))\nWWTP &lt;-  file_WWTP %&gt;%\n  select(\n    code_WWTP = `Code SANDRE`,\n    INSEE_COM = `Code INSEE commune`, #in the end we will have to merge this 3 letter code to the DEP code to have the full one\n    name_commune = `Libellé commune`,\n    INSEE_DEP = `Code INSEE département`,\n    treatment = `Nom file eau`,\n    capacity = `Capacité EH`,\n    capacity_DBO5 = `Capacité DBO5`,\n    capacity_water = `Capacité HYDRO`,\n    long_WWTP = `Y steu`,\n    lat_WWTP = `X steu`,\n    long_discharge = `X Rejet`,\n    lat_discharge = `Y Rejet`\n    #also of interest but not selected = coordinates of WWTP and discharge\n  )\n# Number of WWTP with unreported...\nnrow(WWTP %&gt;% filter(is.na(capacity)==T)) #capacity : 40\nnrow(WWTP %&gt;% filter(is.na(treatment)==T)) #treatment : 19\nnrow(WWTP %&gt;% filter(is.na(capacity_DBO5)==T)) #capacity DBO5 = 37\nnrow(WWTP %&gt;% filter(is.na(capacity_water)==T)) #capacity water flow = 75\nnrow(WWTP %&gt;% filter(is.na(code_WWTP)==T)) #code SANDRE : 0\n\n#joining the 2 files to have treatment type, capacity, and pollution flows together\nN_P_loire_bretagne &lt;- left_join(N_P_loire_bretagne, WWTP, by=\"code_WWTP\")\n\n# Some reported flows are negative or null. We replace them with empty values.\n#Pt\nN_P_loire_bretagne$Pt_in[N_P_loire_bretagne$Pt_in &lt;= 0] &lt;- NA\nN_P_loire_bretagne$Pt_out[N_P_loire_bretagne$Pt_out &lt;= 0] &lt;- NA\n#PO4\nN_P_loire_bretagne$PO4_in[N_P_loire_bretagne$PO4_in &lt;= 0] &lt;- NA\nN_P_loire_bretagne$PO4_out[N_P_loire_bretagne$PO4_out &lt;= 0] &lt;- NA\n#DBO5\nN_P_loire_bretagne$DBO5_in[N_P_loire_bretagne$DBO5_in &lt;= 0] &lt;- NA\nN_P_loire_bretagne$DBO5_out[N_P_loire_bretagne$DBO5_out &lt;= 0] &lt;- NA\n#DCO\nN_P_loire_bretagne$DCO_in[N_P_loire_bretagne$DCO_in &lt;= 0] &lt;- NA\nN_P_loire_bretagne$DCO_out[N_P_loire_bretagne$DCO_out &lt;= 0] &lt;- NA\n#MES\nN_P_loire_bretagne$MES_in[N_P_loire_bretagne$MES_in &lt;= 0] &lt;- NA\nN_P_loire_bretagne$MES_out[N_P_loire_bretagne$MES_out &lt;= 0] &lt;- NA\n#NTK\nN_P_loire_bretagne$NTK_in[N_P_loire_bretagne$NTK_in &lt;= 0] &lt;- NA\nN_P_loire_bretagne$NTK_out[N_P_loire_bretagne$NTK_out &lt;= 0] &lt;- NA\n#NO3\nN_P_loire_bretagne$NO3_in[N_P_loire_bretagne$NO3_in &lt;= 0] &lt;- NA\nN_P_loire_bretagne$NO3_out[N_P_loire_bretagne$NO3_out &lt;= 0] &lt;- NA\n#NO2\nN_P_loire_bretagne$NO2_in[N_P_loire_bretagne$NO2_in &lt;= 0] &lt;- NA\nN_P_loire_bretagne$NO2_out[N_P_loire_bretagne$NO2_out &lt;= 0] &lt;- NA\n#NH4\nN_P_loire_bretagne$NH4_in[N_P_loire_bretagne$NH4_in &lt;= 0] &lt;- NA\nN_P_loire_bretagne$NH4_out[N_P_loire_bretagne$NH4_out &lt;= 0] &lt;- NA\n\n\nSome WWTP have unreported capacities. For the most recent of them we are able to get their capacity from the sanitation portal data.\n\n\nCode\n#get the list of WWTP with unreported capacities\nunreported_capacity &lt;- N_P_loire_bretagne %&gt;% filter(is.na(capacity))\n\n#get capacities from the sanitation portal\nsanitation_portal_capacity &lt;- read_csv(\"output_data/all_WWTP/all_WWTP_sanitation_portal.csv\") %&gt;%\n  select(code_WWTP, capacity) %&gt;%\n  distinct()\n\n#change value when possible\nunreported_capacity &lt;- left_join(\n  unreported_capacity %&gt;% rename(capacity_LB = capacity), \n  sanitation_portal_capacity %&gt;% \n    select(code_WWTP, capacity), \n  by=\"code_WWTP\"\n) %&gt;%\n  select(-capacity_LB)\n\n#we change the values in the main file.\nN_P_loire_bretagne &lt;- N_P_loire_bretagne %&gt;% \n  filter(is.na(capacity)==F)\n\nN_P_loire_bretagne &lt;- bind_rows(\n  N_P_loire_bretagne, unreported_capacity\n)\n\n\nIn spite of this correction, we can see that before 2010 the number of stations not reporting their nominal capacity is not negligible (left). These are not only small stations, are shown by their relative phosphorus flows (right).\n\n\nCode\ntemp &lt;- N_P_loire_bretagne %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    Pt_in = sum(Pt_in, na.rm=T)*365/10^6,\n    nb_WWTP = n()\n  )\ntemp2 &lt;- unreported_capacity %&gt;%\n  filter(is.na(capacity)) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    Pt_in = sum(Pt_in, na.rm=T)*365/10^6,\n    nb_WWTP = n()\n  )\n\nplot_grid(\n  ggplot(temp) +\n    geom_line(aes(Year, nb_WWTP)) +\n    geom_area(data = temp2, aes(Year, nb_WWTP)) +\n    labs(\n      x=\"\", y=\"\",\n      subtitle = \"nb of wastewater treatment plants\",\n      title = \"Stations not reporting their nominal capacity\",\n      caption = \"\\n\"\n    ),\n  ggplot(temp) +\n    geom_line(aes(Year, Pt_in)) +\n    geom_area(data = temp2, aes(Year, Pt_in)) +\n    labs(\n      x=\"\", y=\"kt per year\",\n      subtitle = \"in terms of incoming Pt flows\",\n      title = \"\",\n      caption = Source\n    ) +\n    ylim(0, 7)\n)\n\n\n\n\n\nWe compute the yields and ratios for each WWTP. We also compute NGL. For incoming NGL, when possible we use NTK, NO2 and NO3, but if only NTK is available we also keep it as a good approximation (NO is negligible for incoming pollution). For discharged NGL, NO3 and NTK must be reported, and we accept to neglect NO2 when it is unreported.\n\n\nCode\n#Creating new variables of interest\nN_P_loire_bretagne &lt;- N_P_loire_bretagne %&gt;%\n  ungroup() %&gt;%\n  # we need to be \"row wise\" to use \"sum(., na.rm=T) : \n  # just summing the columns A+B would return NA when at least 1 columns as NA in the row\n  rowwise() %&gt;%\n  mutate(\n    #for NGL in, if NTK_in reported we accept to not consider unreported NO2_in and NO2_in as 0 (because NO in negligible)\n    #if NTK_in unreported, NGL_in is unreported\n    NGL_in = sum(NTK_in, NO2_in, NO3_in, na.rm=!is.na(NTK_in)), \n    #For NGL_out, NO3 and NTK must be reported, and we accept to neglect NO2 when it is unreported.\n    NGL_out = sum(NTK_out, NO2_out, NO3_out, na.rm=!((is.na(NTK_out)|is.na(NO3_out))))\n  )\nN_P_loire_bretagne &lt;- N_P_loire_bretagne %&gt;%\n  mutate(\n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    NGL_yield_reported = (1-NGL_out_reported/NGL_in_reported)*100,\n    Pt_yield = (1-Pt_out/Pt_in)*100,\n    DBO5_yield = (1-DBO5_out/DBO5_in)*100,\n    DCO_yield = (1-DCO_out/DCO_in)*100,\n    MES_yield = (1-MES_out/MES_in)*100,\n    N_P_ratio_in = NGL_in/Pt_in, \n    N_P_ratio_out = NGL_out/Pt_out,\n    N_P_ratio_in_reported = NGL_in_reported/Pt_in, \n    N_P_ratio_out_reported = NGL_out_reported/Pt_out\n  ) %&gt;%\n  filter(Year &gt; 2004) #almost no data before 2005\n\n\nWe create the capacity categories in terms of population equivalent.\n\n\nCode\n#function to create capacity categories\nf_PE_bin_categories &lt;- function(dataset){\n  #Creating size categories\n  dataset &lt;- \n    dataset %&gt;%\n    mutate(\n      PE_bin = case_when(\n        capacity &lt; 200 ~ \"0 - 200 PE\",\n        (capacity &gt;= 200) & (capacity &lt;2000) ~ \"200 - 2 000 PE\",\n        (capacity &gt;= 2000) & (capacity &lt;10000) ~ \"2 000 - 10 000 PE\",\n        (capacity &gt;= 10000) & (capacity &lt;100000) ~ \"10 000 - 100 000 PE\",\n        capacity &gt;= 100000 ~ \"&gt; 100 000 PE\",\n        T ~ \"unreported PE\"\n      )\n    )\n  \n  #reorders treatment by their share of total capacity\n  dataset$PE_bin &lt;- \n    factor(\n      dataset$PE_bin, \n      levels = \n        c(\"unreported PE\",\n          \"0 - 200 PE\", \n          \"200 - 2 000 PE\", \n          \"2 000 - 10 000 PE\",\n          \"10 000 - 100 000 PE\", \n          \"&gt; 100 000 PE\"\n          )\n        )\n  return(dataset)\n}\nN_P_loire_bretagne &lt;- f_PE_bin_categories(N_P_loire_bretagne)\n\n\nWe create the file with aggregated flows at the basin scale, and also by capacity categories.\n\n\nCode\nf_basin_flows &lt;- function(dataset){\n  basin &lt;- dataset %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      across(\n        c(\n          NGL_in, NGL_in_reported, NTK_in, NH4_in, NO2_in, NO3_in, PO4_in, Pt_in, DBO5_in, DCO_in, MES_in,\n          NGL_out, NGL_out_reported, NTK_out, NH4_out, NO2_out, NO3_out, PO4_out, Pt_out, DBO5_out, DCO_out, MES_out\n        ),\n        ~signif(sum(.x, na.rm = T)*365/10^6, digits=3)\n      ),\n    #nb of waste water treatment plant\n    nb_WWTP = n(),\n    #capacity converted in million Population Equivalent\n    capacity = signif(sum(capacity, na.rm = T)/10^6, digits=3),\n    )\n  return(basin)\n}\nbasin_N_P_loire_bretagne &lt;- f_basin_flows(N_P_loire_bretagne)\n\nf_basin_PE_flows &lt;- function(dataset){\n  basin &lt;- dataset %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      across(\n        c(\n          NGL_in, NGL_in_reported, NTK_in, NH4_in, NO2_in, NO3_in, PO4_in, Pt_in, DBO5_in, DCO_in, MES_in,\n          NGL_out, NGL_out_reported, NTK_out, NH4_out, NO2_out, NO3_out, PO4_out, Pt_out, DBO5_out, DCO_out, MES_out\n        ),\n        ~signif(sum(.x, na.rm = T)*365/10^6, digits=3)\n      ),\n    #nb of waste water treatment plant\n    nb_WWTP = n(),\n    #capacity converted in million Population Equivalent\n    capacity = signif(sum(capacity, na.rm = T)/10^6, digits=3),\n    )\n  return(basin)\n}\nbasin_PE_N_P_loire_bretagne &lt;- f_basin_PE_flows(N_P_loire_bretagne)\n\n\nWe compute the nutrient ratios at the basin scale, and also by capacity categories.\n\n\nCode\n#have to do this in case 1 nutrient is more reported than the other, which would create a bia if we took the ratio of the already aggregated flows\nf_nutrient_ratio_basin &lt;- function(basin, dataset, nutrient1, nutrient2){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrient1))==F & is.na(!!as.symbol(nutrient2))==F\n      ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      nutrient_1 = sum(!!as.symbol(nutrient1), na.rm=T),\n      nutrient_2 = sum(!!as.symbol(nutrient2), na.rm=T),\n      ratio = signif(nutrient_1/nutrient_2, digits=3)\n    ) %&gt;%\n    select(-nutrient_1, -nutrient_2)\n  basin &lt;- left_join(\n    basin, temp, by=\"Year\"\n  )\n  return(basin)\n}\n\nf_nutrient_ratio_basin_PE &lt;- function(basin_PE, dataset, nutrient1, nutrient2){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrient1))==F & is.na(!!as.symbol(nutrient2))==F\n      ) %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      nutrient_1 = sum(!!as.symbol(nutrient1), na.rm=T),\n      nutrient_2 = sum(!!as.symbol(nutrient2), na.rm=T),\n      ratio = signif(nutrient_1/nutrient_2, digits=3)\n    ) %&gt;%\n    select(-nutrient_1, -nutrient_2)\n  basin_PE &lt;- left_join(\n    basin_PE, temp, by=c(\"Year\", \"PE_bin\")\n  )\n  return(basin_PE)\n}\n\nf_all_nutrient_ratios_basin &lt;- function(basin, dataset){\n  basin &lt;- basin %&gt;%\n    \n    #nutrient ratios\n    #N_P in\n    f_nutrient_ratio_basin(dataset, \"NGL_in\", \"Pt_in\") %&gt;%\n    rename(N_P_ratio_in = ratio) %&gt;%\n    #N_P out\n    f_nutrient_ratio_basin(dataset, \"NGL_out\", \"Pt_out\") %&gt;%\n    rename(N_P_ratio_out = ratio) %&gt;%\n    #DCO_DBO5 in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"DBO5_in\") %&gt;%\n    rename(DCO_DBO5_ratio_in = ratio) %&gt;%\n    #DCO_DBO5 out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"DBO5_out\") %&gt;%\n    rename(DCO_DBO5_ratio_out = ratio) %&gt;%\n    #DBO5_N in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"NGL_in\") %&gt;%\n    rename(DBO5_N_ratio_in = ratio) %&gt;%\n    #DBO5_N out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"NGL_out\") %&gt;%\n    rename(DBO5_N_ratio_out = ratio) %&gt;%\n    #DBO5_P in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"Pt_in\") %&gt;%\n    rename(DBO5_P_ratio_in = ratio) %&gt;%\n    #DBO5_P out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"Pt_out\") %&gt;%\n    rename(DBO5_P_ratio_out = ratio) %&gt;%\n    #DCO_N in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"NGL_in\") %&gt;%\n    rename(DCO_N_ratio_in = ratio) %&gt;%\n    #DCO_N out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"NGL_out\") %&gt;%\n    rename(DCO_N_ratio_out = ratio) %&gt;%\n    #DCO_P in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"Pt_in\") %&gt;%\n    rename(DCO_P_ratio_in = ratio) %&gt;%\n    #DCO_P out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"Pt_out\") %&gt;%\n    rename(DCO_P_ratio_out = ratio) %&gt;%\n    \n    #capacity ratios\n    #Pt_PE_in\n    f_nutrient_ratio_basin(dataset, \"Pt_in\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_in = ratio) %&gt;%\n    #Pt_PE_out\n    f_nutrient_ratio_basin(dataset, \"Pt_out\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_out = ratio) %&gt;%\n    #NGL_PE_in\n    f_nutrient_ratio_basin(dataset, \"NGL_in\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_in = ratio) %&gt;%\n    #NGL_PE_out\n    f_nutrient_ratio_basin(dataset, \"NGL_out\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_out = ratio) %&gt;%\n    #DBO5_PE_in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_in = ratio) %&gt;%\n    #DBO5_PE_out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_out = ratio) %&gt;%\n    #DCO_PE_in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_in = ratio) %&gt;%\n    #DCO_PE_out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_out = ratio) %&gt;%\n    #MES_PE_in\n    f_nutrient_ratio_basin(dataset, \"MES_in\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_in = ratio) %&gt;%\n    #MES_PE_out\n    f_nutrient_ratio_basin(dataset, \"MES_out\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_out = ratio) %&gt;%\n    \n    #convert from kg per PE per day to g per PE per day\n    mutate(\n      across(\n        c(\n          Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, DBO5_PE_ratio_in, DBO5_PE_ratio_out,\n          DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n        ), ~.x*1000 \n      )\n    )\n  return(basin)\n}\n\nf_all_nutrient_ratios_basin_PE &lt;- function(basin_PE, dataset){\n  basin_PE &lt;- basin_PE %&gt;%\n    \n    #nutrient ratios\n    #N_P in\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_in\", \"Pt_in\") %&gt;%\n    rename(N_P_ratio_in = ratio) %&gt;%\n    #N_P out\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_out\", \"Pt_out\") %&gt;%\n    rename(N_P_ratio_out = ratio) %&gt;%\n    #DCO_DBO5 in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"DBO5_in\") %&gt;%\n    rename(DCO_DBO5_ratio_in = ratio) %&gt;%\n    #DCO_DBO5 out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"DBO5_out\") %&gt;%\n    rename(DCO_DBO5_ratio_out = ratio) %&gt;%\n    #DBO5_N in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"NGL_in\") %&gt;%\n    rename(DBO5_N_ratio_in = ratio) %&gt;%\n    #DBO5_N out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"NGL_out\") %&gt;%\n    rename(DBO5_N_ratio_out = ratio) %&gt;%\n    #DBO5_P in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"Pt_in\") %&gt;%\n    rename(DBO5_P_ratio_in = ratio) %&gt;%\n    #DBO5_P out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"Pt_out\") %&gt;%\n    rename(DBO5_P_ratio_out = ratio) %&gt;%\n    #DCO_N in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"NGL_in\") %&gt;%\n    rename(DCO_N_ratio_in = ratio) %&gt;%\n    #DCO_N out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"NGL_out\") %&gt;%\n    rename(DCO_N_ratio_out = ratio) %&gt;%\n    #DCO_P in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"Pt_in\") %&gt;%\n    rename(DCO_P_ratio_in = ratio) %&gt;%\n    #DCO_P out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"Pt_out\") %&gt;%\n    rename(DCO_P_ratio_out = ratio) %&gt;%\n    \n    #capacity ratios\n    #Pt_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"Pt_in\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_in = ratio) %&gt;%\n    #Pt_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"Pt_out\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_out = ratio) %&gt;%\n    #NGL_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_in\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_in = ratio) %&gt;%\n    #NGL_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_out\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_out = ratio) %&gt;%\n    #DBO5_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_in = ratio) %&gt;%\n    #DBO5_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_out = ratio) %&gt;%\n    #DCO_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_in = ratio) %&gt;%\n    #DCO_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_out = ratio) %&gt;%\n    #MES_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"MES_in\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_in = ratio) %&gt;%\n    #MES_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"MES_out\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_out = ratio) %&gt;%\n    \n    #convert from kg per PE per day to g per PE per day\n    mutate(\n      across(\n        c(\n          Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, DBO5_PE_ratio_in, DBO5_PE_ratio_out,\n          DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n        ), ~.x*1000 \n      )\n    )\n  return(basin_PE)\n}\n\nbasin_N_P_loire_bretagne &lt;- f_all_nutrient_ratios_basin(basin_N_P_loire_bretagne, N_P_loire_bretagne)\n\nbasin_PE_N_P_loire_bretagne &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_loire_bretagne, N_P_loire_bretagne)\n\n\nWe compute the yields at the basin scale, and also by capacity categories.\n\n\nCode\n#have to do this in case inflow or outflow is more reported than the other one, which would create a bias if we took the ratio of the already aggregated flows\nf_yield_basin &lt;- function(basin, dataset, nutrientIN, nutrientOUT){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrientIN))==F & is.na(!!as.symbol(nutrientOUT))==F\n      ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      nutrient_in = sum(!!as.symbol(nutrientIN), na.rm=T),\n      nutrient_out = sum(!!as.symbol(nutrientOUT), na.rm=T),\n      yield = round((1-nutrient_out/nutrient_in)*100, digits = 0)\n    ) %&gt;%\n    select(-nutrient_in, -nutrient_out)\n  basin &lt;- left_join(\n    basin, temp, by=\"Year\"\n  )\n  return(basin)\n}\n\nf_yield_basin_PE &lt;- function(basin_PE, dataset, nutrientIN, nutrientOUT){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrientIN))==F & is.na(!!as.symbol(nutrientOUT))==F\n      ) %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      nutrient_in = sum(!!as.symbol(nutrientIN), na.rm=T),\n      nutrient_out = sum(!!as.symbol(nutrientOUT), na.rm=T),\n      yield = round((1-nutrient_out/nutrient_in)*100, digits = 0)\n    ) %&gt;%\n    select(-nutrient_in, -nutrient_out)\n  basin_PE &lt;- left_join(\n    basin_PE, temp, by=c(\"Year\", \"PE_bin\")\n  )\n  return(basin_PE)\n}\n\nf_all_yields_basin &lt;- function(basin, dataset){\n  basin &lt;- basin %&gt;%\n    #NGL yield\n    f_yield_basin(dataset, \"NGL_in\", \"NGL_out\") %&gt;%\n    rename(NGL_yield = yield) %&gt;%\n    #Pt yield\n    f_yield_basin(dataset, \"Pt_in\", \"Pt_out\") %&gt;%\n    rename(Pt_yield = yield) %&gt;%\n    #DBO5 yield\n    f_yield_basin(dataset, \"DBO5_in\", \"DBO5_out\") %&gt;%\n    rename(DBO5_yield = yield) %&gt;%\n    #DCO yield\n    f_yield_basin(dataset, \"DCO_in\", \"DCO_out\") %&gt;%\n    rename(DCO_yield = yield) %&gt;%\n    #MES yield\n    f_yield_basin(dataset, \"MES_in\", \"MES_out\") %&gt;%\n    rename(MES_yield = yield) \n  return(basin)\n}\n\nf_all_yields_basin_PE &lt;- function(basin_PE, dataset){\n  basin_PE &lt;- basin_PE %&gt;%\n    #NGL yield\n    f_yield_basin_PE(dataset, \"NGL_in\", \"NGL_out\") %&gt;%\n    rename(NGL_yield = yield) %&gt;%\n    #Pt yield\n    f_yield_basin_PE(dataset, \"Pt_in\", \"Pt_out\") %&gt;%\n    rename(Pt_yield = yield) %&gt;%\n    #DBO5 yield\n    f_yield_basin_PE(dataset, \"DBO5_in\", \"DBO5_out\") %&gt;%\n    rename(DBO5_yield = yield) %&gt;%\n    #DCO yield\n    f_yield_basin_PE(dataset, \"DCO_in\", \"DCO_out\") %&gt;%\n    rename(DCO_yield = yield) %&gt;%\n    #MES yield\n    f_yield_basin_PE(dataset, \"MES_in\", \"MES_out\") %&gt;%\n    rename(MES_yield = yield) \n  return(basin_PE)\n}\n\nbasin_N_P_loire_bretagne &lt;- f_all_yields_basin(basin_N_P_loire_bretagne, N_P_loire_bretagne)\n\nbasin_PE_N_P_loire_bretagne &lt;- f_all_yields_basin_PE(basin_PE_N_P_loire_bretagne, N_P_loire_bretagne)\n\n\nWe create the years categories (every 5 years).\n\n\nCode\n#function to create years categories\nf_year_categories &lt;- function(dataset){\n  dataset &lt;- dataset %&gt;%\n    mutate(\n      Year_category = case_when(\n        Year %in% c(1991, 1992, 1993, 1994, 1995) ~ \"1991-1995\",\n        Year %in% c(1996, 1997, 1998, 1999, 2000) ~ \"1996-2000\",\n        Year %in% c(2001, 2002, 2003, 2004, 2005) ~ \"2001-2005\",\n        Year %in% c(2006, 2007, 2008, 2009, 2010) ~ \"2006-2010\",\n        Year %in% c(2011, 2012, 2013, 2014, 2015) ~ \"2011-2015\",\n        Year %in% c(2016, 2017, 2018, 2019, 2020) ~ \"2016-2020\",\n      )\n    )\n  return(dataset)\n}\nN_P_loire_bretagne &lt;- f_year_categories(N_P_loire_bretagne)\nbasin_N_P_loire_bretagne &lt;- f_year_categories(basin_N_P_loire_bretagne)\nbasin_PE_N_P_loire_bretagne &lt;- f_year_categories(basin_PE_N_P_loire_bretagne)\n\n\n\n\nCode\n#remove unused files\nrm(unreported_capacity, sanitation_portal_capacity, WWTP)\n\n\n\n\n\n\n\nData cleaning\n\nOutliers : first visualization\n\n\nWhen looking at the dataset, there are some obvious outliers which have too big an inflow, which we remove. This gives the following graphs for each nutrient flow. We discuss further the potential outliers identified with this visual check. We can go further in outliers removal, as explained in the following tab.\n\n\nClick to see first large outliers list\n\n\nin 2020 LA COUR (code SANDRE 0422186S0001), which reports flows 2 to 3 orders of magnitude higher than the largest waste water treatment plants for all the inflows.\n\nNGL, NTK, NH4 in 10^5,\nNO2, NO3, Pt in 10^4,\nDBO5 DCO MES in 10^6\n\nNH4 inflow :\n\nin 2014 in Lieu dit ‘le SIGNAN’ (code SANDRE 0456178S0001), incosistent, replace by 200\n\nPO4 inflow :\n\nin 2013 in FOLETIER (code SANDRE 0443137S0002), inconsistent, remove\nin 2021 in PRES VOIE SNCF (code SANDRE 0423176S0002), 4 orders of magnitude higher\n\n\n\nWe change the biggest outliers to be able to vizualize the following graphs.\n\n\nCode\n# La Cour 2020 inflows\n#NGL\nN_P_loire_bretagne$NGL_in_reported[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020] &lt;- \n  N_P_loire_bretagne$NGL_in_reported[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020]/10^5\n#NTK\nN_P_loire_bretagne$NTK_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020] &lt;- \n  N_P_loire_bretagne$NTK_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020]/10^5\n#NH4\nN_P_loire_bretagne$NH4_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020] &lt;- \n  N_P_loire_bretagne$NH4_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020]/10^5\n#NO2\nN_P_loire_bretagne$NO2_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020] &lt;- \n  N_P_loire_bretagne$NO2_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020]/10^4\n#Pt\nN_P_loire_bretagne$Pt_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020] &lt;- \n  N_P_loire_bretagne$Pt_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020]/10^4\n#NO3\nN_P_loire_bretagne$NO3_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020] &lt;- \n  N_P_loire_bretagne$NO3_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020]/10^4\n#DBO5\nN_P_loire_bretagne$DBO5_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020] &lt;- \n  N_P_loire_bretagne$DBO5_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020]/10^6\n#DCO\nN_P_loire_bretagne$DCO_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020] &lt;- \n  N_P_loire_bretagne$DCO_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020]/10^6\n#MES\nN_P_loire_bretagne$MES_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020] &lt;- \n  N_P_loire_bretagne$MES_in[N_P_loire_bretagne$code_WWTP == \"0422186S0001\" & N_P_loire_bretagne$Year == 2020]/10^6\n\n#NH4 in\n#Lieu dit 'le SIGNAN' 2014\nN_P_loire_bretagne$NH4_in[N_P_loire_bretagne$code_WWTP == \"0456178S0001\" & N_P_loire_bretagne$Year == 2014] &lt;- 200\n\n# PO4 in\n#FOLETIER 2013\nN_P_loire_bretagne$PO4_in[N_P_loire_bretagne$code_WWTP == \"0443137S0002\" & N_P_loire_bretagne$Year == 2013] &lt;- NA\n#PRES VOIE SNCF 2021\nN_P_loire_bretagne$PO4_in[N_P_loire_bretagne$code_WWTP == \"0423176S0002\" & N_P_loire_bretagne$Year == 2021] &lt;- \n  N_P_loire_bretagne$PO4_in[N_P_loire_bretagne$code_WWTP == \"0423176S0002\" & N_P_loire_bretagne$Year == 2021]/10^4\n\n\nWe recompute the values after the outliers modifications.\n\n\nCode\nN_P_loire_bretagne &lt;- N_P_loire_bretagne %&gt;%\n  ungroup() %&gt;%\n  # we need to be \"row wise\" to use \"sum(., na.rm=T) : \n  # just summing the columns A+B would return NA when at least 1 columns as NA in the row\n  rowwise() %&gt;%\n  mutate(\n    #for NGL in, if NTK_in reported we accept to not consider unreported NO2_in and NO2_in as 0 (because NO in negligible)\n    #if NTK_in unreported, NGL_in is unreported\n    NGL_in = sum(NTK_in, NO2_in, NO3_in, na.rm=!is.na(NTK_in)), \n    #For NGL_out, NO3 and NTK must be reported, and we accept to neglect NO2 when it is unreported.\n    NGL_out = sum(NTK_out, NO2_out, NO3_out, na.rm=!((is.na(NTK_out)|is.na(NO3_out))))\n  )\nN_P_loire_bretagne &lt;-\n  N_P_loire_bretagne %&gt;%\n  mutate(\n    #Computes yields \n    Pt_yield = (1-Pt_out/Pt_in)*100, \n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    DBO5_yield =(1-DBO5_out/DBO5_in)*100, \n    DCO_yield =(1-DCO_out/DCO_in)*100,\n    MES_yield =(1-MES_out/MES_in)*100,\n    #nutrient ratios\n    N_P_ratio_in = NGL_in/Pt_in, \n    N_P_ratio_out = NGL_out/Pt_out,\n    DCO_DBO5_ratio_in = DCO_in/DBO5_in,\n    DCO_DBO5_ratio_out = DCO_out/DBO5_out,\n    DBO5_N_ratio_in = DBO5_in/NGL_in,\n    DBO5_N_ratio_out = DBO5_out/NGL_out,\n    DBO5_Pt_ratio_in = DBO5_in/Pt_in,\n    DBO5_Pt_ratio_out = DBO5_out/Pt_out\n  )\n\n\n\n\nCode\n#recompute basin values (flows, yields, ratios..)\nbasin_N_P_loire_bretagne &lt;- f_basin_flows(N_P_loire_bretagne)\nbasin_N_P_loire_bretagne &lt;- f_all_nutrient_ratios_basin(basin_N_P_loire_bretagne, N_P_loire_bretagne)\nbasin_N_P_loire_bretagne &lt;- f_all_yields_basin(basin_N_P_loire_bretagne, N_P_loire_bretagne)\nbasin_N_P_loire_bretagne &lt;- f_year_categories(basin_N_P_loire_bretagne)\n\n#recompute basin x PE values (flows, yields, ratios..)\nbasin_PE_N_P_loire_bretagne &lt;- f_basin_PE_flows(N_P_loire_bretagne)\nbasin_PE_N_P_loire_bretagne &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_loire_bretagne, N_P_loire_bretagne)\nbasin_PE_N_P_loire_bretagne &lt;- f_all_yields_basin_PE(basin_PE_N_P_loire_bretagne, N_P_loire_bretagne)\nbasin_PE_N_P_loire_bretagne &lt;- f_year_categories(basin_PE_N_P_loire_bretagne)\n\n\n\n\nCode\nf_graph_nutrient &lt;- function(dataset, nutrient_in, nutrient_out, label, legend_x, legend_y){\n  p &lt;- ggplot(dataset) + \n    #nutrient inflow\n    geom_line(\n      aes(\n        Year, \n        !!as.symbol(nutrient_in), \n        color=nutrient_in\n        )\n      ) + \n    #nutrient outflow\n    geom_line(\n      aes(\n        Year,\n        !!as.symbol(nutrient_out), \n        color = nutrient_out\n        )\n      ) +\n    ylim(0, NA) +\n    theme(\n      legend.position = c(legend_x, legend_y), \n      legend.title = element_blank()\n      ) +\n    labs(\n      x=\"\", y=paste(\"kt of\", label) , \n      title = paste(\"Reported\", label, \"flows in Loire-Bretagne WWTPs\") ,\n      subtitle = \"reported, not necessarily actual ; here before data cleaning\", \n      caption = Source\n      )\n  return(p)\n}\n##if want to try interactive plot :\n# library(plotly)\n# ggplotly(p, tooltip = c(\"y\", \"x\"))\n\n\n\nNTKNH4NO3NO2NGLPtPO4DBO5DCOMESOutliers correction\n\n\nThere might be an outlier in 2008 for incoming NK.\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"NTK_in\", \"NTK_out\", \"NTK\", 0.7, 0.5) \n\n\n\n\n\n\n\nThere might be outliers in 2014-2015 for NH4 out. Obvious outlier for incoming NH4 in 2016 and for outflow in 2005.\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"NH4_in\", \"NH4_out\", \"NH4\", 0.7, 0.2)\n\n\n\n\n\n\n\nThere might be an outlier for incoming NO3 in 2006.\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"NO3_in\", \"NO3_out\", \"NO3\", 0.4, 0.85)  \n\n\n\n\n\n\n\nOutliers peak for 2020 inflow, and another one in 2013.\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"NO2_in\", \"NO2_out\", \"NO2\", 0.4, 0.5) \n\n\n\n\n\n\n\nEven though there is not an obvious outlier at first glance, NGL presents a big inconsistency. When computing NK + NO3 + NO2, the total falls short of the reported NGL, especially for the inflow before 2010 (cf the tab “All N”).\nHere we represent both reported and computed quantities. Out of consistency, for the following, we will use the computed quantity.\n\n\nCode\nggplot(basin_N_P_loire_bretagne) + \n  geom_line(aes(Year, NGL_in_reported, color=\"NGL in\", linetype=\"reported\")) + \n  geom_line(aes(Year, NGL_in, color=\"NGL in\", linetype=\"computed\")) + \n  geom_line(aes(Year, NGL_out_reported, color = \"NGL out\", linetype=\"reported\")) +\n  geom_line(aes(Year, NGL_out, color=\"NGL out\", linetype=\"computed\")) + \n  ylim(0, NA) + \n  labs(\n    x=\"\", y=\"ktN\",\n    title=\"Reported NGL flows in Loire-Bretagne basin Waste Water Treamtment plants\",\n    subtitle = \"reported, not necessarily actual ; here before data cleaning\",\n    caption = Source\n  )\n\n\n\n\n\n\n\nNo obvious outlier.\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"Pt_in\", \"Pt_out\", \"Pt\", 0.4, 0.5) \n\n\n\n\n\n\n\nEven though there are no obvious outliers, PO4 flows are not reliable, since they are barely reported. We address this issue later on in the “pollution flows” paragraph”.\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"PO4_in\", \"PO4_out\", \"PO4\", 0.4, 0.5) \n\n\n\n\n\n\n\nThere is no obvious outlier for DBO5.\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"DBO5_in\", \"DBO5_out\", \"DBO5\", 0.4, 0.5)  \n\n\n\n\n\n\n\nThere is no obvious outlier for DCO.\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"DCO_in\", \"DCO_out\", \"DCO\", 0.4, 0.5)  \n\n\n\n\n\n\n\nThere is no obvious outlier for MES.\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"MES_in\", \"MES_out\", \"MES\", 0.4, 0.5)\n\n\n\n\n\n\n\nWe change the following outliers :\n\nNTK in - in 2008 and 2009 in ILE ARRAULT (code SANDRE 0445298S0001), 1 ODM\nNH4 in - in 2016 in Communale (code SANDRE 0429259S0002), 3 order of magnitude higher - in 2020 in POCE SUR CISSE LA CROIX SAINT JEAN (code SANDRE 0437185S0002), 2 ODM\nNO2 in - LES 3 RIVIEIRES 2020 (code SANDRE 0463113S0006), 2 ODM - probably others but tedious to do\nNO3 in - (Beaurade 2003 outside period) - PORT NEUF 2006, 2 ODM, 0417300S0002 - Le corniguel 2006, 0429232S0004 2 ODM\n\nPt in - Avenue Ronsard 2014, 0441269S0009, inconsistent, NA - Kergloanou 2020, 0429150S0003, 2 ODM\n\n\n\nCode\n#NTK in\n#ILE ARRAULT\nN_P_loire_bretagne$NTK_in[N_P_loire_bretagne$code_WWTP == \"0445298S0001\" & N_P_loire_bretagne$Year == 2008] &lt;- \n  N_P_loire_bretagne$NTK_in[N_P_loire_bretagne$code_WWTP == \"0445298S0001\" & N_P_loire_bretagne$Year == 2008]/10^1\n\n#NH4 in\n#Communal 2016\nN_P_loire_bretagne$NH4_in[N_P_loire_bretagne$code_WWTP == \"0429259S0002\" & N_P_loire_bretagne$Year == 2016] &lt;- \n  N_P_loire_bretagne$NH4_in[N_P_loire_bretagne$code_WWTP == \"0429259S0002\" & N_P_loire_bretagne$Year == 2016]/10^3\n#POCE SUR CISSE LA CROIX SAINT JEAN\nN_P_loire_bretagne$NH4_in[N_P_loire_bretagne$code_WWTP == \"0437185S0002\" & N_P_loire_bretagne$Year == 2020] &lt;- \n  N_P_loire_bretagne$NH4_in[N_P_loire_bretagne$code_WWTP == \"0437185S0002\" & N_P_loire_bretagne$Year == 2020]/10^2\n\n# NO2 in\n#LES 3 RIVIEIRES\nN_P_loire_bretagne$NO2_in[N_P_loire_bretagne$code_WWTP == \"0463113S0006\" & N_P_loire_bretagne$Year == 2020] &lt;- \n  N_P_loire_bretagne$NO2_in[N_P_loire_bretagne$code_WWTP == \"0463113S0006\" & N_P_loire_bretagne$Year == 2020]/10^2\n\n# NO3 in\n#Beaurade out of study period\n\n#PORT NEUF\nN_P_loire_bretagne$NO3_in[N_P_loire_bretagne$code_WWTP == \"0417300S0002\" & N_P_loire_bretagne$Year == 2006] &lt;- \n  N_P_loire_bretagne$NO3_in[N_P_loire_bretagne$code_WWTP == \"0417300S0002\" & N_P_loire_bretagne$Year == 2006]/10^2\n#Le corniguel\nN_P_loire_bretagne$NO3_in[N_P_loire_bretagne$code_WWTP == \"0429232S0004\" & N_P_loire_bretagne$Year == 2006] &lt;- \n  N_P_loire_bretagne$NO3_in[N_P_loire_bretagne$code_WWTP == \"0429232S0004\" & N_P_loire_bretagne$Year == 2006]/10^2\n\n# Pt in\n#Avenue Ronsard\nN_P_loire_bretagne$Pt_in[N_P_loire_bretagne$code_WWTP == \"0441269S0009\" & N_P_loire_bretagne$Year == 2014] &lt;- NA\n#Kergloanou\nN_P_loire_bretagne$Pt_in[N_P_loire_bretagne$code_WWTP == \"0429150S0003\" & N_P_loire_bretagne$Year == 2020] &lt;- \n  N_P_loire_bretagne$Pt_in[N_P_loire_bretagne$code_WWTP == \"0429150S0003\" & N_P_loire_bretagne$Year == 2020]/10^2\n\n\n\nNTK out - LA BAUMETTE 2007 and 2008 (code SANDRE 0449007S0002), 1 ODM\nNH4 out - LES FORGES in 2014 (code SANDRE 0479017S0001), 3 OM - in 2005 in LA GACERIE (code SANDRE 0437010S0005), inconsistent, remove - probably others but tedious\nNO2 out - grands champs et salles s mer in 2018 (code SANDRE 0417003S0003), 1 OM - probably others but tedious\nNO3 out - KERZELLEC (code SANDRE 0429031S0004), in 2016, inconsistent : remove\n\n\n\nCode\n#NTK\n#LA BAUMETTE\nN_P_loire_bretagne$NTK_out[N_P_loire_bretagne$code_WWTP == \"\" & N_P_loire_bretagne$Year == 2007] &lt;- \n  N_P_loire_bretagne$NTK_out[N_P_loire_bretagne$code_WWTP == \"\" & N_P_loire_bretagne$Year == 2007]/10\n\n#NH4 out\n#LES FORGES\nN_P_loire_bretagne$NH4_out[N_P_loire_bretagne$code_WWTP == \"\" & N_P_loire_bretagne$Year == 2014] &lt;- \n  N_P_loire_bretagne$NH4_out[N_P_loire_bretagne$code_WWTP == \"\" & N_P_loire_bretagne$Year == 2014]/10^3\n#LA GACERIE 2005\nN_P_loire_bretagne$NH4_out[N_P_loire_bretagne$code_WWTP == \"0437010S0005\" & N_P_loire_bretagne$Year == 2005] &lt;- NA\n\n\n#NO2\n#grands champs et salles s mer\nN_P_loire_bretagne$NO2_out[N_P_loire_bretagne$code_WWTP == \"\" & N_P_loire_bretagne$Year == 2018] &lt;- \n  N_P_loire_bretagne$NO2_out[N_P_loire_bretagne$code_WWTP == \"\" & N_P_loire_bretagne$Year == 2018]/10^3\n\n#NO3\n#KERZELLEC\nN_P_loire_bretagne$NO3_out[N_P_loire_bretagne$code_WWTP == \"\" & N_P_loire_bretagne$Year == 2016] &lt;- NA\n\n\nWe recompute the values after the outliers corrections.\n\n\nCode\n#recomputes NGL, yields and P/N ratio\nN_P_loire_bretagne &lt;- N_P_loire_bretagne %&gt;%\n  ungroup() %&gt;%\n  # we need to be \"row wise\" to use \"sum(., na.rm=T) : \n  # just summing the columns A+B would return NA when at least 1 columns as NA in the row\n  rowwise() %&gt;%\n  mutate(\n    #for NGL in, if NTK_in reported we accept to not consider unreported NO2_in and NO2_in as 0 (because NO in negligible)\n    #if NTK_in unreported, NGL_in is unreported\n    NGL_in = sum(NTK_in, NO2_in, NO3_in, na.rm=!is.na(NTK_in)), \n    #For NGL_out, NO3 and NTK must be reported, and we accept to neglect NO2 when it is unreported.\n    NGL_out = sum(NTK_out, NO2_out, NO3_out, na.rm=!((is.na(NTK_out)|is.na(NO3_out))))\n  )\nN_P_loire_bretagne &lt;-N_P_loire_bretagne %&gt;%\n  mutate(\n    #Computes yields \n    Pt_yield = (1-Pt_out/Pt_in)*100, \n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    NGL_yield_reported = (1-NGL_out_reported/NGL_in_reported)*100,\n    DBO5_yield =(1-DBO5_out/DBO5_in)*100, \n    DCO_yield =(1-DCO_out/DCO_in)*100,\n    MES_yield =(1-MES_out/MES_in)*100,\n    #nutrient ratios\n    N_P_ratio_in = NGL_in/Pt_in, \n    N_P_ratio_out = NGL_out/Pt_out,\n    DCO_DBO5_ratio_in = DCO_in/DBO5_in,\n    DCO_DBO5_ratio_out = DCO_out/DBO5_out,\n    DBO5_N_ratio_in = DBO5_in/NGL_in,\n    DBO5_N_ratio_out = DBO5_out/NGL_out,\n    DBO5_Pt_ratio_in = DBO5_in/Pt_in,\n    DBO5_Pt_ratio_out = DBO5_out/Pt_out\n  )\n\n\n\n\nCode\n#recompute basin values (flows, yields, ratios..)\nbasin_N_P_loire_bretagne &lt;- f_basin_flows(N_P_loire_bretagne)\nbasin_N_P_loire_bretagne &lt;- f_all_nutrient_ratios_basin(basin_N_P_loire_bretagne, N_P_loire_bretagne)\nbasin_N_P_loire_bretagne &lt;- f_all_yields_basin(basin_N_P_loire_bretagne, N_P_loire_bretagne)\nbasin_N_P_loire_bretagne &lt;- f_year_categories(basin_N_P_loire_bretagne)\n\n#recompute basin x PE values (flows, yields, ratios..)\nbasin_PE_N_P_loire_bretagne &lt;- f_basin_PE_flows(N_P_loire_bretagne)\nbasin_PE_N_P_loire_bretagne &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_loire_bretagne, N_P_loire_bretagne)\nbasin_PE_N_P_loire_bretagne &lt;- f_all_yields_basin_PE(basin_PE_N_P_loire_bretagne, N_P_loire_bretagne)\nbasin_PE_N_P_loire_bretagne &lt;- f_year_categories(basin_PE_N_P_loire_bretagne)\n\n\n\n\n\n\n\n\n\n\nCapacities distribution\n\nReporting EvolutionLarge categoriesHistogramCumulative distribution\n\n\n\n\nCode\ntemp &lt;- N_P_loire_bretagne %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    capacity = sum(capacity, na.rm = T)/10^6, #capacity in million PE\n    nb_WWTP = n()\n  )\n\nn_min &lt;- first(temp$nb_WWTP)\nn_max &lt;- last(temp$nb_WWTP)\ncapacity_min &lt;- round(first(temp$capacity), digits=1)\ncapacity_max &lt;- round(last(temp$capacity), digits=1)\n\n\nIn the basin presentation, we said that there are about 7 000 operating Waste Water Treatment Plants, In the graph below, the number of reported facilities is about 3 700 for the years 2015-2020 and 3 000 in 2000. We thus miss more than half of the facilities, mostly very small facilities.\nHowever, even with the hypothesis that all of these unreported facilities have a capacity of 200 Population Equivalent, probably leading to an overestimation, this would result in a total unreported capacity of 0.9 M Population Equivalent. Compared to the total reported capacity of 18-19 M Population Equivalent in our data, this represents only 5% of unreported capacity.\nLikewise, even though the number of listed plants in the data base increases from 1034 to 3703 (a 258% increase) between 2005 and 2020, the total capacity only increases by 26% from 15.1 to 19 million Population Equivalent.\nThis highlights the fact that unreported plants are mostly small and that the plant size distribution is highly skewed, which is discussed in the following 3 tabs.\n\n\nCode\ncoef &lt;- max(temp$capacity)/max(temp$nb_WWTP)\nggplot(temp) +\n  geom_line(\n    aes(\n      Year, nb_WWTP, \n      color = \"number of reported facilities (left)\"\n      )\n    ) + \n  geom_line(\n    aes(\n      Year, capacity/coef, \n      color = \"total reported capacity (right)\"\n      )\n    ) + \n  scale_y_continuous(\n    limits = c(0, NA),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, \n        name=\"million Population Equivalent\"\n        )\n    ) +\n  labs(\n    title = \"Evolution of the reporting in the database\",\n    subtitle = \"in terms of number of facilities reported and total reported capacity\",\n    y=\"\", x=\"\", color=\"\", caption = Source\n  ) +\n  theme(\n    legend.position = c(0.5, 0.5)\n  )\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_loire_bretagne %&gt;%\n  filter(is.na(capacity)==F) %&gt;%\n  select(Year, capacity, PE_bin) %&gt;%\n  group_by(Year, PE_bin) %&gt;%\n  summarise(\n    `capacity (million PE)` = sum(capacity)/10^6,\n    `number of stations` = n()\n  ) %&gt;% \n  gather(key=capacity_or_n, value = value, `capacity (million PE)`, `number of stations`)\n\n\n\nAbsoluteRelative\n\n\n\n\nCode\nggplot(temp) + \n  geom_area(aes(Year, value, fill=PE_bin)) + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  scale_fill_viridis(discrete = T) +\n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"For each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) + \n  geom_area(aes(Year, value, fill=PE_bin), position = \"fill\") + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  scale_fill_viridis(discrete = T) +\n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"Proportion of each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_loire_bretagne %&gt;% filter(Year==Year_analysis)\nggplot(temp) + \n  geom_histogram(\n    aes(\n      capacity, fill = \"Nb of facilities\")\n    , \n    n=100, alpha=.4, stat=\"density\"\n    ) +\n  geom_histogram(\n    aes(\n      capacity, weight = capacity, \n      fill=\"Nb of facilities weighted by capacity\"\n      ),\n    n=100, alpha=.4, stat=\"density\"\n    ) +\n  theme(\n    legend.position = c(0.7,0.8),\n  ) +\n  labs(\n    x=\"Waste Water Treatment Plant Capacity \\n(Population Equivalent)\",\n    y=\"Distribution density\",\n    fill=\"Distribution of\",\n    title = paste(\"WWTP capacities distribution,\", as.character(Year_analysis)),\n    subtitle = \"raw of weighted by capacity\"\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    )\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_loire_bretagne %&gt;% \n  ungroup() %&gt;%\n  filter(\n    Year==Year_analysis\n    ) %&gt;% \n  select(\n    code_WWTP, name_WWTP, capacity\n    ) %&gt;%\n  filter(\n    is.na(capacity) == F\n    ) %&gt;%\n  arrange(\n    desc(capacity)\n    ) %&gt;%\n  mutate( \n    cumulative_capacity = cumsum(capacity)/10^6,\n    rank_STEU = rank(-capacity, ties.method = \"first\"),\n    percent_cumulative_capacity = round(cumulative_capacity/sum(capacity/10^6)*100, digits = 1),\n    percent_rank = round(rank_STEU/n()*100, digits = 1)\n    ) \n\nf_save_csv_files(\n  temp %&gt;% mutate(basin = \"Loire-Bretagne\"), \n  \"output_data/zipf_law/\",\n  \"zipf_law_04_loire_bretagne.csv\"\n)\n\ncoef &lt;- max(temp$rank_STEU)/100\ncoef2 &lt;- max(temp$cumulative_capacity)/100\n\n\n\nNb of WWTPs vs Capacity (linear scale)Nb of WWTPs vs Capacity (log scale)Zipf law\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(\n      x = percent_rank, y = percent_cumulative_capacity\n      )\n    ) + \n  labs(\n    title = paste(\"Cumulative distribution,\", as.character(Year_analysis)),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) +\n  scale_x_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    sec.axis = sec_axis(\n      trans=~.*coef2, \n      name=\"cumulative capacity \\n(millions PE)\"\n      )\n    ) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(\n      x = percent_rank, y = percent_cumulative_capacity\n      )\n    ) + \n  labs(\n    title = paste(\"Cumulative distribution,\", as.character(Year_analysis)),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, \n        name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions Population Equivalent)\"\n        )\n    ) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_point(\n    aes(\n      x = rank_STEU, y = capacity\n      )\n    ) + \n  labs(\n    title = paste(\"WWTP capacity vs rank,\", as.character(Year_analysis)),\n    subtitle = \"looking for a Zipf law\",\n    x=\"Waste Water Treatment Plant \\n(ranked by capacity)\",\n    y=\" Waste Water Treatment Plant capacity\\n(Population Equivalent)\"\n    ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    ) + \n  scale_y_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\nPollution flows\n\nData quality : reporting ratesBasin scaleReal flow extrapolation\n\n\nNavigate through tabs below to see details for each pollutant. For each pollutant, we present reporting for incoming and outgoing pollution, in terms of number of WWTP reporting the data or in terms of installed capacity.\nIn terms of capacity and starting 2010, pollution reporting is very good for NTK, PT, DBO5, DCO and MES (&gt;95%). The same is true for outgoing NH4, NO2 and NO3. Starting 2015, incoming NH4 reporting is quite good. Incoming NO2 and NO3 reporting are poorly reported, but since they represent a negligible share of incoming total N load, it is not a great concern. Its is more problematic for incoming NH4. PO4 is very poorly reported (~10% of capacity), so we will not analyse its flows.\n\n\nCode\n#function for plots : to be finished\nf_graph_reporting_nutrients &lt;- function(pollution_in, pollution_out){\n  temp &lt;- N_P_loire_bretagne %&gt;%\n    select(\n      Year, capacity, \n      !!as.symbol(pollution_in), !!as.symbol(pollution_out)\n      ) %&gt;%\n    mutate(\n      nutrient_in = is.na(!!as.symbol(pollution_in))==F,\n      nutrient_out = is.na(!!as.symbol(pollution_out))==F\n      ) %&gt;%\n    gather(\n      key=in_out_flow, \n      value = `reported pollution`, \n      nutrient_in, nutrient_out\n      ) %&gt;%\n    group_by(\n      Year, in_out_flow, `reported pollution`\n      ) %&gt;%\n    summarise(\n      `number of WWTP`=n(), \n      `capacity (million PE)` = sum(capacity, na.rm=T)/10^6\n      ) %&gt;%\n    gather(\n      key=n_or_capacity, \n      value = value, \n      `number of WWTP`, `capacity (million PE)`\n      ) %&gt;%\n    #renaming labels\n    mutate(\n      in_out_flow = case_when(\n        in_out_flow == \"nutrient_in\" ~ pollution_in,\n        in_out_flow == \"nutrient_out\" ~ pollution_out,\n      )\n    )\n\n  g &lt;- ggplot(temp) +\n    geom_area(aes(Year, value, fill=`reported pollution`)) +\n    facet_grid(\n      n_or_capacity~in_out_flow, \n      scales=\"free_y\", switch = \"y\") +\n    labs(\n      y=\"\", x=\"\",\n      title = \"Reporting of nutrient inflows (left) and outflows (right)\",\n      subtitle = \"In terms of total capacity (top) and nb of WWTP (bottom)\",\n      caption = Source\n      ) \n\n  return(g)\n}\n\n\n\nNGLNTKNH4NO2NO3PtPO4DBO5DCOMES\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NGL_in\", \"NGL_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NTK_in\", \"NTK_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NH4_in\", \"NH4_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NO2_in\", \"NO2_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NO3_in\", \"NO3_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"Pt_in\", \"Pt_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"PO4_in\", \"PO4_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"DBO5_in\", \"DBO5_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"DCO_in\", \"DCO_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"MES_in\", \"MES_out\")\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#changing the graph function to change the subtitle (before data cleaning =&gt; after data cleaning)\nf_graph_nutrient &lt;- function(dataset, nutrient_in, nutrient_out, label, legend_x, legend_y){\n  p &lt;- ggplot(dataset) + \n    #nutrient inflow\n    geom_line(\n      aes(\n        Year, \n        !!as.symbol(nutrient_in), \n        color=nutrient_in\n        )\n      ) + \n    #nutrient outflow\n    geom_line(\n      aes(\n        Year,\n        !!as.symbol(nutrient_out), \n        color = nutrient_out\n        )\n      ) +\n    ylim(0, NA) +\n    theme(\n      legend.position = c(legend_x, legend_y), \n      legend.title = element_blank()\n      ) +\n    labs(\n      x=\"\", y=paste(\"kt of\", label) , \n      title = paste(\"Reported\", label, \"flows in Loire-Bretagne WWTPs\") ,\n      subtitle = \"reported, not necessarily actual ; here after data cleaning\", \n      caption = Source\n      ) \n  return(p)\n}\n\n\n\nNGLNTKNH4NO2NO3All N% All N forms% NH4 / NTKPt% PO4 / PtDBO5DCOMES\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"NGL_in\", \"NGL_out\", \"NGL\", 0.7, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"NTK_in\", \"NTK_out\", \"NTK\", 0.7, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"NH4_in\", \"NH4_out\", \"NH4\", 0.7, 0.2)\n\n\n\n\n\n\n\nDue to the very low quantities of NO2, noise remains in the data even after data cleaning but the order of magnitude can be seen.\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"NO2_in\", \"NO2_out\", \"NO2\", 0.6, 0.7)\n\n\n\n\n\n\n\nDue to the very low quantities of NO3, noise remains in the data even after data cleaning, but the order of magnitude can be seen.\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"NO3_in\", \"NO3_out\", \"NO3\", 0.4, 0.5)\n\n\n\n\n\n\n\nReleased total N has been halved, mostly due to decrease in outgoing NTK. Released NO3 remained roughly the same.\n\n\nCode\n# N in data preparation\ntemp &lt;- basin_N_P_loire_bretagne %&gt;% select(Year, NTK_in, NO2_in, NO3_in) %&gt;%\n  gather(key = N_type, value = kt, NTK_in, NO2_in, NO3_in)\n# N out preaparation\ntemp2 &lt;- basin_N_P_loire_bretagne %&gt;% \n  #renaming for the legend\n  select(Year, NTK=NTK_out, NO2=NO2_out, NO3=NO3_out) %&gt;%\n  gather(key = N_type, value = kt, NTK, NO2, NO3)\n\n#graphs\nplot_grid(\n  ggplot(temp) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_loire_bretagne, \n      aes(\n        Year, NH4_in\n        )\n      ) +\n    theme(legend.position = \"none\") +\n    annotate(\"text\", x=2007, y=10, label=\"NH4\") +\n    labs(\n      x=\"\", y=\"kt of N\", \n      title = \"Reported N flows in Loire-Bretagne WWTPs\",\n      subtitle = \"Inflows\",\n      caption=\"\"\n    ) +\n    ylim(0, 50),\n  ggplot(temp2) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_loire_bretagne, \n      aes(\n        Year, NH4_out\n        )\n      ) +\n    theme(\n      legend.position = c(0.6, 0.6), \n      legend.title = element_blank()\n      ) +\n    annotate(\n      \"text\", label=\"NH4\", \n      x=2007, y=1.5\n      ) +\n    labs(\n      x=\"\", y=\"\", \n      title = \"\",\n      subtitle = \"Outflows\",\n      caption=Source\n    ) + \n    ylim(0, 50),\n  align = \"hv\"\n)\n\n\n\n\n\n\n\n\n\nCode\n# N in data preparation\ntemp &lt;- basin_N_P_loire_bretagne %&gt;% select(Year, NTK_in, NO2_in, NO3_in) %&gt;%\n  gather(key = N_type, value = kt, NTK_in, NO2_in, NO3_in)\n# N out preaparation\ntemp2 &lt;- basin_N_P_loire_bretagne %&gt;% \n  #renaming for the legend\n  select(Year, NTK=NTK_out, NO2=NO2_out, NO3=NO3_out) %&gt;%\n  gather(key = N_type, value = kt, NTK, NO2, NO3)\n\n#graphs\nplot_grid(\n  #inflow\n  ggplot(temp) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        ),\n      position = \"fill\"\n      ) +\n    geom_line(\n      data = basin_N_P_loire_bretagne, \n      aes(\n        Year, NH4_in/(NTK_in+NO3_in+NO2_in)\n        )\n      ) +\n    theme(legend.position = \"none\") +\n    annotate(\"text\", x=2007, y=0.45, label=\"NH4\") +\n    labs(\n      x=\"\", y=\"kt of N\", \n      title = \"Reported share N flows in Loire-Bretagne WWTPs\",\n      subtitle = \"Inflows\",\n      caption=\"\"\n    ),\n  #outflow\n  ggplot(temp2) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        ),\n      position=\"fill\"\n      ) +\n    geom_line(\n      data = basin_N_P_loire_bretagne, \n      aes(\n        Year, NH4_out/(NTK_out+NO3_out+NO2_out)\n        )\n      ) +\n    theme(\n      legend.position = \"bottom\", \n      legend.title = element_blank()\n      ) +\n    annotate(\n      \"text\", label=\"NH4\", \n      x=2007, y=0.4\n      ) +\n    labs(\n      x=\"\", y=\"\", \n      title = \"\",\n      subtitle = \"Outflows\",\n      caption=Source\n    ),\n  align = \"hv\", axis=\"tblr\"\n)\n\n\n\n\n\n\n\nJust for the few WWTP that report both NH4 and NTK.\n\n\nCode\ntemp &lt;- N_P_loire_bretagne %&gt;%\n  filter(\n    is.na(NH4_in)==F,\n    is.na(NH4_out)==F,\n    is.na(NTK_in)==F,\n    is.na(NTK_out)==F\n    ) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    NH4_in = sum(NH4_in, na.rm=T),\n    NH4_out = sum(NH4_out, na.rm=T),\n    NTK_in = sum(NTK_in, na.rm=T),\n    NTK_out = sum(NTK_out, na.rm=T),\n    p_NH4_in = NH4_in/NTK_in*100,\n    p_NH4_out = NH4_out/NTK_out*100\n  )\n\nggplot(temp) +\n  geom_line(aes(Year, p_NH4_in, color=\"inflow\")) +\n  geom_line(aes(Year, p_NH4_out, color=\"outflow\")) +\n  ylim(0, 100) +\n  theme(legend.position = c(0.3, 0.3)) +\n  labs(\n    y=\"%\", x=\"\", color=\"\",\n    title = \"Share of NH4 in NTK\",\n    subtitle = \"reported, no necessarily actual ; here after data cleaning\",\n    caption=Source\n    )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"Pt_in\", \"Pt_out\", \"Pt\", 0.4, 0.5)\n\n\n\n\n\n\n\nJust for the few (~ 10%) WWTP that report it.\n\n\nCode\ntemp &lt;- N_P_loire_bretagne %&gt;%\n  filter(\n    is.na(PO4_in)==F,\n    is.na(PO4_out)==F\n    ) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    PO4_in = sum(PO4_in, na.rm=T),\n    PO4_out = sum(PO4_out, na.rm=T),\n    Pt_in = sum(Pt_in, na.rm=T),\n    Pt_out = sum(Pt_out, na.rm=T),\n    p_PO4_in = PO4_in/Pt_in*100,\n    p_PO4_out = PO4_out/Pt_out*100\n  )\nggplot(temp) +\n  geom_line(aes(Year, p_PO4_in, color=\"inflow\")) +\n  geom_line(aes(Year, p_PO4_out, color=\"outflow\")) +\n  ylim(0, 100) +\n  theme(legend.position = c(0.3, 0.3)) +\n  labs(\n    y=\"%\", x=\"\", color=\"\",\n    title = \"Share of PO4 in Pt\",\n    subtitle = \"reported, no necessarily actual ; here after data cleaning\",\n    caption=Source\n    )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"DBO5_in\", \"DBO5_out\", \"DBO5\", 0.4, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"DCO_in\", \"DCO_out\", \"DCO\", 0.4, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_loire_bretagne, \"MES_in\", \"MES_out\", \"MES\", 0.4, 0.5)\n\n\n\n\n\n\n\n\n\n\nWe extrapolate the flows at the basin scale for the plants not reporting them. For that, we use a coefficient proportionate to the unreported capacity of the given nutrient flow (see data quality tab).\n\nCoefficient calculationPtNGLDBO5DCOMES\n\n\nWe compute in terms of installed capacity the reported and unreported flows for NGL, Pt, DBO5, DCO and MES. We do this for each year and for each capacity category.\n\n\nCode\n#create file of reported \ntemp &lt;- N_P_loire_bretagne %&gt;%\n  select(\n    Year, PE_bin, capacity, \n    Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    ) %&gt;%\n  #spots unreported values for each nutrient flow\n  mutate(\n    across(\n      c(Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out),\n      ~ is.na(.x)==F\n      )\n    ) %&gt;%\n  #gather to ba able to then group by flow and count capacity\n  gather(\n    key=nutrient_flow, \n    value = reported_pollution, \n    Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    )  %&gt;%\n  #count reported capacity and unreported capacity for each (Year, capacity category, nutrient flow)\n  group_by(\n    Year, PE_bin, nutrient_flow, reported_pollution\n    ) %&gt;%\n  summarise(\n    capacity = sum(capacity, na.rm=T)/10^6\n    ) %&gt;%\n  #creates reported/unreported names for each nutrient flow and spreads into columns\n  mutate(\n    nutrient_flow = case_when(\n      reported_pollution == T ~ paste0(nutrient_flow, \"_reported\"),\n      reported_pollution == F ~ paste0(nutrient_flow, \"_unreported\")\n    )\n  ) %&gt;%\n  select(-reported_pollution) %&gt;%\n  spread(nutrient_flow, capacity)\n\n# NA values replaced by 0 for future coeff computation\ntemp[is.na(temp)] &lt;- 0\n\n\nFrom this we compute proportionate coefficient to extrapolate real flows. We are not able to do this for the stations that do not report their nominal capacity.\n\n\nCode\ntemp &lt;- temp %&gt;%\n  mutate(\n    #Pt\n    Pt_in_coeff = (Pt_in_reported + Pt_in_unreported)/Pt_in_reported,\n    Pt_out_coeff = (Pt_out_reported + Pt_out_unreported)/Pt_out_reported,\n    #NGL\n    NGL_in_coeff = (NGL_in_reported + NGL_in_unreported)/NGL_in_reported,\n    NGL_out_coeff = (NGL_out_reported + NGL_out_unreported)/NGL_out_reported,\n    #DBO5\n    DBO5_in_coeff = (DBO5_in_reported + DBO5_in_unreported)/DBO5_in_reported,\n    DBO5_out_coeff = (DBO5_out_reported + DBO5_out_unreported)/DBO5_out_reported,\n    #DCO\n    DCO_in_coeff = (DCO_in_reported + DCO_in_unreported)/DCO_in_reported,\n    DCO_out_coeff = (DCO_out_reported + DCO_out_unreported)/DCO_out_reported,\n    #MES\n    MES_in_coeff = (MES_in_reported + MES_in_unreported)/MES_in_reported,\n    MES_out_coeff = (MES_out_reported + MES_out_unreported)/MES_out_reported,\n  ) %&gt;%\n  select(\n    -c(\n      Pt_in_reported, Pt_in_unreported,\n      Pt_out_reported, Pt_out_unreported,\n      NGL_in_reported, NGL_in_unreported,\n      NGL_out_reported, NGL_out_unreported,\n      DBO5_in_reported, DBO5_in_unreported,\n      DBO5_out_reported, DBO5_out_unreported,\n      DCO_in_reported, DCO_in_unreported, \n      DCO_out_reported, DCO_out_unreported, \n      MES_in_reported, MES_in_unreported, \n      MES_out_reported, MES_out_unreported\n      )\n    )\n\n#replace Inf values by 1 (when divided by 0)\ntemp[temp == Inf] &lt;- 1\n#replace NAN values by 1 (case of the unerported capacities)\ntemp[is.na(temp)] &lt;- 1\n\n\nWith these coefficients we compute the adjusted flows\n\n\nCode\n#file with reported flows and adjustment coefficient\ntemp2 &lt;- left_join(\n  basin_PE_N_P_loire_bretagne %&gt;%\n    #selects only flows and not yields or ratios\n    select(\n      Year, PE_bin, \n      Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    ),\n  temp, by=c(\"Year\", \"PE_bin\")\n)\n\n#computes adjusted flows\ntemp2 &lt;- temp2 %&gt;%\n  mutate(\n    #Pt\n    Pt_in_adj = round(Pt_in_coeff*Pt_in, 5),\n    Pt_out_adj = round(Pt_out_coeff*Pt_out, 5),\n    #NGL\n    NGL_in_adj = round(NGL_in_coeff*NGL_in, 5),\n    NGL_out_adj = round(NGL_out_coeff*NGL_out, 5),\n    #DBO5\n    DBO5_in_adj = round(DBO5_in_coeff*DBO5_in, 5),\n    DBO5_out_adj = round(DBO5_out_coeff*DBO5_out, 5),\n    #DCO\n    DCO_in_adj = round(DCO_in_coeff*DCO_in, 5),\n    DCO_out_adj = round(DCO_out_coeff*DCO_out, 5),\n    #MES\n    MES_in_adj = round(MES_in_coeff*MES_in, 5),\n    MES_out_adj = round(MES_out_coeff*MES_out, 5)\n  ) %&gt;%\n  #we remove coefficients and unajusted flows\n  select(\n    -c(\n      Pt_in, Pt_in_coeff, Pt_out, Pt_out_coeff,\n      NGL_in, NGL_in_coeff, NGL_out, NGL_out_coeff,\n      DBO5_in, DBO5_in_coeff, DBO5_out, DBO5_out_coeff,\n      DCO_in, DCO_in_coeff, DCO_out, DCO_out_coeff, \n      MES_in, MES_in_coeff, MES_out, MES_out_coeff\n    )\n  )\n\n\nWe add these adjusted flows to the main files reporting flows at the basin scale\n\n\nCode\n#adding adjusted flows to the basin x capacity files\nbasin_PE_N_P_loire_bretagne &lt;- left_join(\n  basin_PE_N_P_loire_bretagne, temp2, by=c(\"Year\", \"PE_bin\")\n)\n\n#aggregating adjusted flows at the basin scale without the capacity categories\ntemp &lt;- temp2 %&gt;%\n  select(-PE_bin) %&gt;%\n  group_by(Year) %&gt;%\n  summarise_all(~signif(sum(.x), 3))\n\n#adding adjusted flows to the basin files\nbasin_N_P_loire_bretagne &lt;- left_join(\n  basin_N_P_loire_bretagne, temp, by=\"Year\"\n)\n\n\nWe plot the comparison reported / adjusted in the following graphs.\n\n\nCode\nf_graph_adjusted &lt;- function(basin_file, basin_PE_file, nutrient_adjusted, nutrient_reported, nutrient_label){\n  g &lt;- plot_grid(\n    ggplot(basin_PE_file) +\n      geom_line(\n        data = basin_file,\n        aes(Year, !!as.symbol(nutrient_adjusted)), \n        color=\"black\", size=1\n        ) + \n      geom_area(\n        aes(Year, !!as.symbol(nutrient_reported), fill=PE_bin), \n        alpha=.7\n        ) + \n      theme(legend.position = \"none\") +\n      labs(\n        x=\"\", y=\"kt per year\",\n        caption = \"\\n\",\n        title = paste(\"Adjusted\", nutrient_label, \"flows\")\n    ),\n    ggplot(basin_PE_file) +\n      geom_line(\n        aes(Year, !!as.symbol(nutrient_adjusted), color=PE_bin), \n        size=1\n        ) + \n      geom_area(\n        aes(Year, !!as.symbol(nutrient_reported), fill=PE_bin), \n        alpha=.7\n        ) + \n      theme(legend.position = \"none\") +\n      facet_wrap(vars(PE_bin), scales=\"free\") +\n      labs(\n        x=\"\", y=\"\",\n        caption = Source,\n        title = \"\",\n        subtitle = \"line: adjusted flow ; area: reported flow\"\n      ),\n    rel_widths = c(0.3, 0.7)\n  )\n  return(g)\n}\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_loire_bretagne, \n  basin_PE_N_P_loire_bretagne,\n  \"Pt_in_adj\", \"Pt_in\", \"incoming Pt\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_loire_bretagne, \n  basin_PE_N_P_loire_bretagne,\n  \"Pt_out_adj\", \"Pt_out\", \"discharged Pt\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_loire_bretagne, \n  basin_PE_N_P_loire_bretagne,\n  \"NGL_in_adj\", \"NGL_in\", \"incoming NGL\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_loire_bretagne, \n  basin_PE_N_P_loire_bretagne,\n  \"NGL_out_adj\", \"NGL_out\", \"discharged NGL\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_loire_bretagne, \n  basin_PE_N_P_loire_bretagne,\n  \"DBO5_in_adj\", \"DBO5_in\", \"incoming DBO5\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_loire_bretagne, \n  basin_PE_N_P_loire_bretagne,\n  \"DBO5_out_adj\", \"DBO5_out\", \"discharged DBO5\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_loire_bretagne, \n  basin_PE_N_P_loire_bretagne,\n  \"DCO_in_adj\", \"DCO_in\", \"incoming DCO\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_loire_bretagne, \n  basin_PE_N_P_loire_bretagne,\n  \"DCO_out_adj\", \"DCO_out\", \"discharged DCO\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_loire_bretagne, \n  basin_PE_N_P_loire_bretagne,\n  \"MES_in_adj\", \"MES_in\", \"incoming MES\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_loire_bretagne, \n  basin_PE_N_P_loire_bretagne,\n  \"MES_out_adj\", \"MES_out\", \"discharged MES\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRatios\n\nBasin scale\n\n\n\nN:PDCO:DBO5DBO5:N vs DBO5:P\n\n\n\n\nCode\n#temporal P/N ratio\nggplot(basin_N_P_loire_bretagne) + \n  geom_line(aes(Year, N_P_ratio_in, color=\"N:P in\")) + \n  geom_line(aes(Year, N_P_ratio_out, color = \"N:P out\")) + \n  ylim(0, NA) +\n  theme(\n    legend.position = c(0.7, 0.6)\n  ) +\n  labs(\n    x=\"\", y=\"N:P ratio\",\n    title = \"N:P ratio in Loire-Bretagne basin\",\n    subtitle = \"increase over time reflect phosphate detergent ban\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_loire_bretagne) + \n  geom_line(aes(Year, DCO_DBO5_ratio_in, color=\"DCO:DBO5 in\")) + \n  geom_line(aes(Year, DCO_DBO5_ratio_out, color = \"DCO:DBO5 out\")) + \n  ylim(0, NA) +\n  theme(\n    legend.position = c(0.7, 0.6)\n  ) +\n  labs(\n    x=\"\", y=\"DCO:DBO5 ratio\",\n    title = \"DCO:DBO5 ratio in Loire-Bretagne basin\",\n    subtitle = \"decrease in outflow shows biodegradation\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_loire_bretagne) + \n  geom_point(\n    aes(\n      DBO5_N_ratio_in, DBO5_P_ratio_in, \n      color=Year_category\n      )\n    ) +\n  geom_point(\n    aes(\n      DBO5_N_ratio_out, DBO5_P_ratio_out, \n      color=Year_category\n        )\n    ) +\n  ylim(0, NA) +\n  annotate(\n    geom=\"text\", label =\"inflow\",\n    x=4, y=25\n  ) +\n  annotate(\n    geom=\"text\", label =\"outflow\",\n    x=1.3, y=8\n  ) +\n  labs(\n    x=\"DBO5:Pt ratio\", y=\"DBO5:NGL ratio\",\n    title = \"DBO5:NGL vs DBO5:Pt ratio in Loire-Bretagne basin WWTPs\",\n    subtitle = \"decrease in outflow shows biodegradation\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nBasin yield\n\nBasinsBasin x Capacity\n\n\n\n\nCode\nggplot(basin_N_P_loire_bretagne) + \n  geom_line(aes(Year, Pt_yield, color=\"P\")) + \n  geom_line(aes(Year, NGL_yield, color = \"N\")) + \n  geom_line(aes(Year, DBO5_yield, color = \"DBO5\")) +\n  geom_line(aes(Year, DCO_yield, color = \"DCO\")) +\n  geom_line(aes(Year, MES_yield, color = \"MES\")) +\n  ylim(0,100) +\n  theme(legend.position = c(0.7, 0.3)) +\n  labs(\n    title = \"Global abatement rate of Loire-Bretagne WWTPs\", \n    x=\"\", y=\"Yield (%)\", color=\"\",\n    caption = Source\n    )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE &lt;- function(dataset, nutrient_yield, nutrient_label){\n  g &lt;- ggplot(dataset %&gt;% filter(PE_bin !=\"unreported PE\")) + \n    geom_line(aes(Year, !!as.symbol(nutrient_yield), color=PE_bin)) + \n    ylim(0,100) +\n    theme(legend.position = c(0.7, 0.3)) +\n    labs(\n      title = paste(\"Global\", nutrient_label, \"yield of Loire-Bretagne basin\"), \n      subtitle = \"by capacity (population equivalent)\",\n      x=\"\", y=\"Yield (%)\", color=\"\",\n      caption = Source\n      )\n  return(g)\n}\n\n\n\nPtNGLDBO5DCOMES\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_loire_bretagne %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"Pt_yield\", \"Pt\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_loire_bretagne %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"NGL_yield\", \"NGL\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_loire_bretagne %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"DBO5_yield\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_loire_bretagne %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"DCO_yield\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_loire_bretagne %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"MES_yield\", \"MES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nEtat des lieux 2019\n\nReporting of the pointsA1, A2 and A5 share in outflowComparison with our results\n\n\nWe load the “Etat des lieux 2019” file, downloaded from this page. The data reported in this expert assessment allosw us to:\n\ncheck if we obtain the same results with our method\nget some data about sewers losses and overflows (points A1, A2 and A5), reported in the Etat des lieux but not in the data we used\n\n\n\nCode\npath_source &lt;- \"source_data/04_loire_bretagne/etat_des_lieux/\"\nSource &lt;- \"Etat des lieux Loire-Bretagne, 2019\\nComputation by Thomas Starck\"\n\netat_des_lieux &lt;- \n  read_excel(\n    paste0(\n      path_source, \"Matrice_des_rejets_EDL2019.xlsx\"\n      ),\n    sheet=\"données\"\n    )\n\nN_P_etat_des_lieux &lt;- etat_des_lieux %&gt;%\n  select(\n    collectivity_industry = `collectivité ou industrie`,\n    code_WWTP = `Code SANDRE STEU ou usine`,\n    INSEE_DEP = Département,\n    INSEE_COM = `Code INSEE commune`,\n    name_commune = `Nom commune`,\n    name_WWTP = `Nom ouvrage ou raison sociale`,\n    point_SANDRE = `Code SANDRE type point de rejet coll`,\n    capacity = `Capacité STEU EH`,\n    lat_discharge = `Coordonnée x rejet`,\n    long_discharge = `Coordonnée y rejet`,\n    network_type = `Type réseau retenu coll`,\n    flow_in = `Volume entrée STEU m3/j`,\n    flow_out = `Volume sortie STEU ou point de rejet direct m3/j`,\n    DBO5_in = `DBO5 entrée STEU kg/j`,\n    DBO5_out = `DBO5 sortie STEU ou point de rejet direct ou indus kg/j`,\n    DCO_in = `DCO entrée STEU kg/j`,\n    DCO_out = `DCO sortie STEU ou point de rejet direct ou indus kg/j`,\n    NGL_in = `NGL entrée STEU kg/j`,\n    NGL_out = `NGL sortie STEU ou point de rejet direct ou indus kg/j`,\n    Pt_in = `Pt entrée STEU kg/j`,\n    Pt_out = `Pt sortie STEU ou point de rejet direct ou indus kg/j`\n  ) %&gt;% \n  filter(\n    collectivity_industry == \"C\"\n  )\n\n\nWe select the different regulatory points in the file (A1, A2, A3, A4 and A5). Discharge without treatment corresponds to A1, A2 and A3 points. Caution : for A1 point there can be several discharge points for 1 unique station.\nA1, A2 and A5 points are reported for 1, 7 and 2% of the nearly 8000 WWTP of the basin. Yet this represent 30, 45 and 40% of the total installed capacity (same for incoming NGL and Pt flows).\n\n\nCode\nf_discharge_points &lt;- function(dataset){\n  A3 &lt;- dataset %&gt;% filter(point_SANDRE == \"A4\")\n  A4 &lt;- dataset %&gt;% filter(point_SANDRE == \"A4\")\n  A2 &lt;- dataset %&gt;% filter(point_SANDRE == \"A2\")\n  A1 &lt;- dataset %&gt;% filter(point_SANDRE == \"A1\")\n  A5 &lt;- dataset %&gt;% filter(point_SANDRE == \"A5\")\n  \n  discharge_points &lt;- \n    data.frame(\n      point = c(\"A1\", \"A2\", \"A5\", \"A3\", \"A4\"), \n      n_WWTP = c(\n        #A1\n        nrow(A1 %&gt;% select(code_WWTP) %&gt;% distinct()),\n        #A2\n        nrow(A2),\n        #A5\n        nrow(A5),\n        #A3\n        nrow(A3),\n        #A4\n        nrow(A3)\n      ),\n      capacity = c(\n        #A1\n        round(sum(A1 %&gt;% select(code_WWTP, capacity) %&gt;% distinct() %&gt;% pull(capacity))/10^6, 1),\n        #A2\n        round(sum(A2$capacity)/10^6, 1),\n        #A5\n        round(sum(A5$capacity)/10^6, 1),\n        #A3\n        round(sum(A3$capacity)/10^6, 1),\n        #A4\n        round(sum(A4$capacity)/10^6, 1)\n      ),\n      Pt_in = c(\n        #A1\n        round(sum(A1 %&gt;% select(code_WWTP, Pt_in) %&gt;% distinct() %&gt;% pull(Pt_in))*(365/10^6), 3),\n        #A2\n        round(sum(A2$Pt_in)*(365/10^6), 3),\n        #A5\n        round(sum(A5$Pt_in)*(365/10^6), 3),\n        #A3\n        round(sum(A3$Pt_in)*(365/10^6), 3),\n        #A4\n        round(sum(A4$Pt_in)*(365/10^6), 3)\n      ),\n      Pt_out = c(\n        #A1\n        round(sum(A1$Pt_out)*(365/10^6), 3),\n        #A2\n        round(sum(A2$Pt_out)*(365/10^6), 3),\n        #A5\n        round(sum(A5$Pt_out)*(365/10^6), 3),\n        #A3\n        round(sum(A3$Pt_out)*(365/10^6), 3),\n        #A4\n        round(sum(A4$Pt_out)*(365/10^6), 3)\n      ),\n      NGL_in = c(\n        #A1\n        round(sum(A1 %&gt;% select(code_WWTP, NGL_in) %&gt;% distinct() %&gt;% pull(NGL_in))*(365/10^6), 3),\n        #A2\n        round(sum(A2$NGL_in)*(365/10^6), 3),\n        #A5\n        round(sum(A5$NGL_in)*(365/10^6), 3),\n        #A3\n        round(sum(A3$NGL_in)*(365/10^6), 3),\n        #A4\n        round(sum(A4$NGL_in)*(365/10^6), 3)\n      ),\n      NGL_out = c(\n        #A1\n        round(sum(A1$NGL_out)*(365/10^6), 3),\n        #A2\n        round(sum(A2$NGL_out)*(365/10^6), 3),\n        #A5\n        round(sum(A5$NGL_out)*(365/10^6), 3),\n        #A3\n        round(sum(A3$NGL_out)*(365/10^6), 3),\n        #A4\n        round(sum(A4$NGL_out)*(365/10^6), 3)\n      )\n      )\n  return(discharge_points)\n}\n\nf_discharge_points_A &lt;- function(dataset, point_select){\n  #keep only point of interest\n  point_A &lt;- dataset %&gt;% filter(point_SANDRE == point_select)\n  \n  #keep the A3-A4 points associated with the stations concerned by our point of interes\n  list_WWTP &lt;- unique(point_A$code_WWTP)\n  discharge_points_A &lt;- dataset %&gt;% filter(code_WWTP %in% list_WWTP)\n  \n  #apply aggregating function\n  discharge_points_A &lt;- f_discharge_points(discharge_points_A) %&gt;%\n    filter(point %in% c(point_select, \"A3\", \"A4\"))\n  return(discharge_points_A)\n}\n\ntemp &lt;- N_P_etat_des_lieux %&gt;% \n  select(\n    code_WWTP, name_WWTP, capacity, point_SANDRE,\n    NGL_in, NGL_out, Pt_in, Pt_out\n    ) \n#here still doule reporting in the different points to check consistency (ie A3 and A4, or incoming points). We remove them after\ndischarge_points_all &lt;- f_discharge_points(temp)\ndischarge_points_A5 &lt;- f_discharge_points_A(temp, \"A5\")\ndischarge_points_A1 &lt;- f_discharge_points_A(temp, \"A1\")\ndischarge_points_A2 &lt;- f_discharge_points_A(temp, \"A2\")\n\n#removing double reporting\nf_rm_A3_A4 &lt;- function(dataset){\n  dataset$Pt_in[dataset$point %in% c(\"A1\", \"A2\", \"A5\", \"A4\")] &lt;- NA\n  dataset$NGL_in[dataset$point %in% c(\"A1\", \"A2\", \"A5\", \"A4\")] &lt;- NA\n  dataset$Pt_out[dataset$point==\"A3\"] &lt;- NA\n  dataset$NGL_out[dataset$point==\"A3\"] &lt;- NA\n  return(dataset)\n}\ndischarge_points_A5 &lt;- f_rm_A3_A4(discharge_points_A5)\ndischarge_points_A1 &lt;- f_rm_A3_A4(discharge_points_A1)\ndischarge_points_A2 &lt;- f_rm_A3_A4(discharge_points_A2)\n#discharge_points_all &lt;- f_rm_A3_A4(discharge_points_all)\n#pas sûr de faire ça pour le dernier\n\n\n\nAbsoluteRelative\n\n\nProportion reported for regulatory each point\n\n\nCode\n#see reporting in terms of capacity, nb of WWTP, NGL and Pt flows\ntemp &lt;- discharge_points_all %&gt;%\n  select(point, n_WWTP, capacity, Pt_in, NGL_in) %&gt;%\n  gather(n_or_capacity, value, n_WWTP, capacity, Pt_in, NGL_in)\nggplot(temp) +\n  geom_col(aes(point, value, fill=point)) +\n  facet_wrap(vars(n_or_capacity), scales=\"free_y\") +\n  theme(legend.position = \"none\") +\n  labs(\n    x=\"regulatory point\", y=\"\",\n    title = \"Reporting of the different point\",\n    subtitle = \"capacity, NGL and PT are virtually the same\",\n    caption=Source\n  )\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- discharge_points_all %&gt;%\n  select(point, n_WWTP, capacity) %&gt;%\n  gather(n_or_capacity, value, n_WWTP, capacity) %&gt;%\n  spread(point, value) %&gt;%\n  select(-A4) %&gt;%\n  mutate(\n    across(\n      c(A1, A2, A5, A3), ~round(.x/A3*100, 0)\n    )\n  ) %&gt;%\n  select(-A3) %&gt;%\n  gather(point, value, A1, A2, A5) %&gt;%\n  mutate(\n    n_or_capacity = case_when(\n      n_or_capacity==\"capacity\"~\"in terms of total capacity\",\n      n_or_capacity==\"n_WWTP\"~\"in terms of nb of facilities\"\n    )\n  )\nggplot(temp) +\n  geom_col(aes(point, value, fill=point)) +\n  facet_wrap(vars(n_or_capacity), scales=\"free_y\") +\n  theme(legend.position = \"none\") +\n  labs(\n    x=\"regulatory point\", y=\"%\",\n    title = \"% of reporting of the regulatory points\",\n    subtitle = \"compared to A3 and A4 reporting\",\n    caption=Source\n  )\n\n\n\n\n\n\n\n\n\n\nDischarged pollution without treatment (A1, A2 and A5 points) represent 15% (9%, 4% and 2%) of to A3 incoming flow. This is true for both NGL and Pt.\nWhen compared to discharged flows A4, the figure is 130% (80%, 30%, 20%). This more than doubles the amount of pollution discharged to waters.\n\nPtNGL\n\n\n\n\nCode\nf_graph_points_Pt &lt;- function(dataset, point_selected){\n  temp &lt;- \n    data.frame(\n      A_A3 = round(\n        dataset$Pt_out[dataset$point==point_selected]/dataset$Pt_in[dataset$point==\"A3\"]*100, \n        0),\n      A_A4 = round(\n        dataset$Pt_out[dataset$point==point_selected]/dataset$Pt_out[dataset$point==\"A4\"]*100,\n        0)\n    ) %&gt;%\n    gather(\n      points, value, A_A3, A_A4\n      ) %&gt;%\n    mutate(\n      points = case_when(\n        points==\"A_A3\"~paste(point_selected, \"/ A3\"),\n        points==\"A_A4\"~paste(point_selected, \"/ A4\"),\n      )\n    )\n  \n  g &lt;- plot_grid(\n    ggplot(dataset) +\n      geom_col(aes(\"in\", Pt_in, fill=point)) +\n      geom_col(aes(\"out\", Pt_out, fill=point)) +\n      theme(legend.position = \"top\") +\n      labs(\n        x=\"\", y=\"kt per year\",\n        title = \"\",\n        subtitle = \"\",\n        caption=\"\\n\"\n      ),\n    ggplot(temp, aes(points, value, label=paste(value, \"%\"))) +\n      geom_col() +\n      geom_text(vjust=1) +\n      labs(\n        y=\"%\", x=\"\",\n        title = \"\",\n        subtitle = \"\",\n        caption = Source\n      )\n    )\n    \n    return(g)\n}\n\n\n\nA1A2A5\n\n\n\n\nCode\nf_graph_points_Pt(discharge_points_A1, \"A1\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_points_Pt(discharge_points_A2, \"A2\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_points_Pt(discharge_points_A5, \"A5\")\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nf_graph_points_NGL &lt;- function(dataset, point_selected){\n  temp &lt;- \n    data.frame(\n      A_A3 = round(\n        dataset$NGL_out[dataset$point==point_selected]/dataset$NGL_in[dataset$point==\"A3\"]*100, \n        0),\n      A_A4 = round(\n        dataset$NGL_out[dataset$point==point_selected]/dataset$NGL_out[dataset$point==\"A4\"]*100,\n        0)\n    ) %&gt;%\n    gather(\n      points, value, A_A3, A_A4\n      ) %&gt;%\n    mutate(\n      points = case_when(\n        points==\"A_A3\"~paste(point_selected, \"/ A3\"),\n        points==\"A_A4\"~paste(point_selected, \"/ A4\"),\n      )\n    )\n  \n  g &lt;- plot_grid(\n    ggplot(dataset) +\n      geom_col(aes(\"in\", NGL_in, fill=point)) +\n      geom_col(aes(\"out\", NGL_out, fill=point)) +\n      theme(legend.position = \"top\") +\n      labs(\n        x=\"\", y=\"kt per year\",\n        title = \"\",\n        subtitle = \"\",\n        caption=\"\\n\"\n      ),\n    ggplot(temp, aes(points, value, label=paste(value, \"%\"))) +\n      geom_col() +\n      geom_text(vjust=1) +\n      labs(\n        y=\"%\", x=\"\",\n        title = \"\",\n        subtitle = \"\",\n        caption = Source\n      )\n    )\n    \n    return(g)\n}\n\n\n\nA1A2A5\n\n\n\n\nCode\nf_graph_points_NGL(discharge_points_A1, \"A1\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_points_NGL(discharge_points_A2, \"A2\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_points_NGL(discharge_points_A5, \"A5\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is more than twice as much WWTP reported in the Etat des lieux compared compared to our data. But this changes the total capacity and incoming flows by only a few percent. However the difference is more important for discharged flows, probably because small WWTP have lower removal efficiencies.\n\n\nCode\nA3_A4 &lt;- N_P_etat_des_lieux %&gt;%\n  filter(point_SANDRE==\"A4\")\n#create capacity categories\nA3_A4 &lt;- \n  A3_A4 %&gt;%\n  mutate(\n    PE_bin = case_when(\n        capacity &lt; 200 ~ \"0 - 200 PE\",\n        (capacity &gt;= 200) & (capacity &lt;2000) ~ \"200 - 2 000 PE\",\n        (capacity &gt;= 2000) & (capacity &lt;10000) ~ \"2 000 - 10 000 PE\",\n        (capacity &gt;= 10000) & (capacity &lt;100000) ~ \"10 000 - 100 000 PE\",\n        capacity &gt;= 100000 ~ \"&gt; 100 000 PE\",\n        T ~ \"unreported PE\"\n    )\n  )\n#reorders treatment by their share of total capacity\nA3_A4$PE_bin &lt;- \n  factor(\n    A3_A4$PE_bin, \n    levels = \n        c(\"unreported PE\",\n          \"0 - 200 PE\", \n          \"200 - 2 000 PE\", \n          \"2 000 - 10 000 PE\",\n          \"10 000 - 100 000 PE\", \n          \"&gt; 100 000 PE\"\n          )\n    )\n\nbasin_A3_A4 &lt;- A3_A4 %&gt;%\n  mutate(Year = 2019) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    across(\n      # Flows in and out flows converted in kt/y (from kg/day) at the whole basin scale\n      c(\n        NGL_in, Pt_in, NGL_out, Pt_out, DBO5_in, DBO5_out, DCO_in, DCO_out\n        ), ~sum(.x, na.rm = T)*365/10^6\n      ),\n    capacity=sum(capacity)/10^6,\n    nb_WWTP=n()\n  )\n\n\nf_graph_comparison &lt;- function(variable_select){\n  g &lt;- ggplot(basin_N_P_loire_bretagne) +\n    geom_col(data = basin_A3_A4, aes(Year, !!as.symbol(variable_select), fill = \"état des lieux\"), alpha=.8) +\n    geom_line(aes(Year, !!as.symbol(variable_select), color = \"our data\")) +\n    labs(\n      x=\"\", y=\"kt per year\",\n      title = \"Comparison with the Etat des lieux data\",\n      caption = Source,\n      fill=\"\", color=\"\"\n    )\n  return(g)\n}\n\n\n\nCapacity and nb WWTPPtNGLDBO5DCO\n\n\n\nCapacityNb of WWTP\n\n\n\n\nCode\nf_graph_comparison(\"capacity\") +\n  labs(y=\"total capacity (million population equivalent)\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(\"nb_WWTP\") +\n  labs(y=\"nb of WWTP\")\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_comparison(\"Pt_in\") +\n  labs(subtitle = \"A3 point\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(\"Pt_out\") +\n  labs(subtitle = \"A4 point\")\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_comparison(\"NGL_in\") +\n  labs(subtitle = \"A3 point\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(\"NGL_out\") +\n  labs(subtitle = \"A4 point\")\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_comparison(\"DBO5_in\") +\n  labs(subtitle = \"A3 point\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(\"DBO5_out\") +\n  labs(subtitle = \"A4 point\")\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_comparison(\"DCO_in\") +\n  labs(subtitle = \"A3 point\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(\"DCO_out\") +\n  labs(subtitle = \"A4 point\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave data\nWe save the definitive file\n\n\nCode\n#all WWTP file\npath_output &lt;- \"output_data/all_WWTP/\"\ntemp &lt;- N_P_loire_bretagne %&gt;%\n  select(\n    code_WWTP, name_WWTP, Year, capacity, name_commune, INSEE_COM, lat_WWTP, long_WWTP, PE_bin,\n    DBO5_in, DCO_in, MES_in, NGL_in, NTK_in, NH4_in, NO3_in, NO2_in, Pt_in, PO4_in,\n    DBO5_out, DCO_out, MES_out, NGL_out, NTK_out, NH4_out, NO3_out, NO2_out, Pt_out, PO4_out,\n    DBO5_yield, DCO_yield, MES_yield, NGL_yield, Pt_yield,\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"all_WWTP_04_loire_bretagne.csv\"\n)\n\n#basin agregated file\npath_output &lt;- \"output_data/basins/\"\ntemp &lt;- basin_N_P_loire_bretagne %&gt;%\n  select(\n    Year, capacity, nb_WWTP,\n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_04_loire_bretagne.csv\"\n)\n#basin x PE agregated file\npath_output &lt;- \"output_data/basins_PE/\"\ntemp &lt;- basin_PE_N_P_loire_bretagne %&gt;%\n  select(\n    Year, capacity, nb_WWTP, PE_bin, \n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_PE_04_loire_bretagne.csv\"\n)\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "02_rhin_meuse.html",
    "href": "02_rhin_meuse.html",
    "title": "Rhin-Meuse",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n#loading additional relevant packages\nlibrary(cowplot) #for plot_grid()\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(\n      plot.title = element_text(face=\"bold\")\n      )\n  )\n\nYear_analysis &lt;- 2020\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\nSource &lt;- \"Système d'Information sur l'Eau Rhin-Meuse\\nComputation by Thomas Starck\"\n\n# Load the function file\nsource(\"functions.R\")\n\n\n\nSource and Description\n\nSource and data descriptionBasin presentationLoading data\n\n\nThe data can be downloaded on Rhin-Meuse water agency platform, here, in the section Station d’épuration des eaux. Three kind of files are available.\nIn Statistiques annuelles are presented, from 1996 to 2014, for each waste water treatment plant, some statistics (median, mean, standard deviation, min, max, 10 and 90 percentile) about the following quantities : DBO5, DCO, MES, NTK, NH4, NO2, NO3, Pt. For each one is reported the incoming and outgoing load, concentration and yield. For our analysis we will focus on mean incoming and outgoing loads (in kg/day).\nIn Données élémentaires, the same quantities are presented, but are not statistically summarized. For instance there can be several incoming P measures in a given year for a given wastewater treatment plant, sometimes one for each day. We do not use it and we will only use the Statistique annuelles table. For further work, the tables in Données élémentaires could be used to have more granular data, especially for large waste water treatment plants with frequent reporting.\nThe table Référentiel des ouvrages presents some characteristics of the waste water treatment plant : nominal capacity, location (long and lat), city, waterway, etc.\nThese open data stop in 2014. The agency sent us a file for the most recent period, spanning 2010-2020.\n\n\nInformation about the basin ca be found in the “Etat des lieux 2019” (status report).\nThere are 4.3 million inhabitants in the basin. A total of 995 waste water treatment plants, for a total nominal capacity of almost 8 million population equivalent. 255 000 inhabitants not connected to sewers, who use an Individual Autonomous System (IAS).\nMore description in the “Guide de l’eau” (water guide) here and here.\n\n\nWe load the files related to pollutions and WWTP descriptions from 1996 to 2014. We convert the nominal capacity, reported in kgDBO5/day, into population equivalent (PE) by using the ration 1 PE = 0.06 kgDBO5 (source). Notice that the nominal capacity might have changed between 1996 and 2014, and that the reported value is probably more accurate for the last years.\n\n\nCode\n#getting main data from the tables \"statistiques annuelles\"\npath_source &lt;- \"source_data/02_rhin_meuse/online_1990_2014/statistiques_annuelles/\"\nfile_rhin_meuse_1996_2014 &lt;-\n  #read and merge csv of all years\n  list.files( \n    path = path_source,\n    pattern = \"*.csv\", full.names = T, recursive = T\n    ) %&gt;%\n  lapply(\n    read_csv2, \n    locale=locale(encoding=\"latin1\"), \n    skip=1\n    ) %&gt;% \n  bind_rows()\nfile_rhin_meuse_1996_2014 &lt;- \n  file_rhin_meuse_1996_2014 %&gt;% \n  distinct() # apparently no double reporting\n\n#Getting WWTP capacity from the table \"referentiel ouvrage\"\npath_source &lt;- \"source_data/02_rhin_meuse/online_1990_2014/referentiel_ouvrage/\"\nfile_WWTP_1996_2014 &lt;- \n  read_csv2(\n    paste(\n      path_source, \"EPU_STATIONS.csv\", sep=\"\"\n      ), \n    locale=\n      locale(encoding=\"latin1\")\n    )\nWWTP_1996_2014 &lt;- \n  file_WWTP_1996_2014 %&gt;%\n  select(\n    code_WWTP = `Code SANDRE`, \n    capacity = `Capacité nominale`,\n    name_commune = `Commune d'implantation`,\n    INSEE_COM = `Code insee commune`,\n    lat_WWTP = `X (L93)`,\n    long_WWTP = `Y (L93)`\n    #name of WWTP (\"nom ouvrage\") no selected because already in the other file \"file_rhin_meuse\"\n    ) %&gt;%\n  #converts capacity in kgDOB5/d into population equivalent\n  mutate(\n    lat_discharge = NA,\n    long_discharge = NA,\n    treatment_type = NA,\n    capacity = capacity/0.06\n    ) \n\n#uncomment to see more detailes data on pollutions (daily when available) (long to load)\n# path_source &lt;- \"02_rhin_meuse/donnees_elementaires/\"\n# file_rhin_meuse &lt;- list.files( #read and merge csv of all years\n#     path = path_source,\n#     pattern = \"*.csv\", full.names = T, recursive = T) %&gt;%\n#     lapply(read_csv2, locale=locale(encoding=\"latin1\"), skip=1) %&gt;% bind_rows()\n# file_rhin_meuse &lt;- file_rhin_meuse %&gt;% distinct() # apparently no double reporting\n\n\nWe do the same for the years 2010-2020, provided by email.\n\n\nCode\npath_source &lt;- \"source_data/02_rhin_meuse/provided_by_mail_2010_2020/\"\nfile_rhin_meuse_2010_2020 &lt;-\n  read_csv(paste0(path_source, \"rejets_STEU2010-2021_RM_donnees_fonctionnement.csv\")) %&gt;%\n  distinct()\n\nfile_WWTP_2010_2020 &lt;- \n  read_csv(paste0(path_source, \"rejets_STEU2010-2021_RM_donnees_fonctionnement_referentiel_ouvrage.csv\"))\nWWTP_2010_2020 &lt;- \n  file_WWTP_2010_2020 %&gt;%\n  select(\n    code_WWTP = Numnat, \n    capacity = Valcapst,\n    name_commune = Nomcom,\n    INSEE_COM = Coddep,\n    lat_WWTP = Coola2ex,\n    long_WWTP = Coola2ey,\n    lat_discharge = `Coola2ex Rjet`,\n    long_discharge = `Coola2ey Rjet`,\n    treatment_type = `Type Ouvrage`\n    #name of WWTP (\"nom ouvrage\") no selected because already in the other file \"file_rhin_meuse\"\n    ) %&gt;%\n  #converts capacity in kgDOB5/d into population equivalent\n  mutate(\n    capacity = capacity/0.06,\n    #missing first 0 in code\n    code_WWTP = paste0(\"0\", as.character(code_WWTP))\n    ) \n\n\nIn the database, until 2012, DBO5 is reported under the denomination “DBO5 à 20°C” ; starting 2013, it is reporting under the name “DBO5”. We harmonize the denominations under the term “DBO5”.\n\n\nCode\nfile_rhin_meuse_1996_2014 &lt;- file_rhin_meuse_1996_2014 %&gt;%\n  mutate(Paramètre = gsub(\"à 20°C \", \"\", Paramètre))\n\n\nWe select and standardize the variables of interest for 1996-2014, and merge the files describing pollutions and WWTP features.\n\n\nCode\nN_P_rhin_meuse_1996_2014 &lt;- \n  file_rhin_meuse_1996_2014 %&gt;%\n  #select columns of interest and rename them\n  select(\n    code_WWTP = `Code SANDRE`, \n    name_WWTP = `Nom ouvrage`,\n    Year = AN,\n    Parameter = Paramètre,\n    value = MOYENNE) %&gt;%\n  #we do not focus on concentrations\n  filter(!grepl(\"Concentration\", Parameter)) %&gt;%\n  #we only focus on \"normal\" DBO5 and DCO, not after 2 hours of decantation\n  filter(!grepl(\"DBO5 ad2|DCO ad2.\", Parameter)) %&gt;%\n  #rename N and P denominations to be able to handle them in columns\n  mutate(\n    Parameter = case_when(\n      Parameter == \"Azote Kjeldahl Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"NTK_in\",\n      Parameter == \"Azote Kjeldahl Charge SORTIE\" ~ \n        \"NTK_out\",\n      Parameter == \"Ammonium Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"NH4_in\",\n      Parameter == \"Ammonium Charge SORTIE\" ~ \n        \"NH4_out\",\n      Parameter == \"Nitrites Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"NO2_in\",\n      Parameter == \"Nitrites Charge SORTIE\" ~ \n        \"NO2_out\",\n      Parameter == \"Nitrates Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"NO3_in\",\n      Parameter == \"Nitrates Charge SORTIE\" ~ \n        \"NO3_out\",\n      Parameter == \"Phosphore total Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"Pt_in\",\n      Parameter == \"Phosphore total Charge SORTIE\" ~ \n        \"Pt_out\",\n      Parameter == \"Phosphore total Rendement\" ~ \n        \"Pt_yield_reported\",\n      Parameter == \"DBO5 Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"DBO5_in\",\n      Parameter == \"DBO5 Charge SORTIE\" ~ \n        \"DBO5_out\",\n      Parameter == \"DBO5 Rendement\" ~ \n        \"DBO5_yield_reported\",\n      Parameter == \"D.C.O. Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"DCO_in\",\n      Parameter == \"D.C.O. Charge SORTIE\" ~ \n        \"DCO_out\",\n      Parameter == \"D.C.O. Rendement\" ~ \n        \"DCO_yield_reported\",\n      Parameter == \"Matières en suspension Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"MES_in\",\n      Parameter == \"Matières en suspension Charge SORTIE\" ~ \n        \"MES_out\",\n      Parameter == \"Matières en suspension Rendement\" ~ \n        \"MES_yield_reported\",\n    )\n  ) %&gt;%\n  #remove the \"Charge\" alone, without \"ENTREE\" ou \"SORTIE\" (little reported anyway)\n  #also removes DCO, DBO5 yield (to be checked if reported yield is consistent with computed one) and NTK, NH4, NO2 and NO3 yield (not consistent anyway since there is transfer between oxidized and reduced N)\n  filter(is.na(Parameter)==F) %&gt;% \n  #spread the data\n  tidyr::spread(key = Parameter, value = value)\n\n#add the WWTPs capacities by joining with the file describing WWTP\nN_P_rhin_meuse_1996_2014 &lt;-\n  N_P_rhin_meuse_1996_2014 %&gt;%\n  left_join(WWTP_1996_2014, by=\"code_WWTP\") \n\n\nWe do the same for the 2010-2020 file.\n\n\nCode\nN_P_rhin_meuse_2010_2020 &lt;- \n  file_rhin_meuse_2010_2020 %&gt;%\n  #select columns of interest and rename them\n  select(\n    code_WWTP = NUMNAT, \n    name_WWTP = NOMOUVEP,\n    Year = AN,\n    Parameter = NOM_PARAMETRE,\n    value = MOYENNE,\n    measure_type=TYPEMES) %&gt;%\n  mutate(\n    Parameter = paste(Parameter, measure_type)\n  ) %&gt;%\n  #we do not focus on concentrations\n  filter(!grepl(\"Concentration\", Parameter)) %&gt;%\n  #we only focus on \"normal\" DBO5 and DCO, not after 2 hours of decantation\n  filter(!grepl(\"DBO5 ad2|DCO ad2.\", Parameter)) %&gt;%\n  #rename N and P denominations to be able to handle them in columns\n  mutate(\n    Parameter = case_when(\n      Parameter == \"Azote Kjeldahl Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"NTK_in\",\n      Parameter == \"Azote Kjeldahl Charge SORTIE\" ~ \n        \"NTK_out\",\n      Parameter == \"Ammonium Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"NH4_in\",\n      Parameter == \"Ammonium Charge SORTIE\" ~ \n        \"NH4_out\",\n      Parameter == \"Nitrites Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"NO2_in\",\n      Parameter == \"Nitrites Charge SORTIE\" ~ \n        \"NO2_out\",\n      Parameter == \"Nitrates Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"NO3_in\",\n      Parameter == \"Nitrates Charge SORTIE\" ~ \n        \"NO3_out\",\n      Parameter == \"Phosphore total Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"Pt_in\",\n      Parameter == \"Phosphore total Charge SORTIE\" ~ \n        \"Pt_out\",\n      Parameter == \"Phosphore total Rendement\" ~ \n        \"Pt_yield_reported\",\n      Parameter == \"DBO5 Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"DBO5_in\",\n      Parameter == \"DBO5 Charge SORTIE\" ~ \n        \"DBO5_out\",\n      Parameter == \"DBO5 Rendement\" ~ \n        \"DBO5_yield_reported\",\n      Parameter == \"D.C.O. Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"DCO_in\",\n      Parameter == \"D.C.O. Charge SORTIE\" ~ \n        \"DCO_out\",\n      Parameter == \"D.C.O. Rendement\" ~ \n        \"DCO_yield_reported\",\n      Parameter == \"Matières en suspension Charge ENTREE DIURNE+NOCTURNE\" ~ \n        \"MES_in\",\n      Parameter == \"Matières en suspension Charge SORTIE\" ~ \n        \"MES_out\",\n      Parameter == \"Matières en suspension Rendement\" ~ \n        \"MES_yield_reported\",\n    )\n  ) %&gt;%\n  select(-measure_type)  %&gt;%\n  #remove the \"Charge\" alone, without \"ENTREE\" ou \"SORTIE\" (little reported anyway)\n  #also removes DCO, DBO5 yield (to be checked if reported yield is consistent with computed one) and NTK, NH4, NO2 and NO3 yield (not consistent anyway since there is transfer between oxidized and reduced N)\n  filter(is.na(Parameter)==F) %&gt;% \n  #spread the data\n  tidyr::spread(key = Parameter, value = value)\n\n#add the WWTPs capacities by joining with the file describing WWTP\nN_P_rhin_meuse_2010_2020 &lt;-\n  N_P_rhin_meuse_2010_2020 %&gt;%\n  left_join(WWTP_2010_2020, by=\"code_WWTP\") \n\n\nFor both files, we compute NGL as the sum of NTK, NO2 and NO3. We also compute the yields for each nutrient, and the nutrient ratios.\n\n\nCode\nN_P_rhin_meuse_1996_2014 &lt;-N_P_rhin_meuse_1996_2014 %&gt;%\n  ungroup() %&gt;%\n  # we need to be \"row wise\" to use \"sum(., na.rm=T) : \n  # just summing the columns A+B would return NA when at least 1 columns as NA in the row\n  rowwise() %&gt;%\n  mutate(\n    #for NGL in, if NTK_in reported we accept to not consider unreported NO2_in and NO2_in as 0 (because NO in negligible)\n    #if NTK_in unreported, NGL_in is unreported\n    NGL_in = sum(NTK_in, NO2_in, NO3_in, na.rm=!is.na(NTK_in)), \n    #For NGL_out, NO3 and NTK must be reported, and we accept to neglect NO2 when it is unreported.\n    NGL_out = sum(NTK_out, NO2_out, NO3_out, na.rm=!((is.na(NTK_out)|is.na(NO3_out)))),\n    #Computes yields \n    Pt_yield = (1-Pt_out/Pt_in)*100, \n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    DBO5_yield =(1-DBO5_out/DBO5_in)*100, \n    DCO_yield =(1-DCO_out/DCO_in)*100,\n    MES_yield =(1-MES_out/MES_in)*100,\n    #nutrient ratios\n    N_P_ratio_in = NGL_in/Pt_in, \n    N_P_ratio_out = NGL_out/Pt_out,\n    DCO_DBO5_ratio_in = DCO_in/DBO5_in,\n    DCO_DBO5_ratio_out = DCO_out/DBO5_out,\n    DBO5_N_ratio_in = DBO5_in/NGL_in,\n    DBO5_N_ratio_out = DBO5_out/NGL_out,\n    DBO5_P_ratio_in = DBO5_in/Pt_in,\n    DBO5_P_ratio_out = DBO5_out/Pt_out\n  )\n\nN_P_rhin_meuse_2010_2020 &lt;- N_P_rhin_meuse_2010_2020 %&gt;%\n  ungroup() %&gt;%\n  # we need to be \"row wise\" to use \"sum(., na.rm=T) : \n  # just summing the columns A+B would return NA when at least 1 columns as NA in the row\n  rowwise() %&gt;%\n  mutate(\n    #for NGL in, if NTK_in reported we accept to not consider unreported NO2_in and NO2_in as 0 (because NO in negligible)\n    #if NTK_in unreported, NGL_in is unreported\n    NGL_in = sum(NTK_in, NO2_in, NO3_in, na.rm=!is.na(NTK_in)), \n    #For NGL_out, NO3 and NTK must be reported, and we accept to neglect NO2 when it is unreported.\n    NGL_out = sum(NTK_out, NO2_out, NO3_out, na.rm=!((is.na(NTK_out)|is.na(NO3_out)))),\n    #Computes yields \n    Pt_yield = (1-Pt_out/Pt_in)*100, \n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    DBO5_yield =(1-DBO5_out/DBO5_in)*100, \n    DCO_yield =(1-DCO_out/DCO_in)*100,\n    MES_yield =(1-MES_out/MES_in)*100,\n    #nutrient ratios\n    N_P_ratio_in = NGL_in/Pt_in, \n    N_P_ratio_out = NGL_out/Pt_out,\n    DCO_DBO5_ratio_in = DCO_in/DBO5_in,\n    DCO_DBO5_ratio_out = DCO_out/DBO5_out,\n    DBO5_N_ratio_in = DBO5_in/NGL_in,\n    DBO5_N_ratio_out = DBO5_out/NGL_out,\n    DBO5_P_ratio_in = DBO5_in/Pt_in,\n    DBO5_P_ratio_out = DBO5_out/Pt_out\n  )\n\n\nFinally we merge the 1996-2014 and 2010-2020 files. For the 2010-2014 period, we keep the data from the second file. We also change the “0” flows values as unreported values.\n\n\nCode\nN_P_rhin_meuse_1996_2014[N_P_rhin_meuse_1996_2014==0] &lt;- NA\nN_P_rhin_meuse_2010_2020[N_P_rhin_meuse_2010_2020==0] &lt;- NA\n\nN_P_rhin_meuse &lt;- \n  bind_rows(\n    N_P_rhin_meuse_1996_2014 %&gt;%\n      filter(Year &lt; 2010),\n    N_P_rhin_meuse_2010_2020\n  )\n\nN_P_rhin_meuse &lt;- N_P_rhin_meuse %&gt;% distinct()\n\n\nThere is a mistake with the Plobsheim plant which is reported for the year “1899”. We remove this line (no data was reported anyway).\n\n\nCode\nN_P_rhin_meuse &lt;- N_P_rhin_meuse %&gt;% filter(Year &gt;1995)\nN_P_rhin_meuse_1996_2014 &lt;- N_P_rhin_meuse_1996_2014 %&gt;% filter(Year &gt;1995)\n\n\nSome WWTP have unreported capacities. For the most recent of them we are able to get their capacity from the sanitation portal data.\n\n\nCode\n#get the list of WWTP with unreported capacities\nunreported_capacity &lt;- N_P_rhin_meuse %&gt;% filter(is.na(capacity))\n\n#get capacities from the sanitation portal\nsanitation_portal_capacity &lt;- read_csv(\"output_data/all_WWTP/all_WWTP_sanitation_portal.csv\") %&gt;%\n  select(code_WWTP, capacity) %&gt;%\n  distinct()\n\n#change value when possible\nunreported_capacity &lt;- left_join(\n  unreported_capacity %&gt;% rename(capacity_LB = capacity), \n  sanitation_portal_capacity %&gt;% \n    select(code_WWTP, capacity), \n  by=\"code_WWTP\"\n) %&gt;%\n  select(-capacity_LB)\n\n#we change the values in the main file.\nN_P_rhin_meuse &lt;- N_P_rhin_meuse %&gt;% \n  filter(is.na(capacity)==F)\n\nN_P_rhin_meuse &lt;- bind_rows(\n  N_P_rhin_meuse, unreported_capacity\n)\n\n\nIn spite of this correction, there remains 46 stations without reported nominal capacity. But they represent a very small amount of the total and an very small port of the nutrient flows (below on the right for phosphorus, the almost indistinguishable area near 0).\n\n\nCode\ntemp &lt;- N_P_rhin_meuse %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    Pt_in = sum(Pt_in, na.rm=T)*365/10^6,\n    nb_WWTP = n()\n  )\ntemp2 &lt;- unreported_capacity %&gt;%\n  filter(is.na(capacity)) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    Pt_in = sum(Pt_in, na.rm=T)*365/10^6,\n    nb_WWTP = n()\n  )\n\nplot_grid(\n  ggplot(temp) +\n    geom_line(aes(Year, nb_WWTP)) +\n    geom_area(data = temp2, aes(Year, nb_WWTP)) +\n    labs(\n      x=\"\", y=\"\",\n      subtitle = \"nb of wastewater treatment plants\",\n      title = \"Stations not reporting their nominal capacity\",\n      caption = \"\\n\"\n    ),\n  ggplot(temp) +\n    geom_line(aes(Year, Pt_in)) +\n    geom_area(data = temp2, aes(Year, Pt_in)) +\n    labs(\n      x=\"\", y=\"kt per year\",\n      subtitle = \"in terms of incoming Pt flows\",\n      title = \"\",\n      caption = Source\n    ) +\n    ylim(0, 3)\n)\n\n\n\n\n\nWe create the capacity categories in terms of population equivalent.\n\n\nCode\n#function to create capacity categories\nf_PE_bin_categories &lt;- function(dataset){\n  #Creating size categories\n  dataset &lt;- \n    dataset %&gt;%\n    mutate(\n      PE_bin = case_when(\n        capacity &lt; 200 ~ \"0 - 200 PE\",\n        (capacity &gt;= 200) & (capacity &lt;2000) ~ \"200 - 2 000 PE\",\n        (capacity &gt;= 2000) & (capacity &lt;10000) ~ \"2 000 - 10 000 PE\",\n        (capacity &gt;= 10000) & (capacity &lt;100000) ~ \"10 000 - 100 000 PE\",\n        capacity &gt;= 100000 ~ \"&gt; 100 000 PE\",\n        T ~ \"unreported PE\"\n      )\n    )\n  \n  #reorders treatment by their share of total capacity\n  dataset$PE_bin &lt;- \n    factor(\n      dataset$PE_bin, \n      levels = \n        c(\"unreported PE\",\n          \"0 - 200 PE\", \n          \"200 - 2 000 PE\", \n          \"2 000 - 10 000 PE\",\n          \"10 000 - 100 000 PE\", \n          \"&gt; 100 000 PE\"\n          )\n        )\n  return(dataset)\n}\nN_P_rhin_meuse &lt;- f_PE_bin_categories(N_P_rhin_meuse)\nN_P_rhin_meuse_1996_2014 &lt;- f_PE_bin_categories(N_P_rhin_meuse_1996_2014)\nN_P_rhin_meuse_2010_2020 &lt;- f_PE_bin_categories(N_P_rhin_meuse_2010_2020)\n\n\nWe create the file with aggregated flows at the basin scale, and also by capacity categories.\n\n\nCode\nf_basin_flows &lt;- function(dataset){\n  basin &lt;- dataset %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      across(\n        c(\n          NGL_in, NTK_in, NO2_in, NO3_in, NH4_in, \n          Pt_in, DBO5_in, DCO_in, MES_in,\n          NGL_out, NTK_out, NO2_out, NO3_out, NH4_out,\n          Pt_out, DBO5_out, DCO_out, MES_out\n        ),\n        ~signif(sum(.x, na.rm = T)*365/10^6, digits=3)\n      ),\n    #nb of waste water treatment plant\n    nb_WWTP = n(),\n    #capacity converted in million Population Equivalent\n    capacity = signif(sum(capacity, na.rm = T)/10^6, digits=3),\n    )\n  return(basin)\n}\nbasin_N_P_rhin_meuse &lt;- f_basin_flows(N_P_rhin_meuse)\n\nf_basin_PE_flows &lt;- function(dataset){\n  basin &lt;- dataset %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      across(\n        c(\n          NGL_in, NTK_in, NO2_in, NO3_in, NH4_in, \n          Pt_in, DBO5_in, DCO_in, MES_in,\n          NGL_out, NTK_out, NO2_out, NO3_out, NH4_out,\n          Pt_out, DBO5_out, DCO_out, MES_out\n        ),\n        ~signif(sum(.x, na.rm = T)*365/10^6, digits=3)\n      ),\n    #nb of waste water treatment plant\n    nb_WWTP = n(),\n    #capacity converted in million Population Equivalent\n    capacity = signif(sum(capacity, na.rm = T)/10^6, digits=3),\n    )\n  return(basin)\n}\nbasin_PE_N_P_rhin_meuse &lt;- f_basin_PE_flows(N_P_rhin_meuse)\n\n\nWe compute the nutrient ratios at the basin scale, and also by capacity categories.\n\n\nCode\n#have to do this in case 1 nutrient is more reported than the other, which would create a bia if we took the ratio of the already aggregated flows\nf_nutrient_ratio_basin &lt;- function(basin, dataset, nutrient1, nutrient2){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrient1))==F & is.na(!!as.symbol(nutrient2))==F\n      ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      nutrient_1 = sum(!!as.symbol(nutrient1), na.rm=T),\n      nutrient_2 = sum(!!as.symbol(nutrient2), na.rm=T),\n      ratio = signif(nutrient_1/nutrient_2, digits=3)\n    ) %&gt;%\n    select(-nutrient_1, -nutrient_2)\n  basin &lt;- left_join(\n    basin, temp, by=\"Year\"\n  )\n  return(basin)\n}\n\nf_nutrient_ratio_basin_PE &lt;- function(basin_PE, dataset, nutrient1, nutrient2){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrient1))==F & is.na(!!as.symbol(nutrient2))==F\n      ) %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      nutrient_1 = sum(!!as.symbol(nutrient1), na.rm=T),\n      nutrient_2 = sum(!!as.symbol(nutrient2), na.rm=T),\n      ratio = signif(nutrient_1/nutrient_2, digits=3)\n    ) %&gt;%\n    select(-nutrient_1, -nutrient_2)\n  basin_PE &lt;- left_join(\n    basin_PE, temp, by=c(\"Year\", \"PE_bin\")\n  )\n  return(basin_PE)\n}\n\nf_all_nutrient_ratios_basin &lt;- function(basin, dataset){\n  basin &lt;- basin %&gt;%\n    \n    #nutrient ratios\n    #N_P in\n    f_nutrient_ratio_basin(dataset, \"NGL_in\", \"Pt_in\") %&gt;%\n    rename(N_P_ratio_in = ratio) %&gt;%\n    #N_P out\n    f_nutrient_ratio_basin(dataset, \"NGL_out\", \"Pt_out\") %&gt;%\n    rename(N_P_ratio_out = ratio) %&gt;%\n    #DCO_DBO5 in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"DBO5_in\") %&gt;%\n    rename(DCO_DBO5_ratio_in = ratio) %&gt;%\n    #DCO_DBO5 out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"DBO5_out\") %&gt;%\n    rename(DCO_DBO5_ratio_out = ratio) %&gt;%\n    #DBO5_N in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"NGL_in\") %&gt;%\n    rename(DBO5_N_ratio_in = ratio) %&gt;%\n    #DBO5_N out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"NGL_out\") %&gt;%\n    rename(DBO5_N_ratio_out = ratio) %&gt;%\n    #DBO5_P in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"Pt_in\") %&gt;%\n    rename(DBO5_P_ratio_in = ratio) %&gt;%\n    #DBO5_P out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"Pt_out\") %&gt;%\n    rename(DBO5_P_ratio_out = ratio) %&gt;%\n    #DCO_N in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"NGL_in\") %&gt;%\n    rename(DCO_N_ratio_in = ratio) %&gt;%\n    #DCO_N out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"NGL_out\") %&gt;%\n    rename(DCO_N_ratio_out = ratio) %&gt;%\n    #DCO_P in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"Pt_in\") %&gt;%\n    rename(DCO_P_ratio_in = ratio) %&gt;%\n    #DCO_P out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"Pt_out\") %&gt;%\n    rename(DCO_P_ratio_out = ratio) %&gt;%\n    \n    #capacity ratios\n    #Pt_PE_in\n    f_nutrient_ratio_basin(dataset, \"Pt_in\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_in = ratio) %&gt;%\n    #Pt_PE_out\n    f_nutrient_ratio_basin(dataset, \"Pt_out\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_out = ratio) %&gt;%\n    #NGL_PE_in\n    f_nutrient_ratio_basin(dataset, \"NGL_in\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_in = ratio) %&gt;%\n    #NGL_PE_out\n    f_nutrient_ratio_basin(dataset, \"NGL_out\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_out = ratio) %&gt;%\n    #DBO5_PE_in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_in = ratio) %&gt;%\n    #DBO5_PE_out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_out = ratio) %&gt;%\n    #DCO_PE_in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_in = ratio) %&gt;%\n    #DCO_PE_out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_out = ratio) %&gt;%\n    #MES_PE_in\n    f_nutrient_ratio_basin(dataset, \"MES_in\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_in = ratio) %&gt;%\n    #MES_PE_out\n    f_nutrient_ratio_basin(dataset, \"MES_out\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_out = ratio) %&gt;%\n    \n    #convert from kg per PE per day to g per PE per day\n    mutate(\n      across(\n        c(\n          Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, DBO5_PE_ratio_in, DBO5_PE_ratio_out,\n          DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n        ), ~.x*1000 \n      )\n    )\n  return(basin)\n}\n\nf_all_nutrient_ratios_basin_PE &lt;- function(basin_PE, dataset){\n  basin_PE &lt;- basin_PE %&gt;%\n    \n    #nutrient ratios\n    #N_P in\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_in\", \"Pt_in\") %&gt;%\n    rename(N_P_ratio_in = ratio) %&gt;%\n    #N_P out\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_out\", \"Pt_out\") %&gt;%\n    rename(N_P_ratio_out = ratio) %&gt;%\n    #DCO_DBO5 in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"DBO5_in\") %&gt;%\n    rename(DCO_DBO5_ratio_in = ratio) %&gt;%\n    #DCO_DBO5 out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"DBO5_out\") %&gt;%\n    rename(DCO_DBO5_ratio_out = ratio) %&gt;%\n    #DBO5_N in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"NGL_in\") %&gt;%\n    rename(DBO5_N_ratio_in = ratio) %&gt;%\n    #DBO5_N out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"NGL_out\") %&gt;%\n    rename(DBO5_N_ratio_out = ratio) %&gt;%\n    #DBO5_P in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"Pt_in\") %&gt;%\n    rename(DBO5_P_ratio_in = ratio) %&gt;%\n    #DBO5_P out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"Pt_out\") %&gt;%\n    rename(DBO5_P_ratio_out = ratio) %&gt;%\n    #DCO_N in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"NGL_in\") %&gt;%\n    rename(DCO_N_ratio_in = ratio) %&gt;%\n    #DCO_N out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"NGL_out\") %&gt;%\n    rename(DCO_N_ratio_out = ratio) %&gt;%\n    #DCO_P in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"Pt_in\") %&gt;%\n    rename(DCO_P_ratio_in = ratio) %&gt;%\n    #DCO_P out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"Pt_out\") %&gt;%\n    rename(DCO_P_ratio_out = ratio) %&gt;%\n    \n    #capacity ratios\n    #Pt_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"Pt_in\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_in = ratio) %&gt;%\n    #Pt_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"Pt_out\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_out = ratio) %&gt;%\n    #NGL_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_in\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_in = ratio) %&gt;%\n    #NGL_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_out\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_out = ratio) %&gt;%\n    #DBO5_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_in = ratio) %&gt;%\n    #DBO5_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_out = ratio) %&gt;%\n    #DCO_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_in = ratio) %&gt;%\n    #DCO_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_out = ratio) %&gt;%\n    #MES_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"MES_in\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_in = ratio) %&gt;%\n    #MES_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"MES_out\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_out = ratio) %&gt;%\n    \n    #convert from kg per PE per day to g per PE per day\n    mutate(\n      across(\n        c(\n          Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, DBO5_PE_ratio_in, DBO5_PE_ratio_out,\n          DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n        ), ~.x*1000 \n      )\n    )\n  return(basin_PE)\n}\n\nbasin_N_P_rhin_meuse &lt;- f_all_nutrient_ratios_basin(basin_N_P_rhin_meuse, N_P_rhin_meuse)\n\nbasin_PE_N_P_rhin_meuse &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_rhin_meuse, N_P_rhin_meuse)\n\n\nWe compute the yields at the basin scale, and also by capacity categories.\n\n\nCode\n#have to do this in case inflow or outflow is more reported than the other one, which would create a bias if we took the ratio of the already aggregated flows\nf_yield_basin &lt;- function(basin, dataset, nutrientIN, nutrientOUT){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrientIN))==F & is.na(!!as.symbol(nutrientOUT))==F\n      ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      nutrient_in = sum(!!as.symbol(nutrientIN), na.rm=T),\n      nutrient_out = sum(!!as.symbol(nutrientOUT), na.rm=T),\n      yield = round((1-nutrient_out/nutrient_in)*100, digits = 0)\n    ) %&gt;%\n    select(-nutrient_in, -nutrient_out)\n  basin &lt;- left_join(\n    basin, temp, by=\"Year\"\n  )\n  return(basin)\n}\n\nf_yield_basin_PE &lt;- function(basin_PE, dataset, nutrientIN, nutrientOUT){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrientIN))==F & is.na(!!as.symbol(nutrientOUT))==F\n      ) %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      nutrient_in = sum(!!as.symbol(nutrientIN), na.rm=T),\n      nutrient_out = sum(!!as.symbol(nutrientOUT), na.rm=T),\n      yield = round((1-nutrient_out/nutrient_in)*100, digits = 0)\n    ) %&gt;%\n    select(-nutrient_in, -nutrient_out)\n  basin_PE &lt;- left_join(\n    basin_PE, temp, by=c(\"Year\", \"PE_bin\")\n  )\n  return(basin_PE)\n}\n\nf_all_yields_basin &lt;- function(basin, dataset){\n  basin &lt;- basin %&gt;%\n    #NGL yield\n    f_yield_basin(dataset, \"NGL_in\", \"NGL_out\") %&gt;%\n    rename(NGL_yield = yield) %&gt;%\n    #Pt yield\n    f_yield_basin(dataset, \"Pt_in\", \"Pt_out\") %&gt;%\n    rename(Pt_yield = yield) %&gt;%\n    #DBO5 yield\n    f_yield_basin(dataset, \"DBO5_in\", \"DBO5_out\") %&gt;%\n    rename(DBO5_yield = yield) %&gt;%\n    #DCO yield\n    f_yield_basin(dataset, \"DCO_in\", \"DCO_out\") %&gt;%\n    rename(DCO_yield = yield) %&gt;%\n    #MES yield\n    f_yield_basin(dataset, \"MES_in\", \"MES_out\") %&gt;%\n    rename(MES_yield = yield) \n  return(basin)\n}\n\nf_all_yields_basin_PE &lt;- function(basin_PE, dataset){\n  basin_PE &lt;- basin_PE %&gt;%\n    #NGL yield\n    f_yield_basin_PE(dataset, \"NGL_in\", \"NGL_out\") %&gt;%\n    rename(NGL_yield = yield) %&gt;%\n    #Pt yield\n    f_yield_basin_PE(dataset, \"Pt_in\", \"Pt_out\") %&gt;%\n    rename(Pt_yield = yield) %&gt;%\n    #DBO5 yield\n    f_yield_basin_PE(dataset, \"DBO5_in\", \"DBO5_out\") %&gt;%\n    rename(DBO5_yield = yield) %&gt;%\n    #DCO yield\n    f_yield_basin_PE(dataset, \"DCO_in\", \"DCO_out\") %&gt;%\n    rename(DCO_yield = yield) %&gt;%\n    #MES yield\n    f_yield_basin_PE(dataset, \"MES_in\", \"MES_out\") %&gt;%\n    rename(MES_yield = yield) \n  return(basin_PE)\n}\n\nbasin_N_P_rhin_meuse &lt;- f_all_yields_basin(basin_N_P_rhin_meuse, N_P_rhin_meuse)\n\nbasin_PE_N_P_rhin_meuse &lt;- f_all_yields_basin_PE(basin_PE_N_P_rhin_meuse, N_P_rhin_meuse)\n\n\nWe create the years categories (every 5 years).\n\n\nCode\n#function to create years categories\nf_year_categories &lt;- function(dataset){\n  dataset &lt;- dataset %&gt;%\n    mutate(\n      Year_category = case_when(\n        Year %in% c(1991, 1992, 1993, 1994, 1995) ~ \"1991-1995\",\n        Year %in% c(1996, 1997, 1998, 1999, 2000) ~ \"1996-2000\",\n        Year %in% c(2001, 2002, 2003, 2004, 2005) ~ \"2001-2005\",\n        Year %in% c(2006, 2007, 2008, 2009, 2010) ~ \"2006-2010\",\n        Year %in% c(2011, 2012, 2013, 2014, 2015) ~ \"2011-2015\",\n        Year %in% c(2016, 2017, 2018, 2019, 2020) ~ \"2016-2020\",\n      )\n    )\n  return(dataset)\n}\nN_P_rhin_meuse &lt;- f_year_categories(N_P_rhin_meuse)\nN_P_rhin_meuse_1996_2014 &lt;- f_year_categories(N_P_rhin_meuse_1996_2014)\nN_P_rhin_meuse_2010_2020 &lt;- f_year_categories(N_P_rhin_meuse_2010_2020)\n\nbasin_N_P_rhin_meuse &lt;- f_year_categories(basin_N_P_rhin_meuse)\nbasin_PE_N_P_rhin_meuse &lt;- f_year_categories(basin_PE_N_P_rhin_meuse)\n\n\n#we remove the original and unused files from environment\nrm(WWTP_1996_2014, WWTP_2010_2020, unreported_capacity, sanitation_portal_capacity, \n   N_P_rhin_meuse_1996_2014, N_P_rhin_meuse_2010_2020)\n\n\n\n\n\n\n\nData cleaning\n\nOutliers : first visualization\n\n\nWe look for some obvious incoherent values at the basin scale\n\n\nCode\nf_graph_nutrient &lt;- function(dataset, nutrient_in, nutrient_out, label, legend_x, legend_y){\n  p &lt;- ggplot(dataset) + \n    #nutrient inflow\n    geom_line(\n      aes(\n        Year, \n        !!as.symbol(nutrient_in), \n        color=nutrient_in\n        )\n      ) + \n    #nutrient outflow\n    geom_line(\n      aes(\n        Year,\n        !!as.symbol(nutrient_out), \n        color = nutrient_out\n        )\n      ) +\n    ylim(0, NA) +\n    theme(\n      legend.position = c(legend_x, legend_y), \n      legend.title = element_blank()\n      ) +\n    labs(\n      x=\"\", y=paste(\"kt of\", label) , \n      title = paste(\"Reported\", label, \"flows in Rhin-Meuse WWTPs\") ,\n      subtitle = \"reported, not necessarily actual ; here before data cleaning\", \n      caption = Source\n      )\n  return(p)\n}\n##if want to try interactive plot :\n# library(plotly)\n# ggplotly(p, tooltip = c(\"y\", \"x\"))\n\n\n\nNTKNH4NO2NO3PtDBO5DCOMESOutliers correction\n\n\nThere are no obvious outliers for NTK.\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"NTK_in\", \"NTK_out\", \"NTK\", 0.7, 0.5) \n\n\n\n\n\n\n\nOne obvious outlier for NH4 in and out is in 1998, corresponding Strasbourg. Looking at the data, the most likely and consistent explanation is an error in the comma location by 1 order of magnitude.\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"NH4_in\", \"NH4_out\", \"NH4\", 0.7, 0.2)\n\n\n\n\n\n\n\nOne obvious outlier for NO2 in and out in 2010, corresponding to Golbey. Looking at the data, the most likely and consistent explanation is an error in the comma location by 4 orders of magnitude. Another outlier is Duppigheim in 2005, only for incoming NO2 ; this is probably an error by 2 orders of magnitude.\nThere is also a problem with COLMAR LA FERME DU LADHOF which reports a negative incoming NO2 value in 2002. We replace it with an empty value.\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"NO2_in\", \"NO2_out\", \"NO2\", 0.4, 0.5) \n\n\n\n\n\n\n\nAn obvious outlier for discharged NO3 is in 2010, corresponding to Golbey, probably a comma error by 3 orders of magnitude. There is a potential outliers for incoming N03, but it would need further investigation.\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"NO3_in\", \"NO3_out\", \"NO3\", 0.4, 0.5)  \n\n\n\n\n\n\n\nThere is no obvious outlier for total P.\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"Pt_in\", \"Pt_out\", \"Pt\", 0.4, 0.5) \n\n\n\n\n\n\n\nThere is no obvious outlier for DBO5.\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"DBO5_in\", \"DBO5_out\", \"DBO5\", 0.4, 0.5)  \n\n\n\n\n\n\n\nThere is no obvious outlier for DCO.\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"DCO_in\", \"DCO_out\", \"DCO\", 0.4, 0.5)  \n\n\n\n\n\n\n\nThere is no obvious outlier for MES.\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"MES_in\", \"MES_out\", \"MES\", 0.4, 0.5)\n\n\n\n\n\n\n\nWe change the values of the outliers identified above.\n\nNH4 inflow and outflow :\n\nin 1998 in STRASBOURG (code SANDRE 026751900405), 1 orders of magnitude higher\n\nNO2 inflow :\n\nin 2010, in GOLBEY (code SANDRE 028820900489), 4 orders of magnitude higher\nin 2005, in DUPPIGHEIM (code SANDRE 026710800307), 2 orders of magnitude higher\nin 2002, in COLMAR LA FERME DU LADHOF (code SANDRE 026806600424), negative value removed\n\nNO2 outflouw :\n\nin 2010, in GOLBEY (code SANDRE 028820900489), 4 orders of magnitude higher\n\nNO3 outflow :\n\nin 2010, in GOLBEY (code SANDRE 028820900489), 3 orders of magnitude higher\n\n\n\n\nCode\n#creating obvious outliers ID table\noutliers &lt;- data.frame(\n  code_WWTP=c(\"026751900405\", \"028820900489\", \"026710800307\", \"026806600424\"),\n  Year = c(1998, 2010, 2005, 2002)\n)\n#getting all the others columns related to outliers\noutliers &lt;- outliers %&gt;% left_join(N_P_rhin_meuse, by = c(\"code_WWTP\", \"Year\"))\n\n\n\n\nCode\n#We change the values of outliers\n\n# Strasbourg NH4 in and out in 1998, by a factor 10\nN_P_rhin_meuse$NH4_in[N_P_rhin_meuse$name_WWTP == \"STRASBOURG\" & N_P_rhin_meuse$Year == 1998] &lt;- \n  N_P_rhin_meuse$NH4_in[N_P_rhin_meuse$name_WWTP == \"STRASBOURG\" & N_P_rhin_meuse$Year == 1998]/10\nN_P_rhin_meuse$NH4_out[N_P_rhin_meuse$name_WWTP == \"STRASBOURG\" & N_P_rhin_meuse$Year == 1998] &lt;- \n  N_P_rhin_meuse$NH4_out[N_P_rhin_meuse$name_WWTP == \"STRASBOURG\" & N_P_rhin_meuse$Year == 1998]/10\n\n\n# Golbey NO2 in and out in 2010, by a factor 10 000\nN_P_rhin_meuse$NO2_in[N_P_rhin_meuse$name_WWTP == \"GOLBEY\" & N_P_rhin_meuse$Year == 2010] &lt;- \n  N_P_rhin_meuse$NO2_in[N_P_rhin_meuse$name_WWTP == \"GOLBEY\" & N_P_rhin_meuse$Year == 2010]/10000\nN_P_rhin_meuse$NO2_out[N_P_rhin_meuse$name_WWTP == \"GOLBEY\" & N_P_rhin_meuse$Year == 2010] &lt;- \n  N_P_rhin_meuse$NO2_out[N_P_rhin_meuse$name_WWTP == \"GOLBEY\" & N_P_rhin_meuse$Year == 2010]/10000\n\n# Golbey NO3 out in 2010, by a factor 1 000\nN_P_rhin_meuse$NO3_out[N_P_rhin_meuse$name_WWTP == \"GOLBEY\" & N_P_rhin_meuse$Year == 2010] &lt;- \n  N_P_rhin_meuse$NO3_out[N_P_rhin_meuse$name_WWTP == \"GOLBEY\" & N_P_rhin_meuse$Year == 2010]/1000\n\n# DUPPIGHEIM NO2 out in 2005, by a factor 100\nN_P_rhin_meuse$NO2_in[N_P_rhin_meuse$name_WWTP == \"DUPPIGHEIM\" & N_P_rhin_meuse$Year == 2005] &lt;- \n  N_P_rhin_meuse$NO2_in[N_P_rhin_meuse$name_WWTP == \"DUPPIGHEIM\" & N_P_rhin_meuse$Year == 2005]/100\n\n# COLMAR LA FERME DU LADHOF in 2002, negative value\nN_P_rhin_meuse$NO2_in[N_P_rhin_meuse$name_WWTP == \"COLMAR LA FERME DU LADHOF\" & N_P_rhin_meuse$Year == 2002] &lt;- NA\n\n\nWe recompute the values (yields, ratios, aggregate at the basin scale…) after our outliers changes.\n\n\nCode\nN_P_rhin_meuse &lt;- N_P_rhin_meuse %&gt;%\n  ungroup() %&gt;%\n  # we need to be \"row wise\" to use \"sum(., na.rm=T) : \n  # just summing the columns A+B would return NA when at least 1 columns as NA in the row\n  rowwise() %&gt;%\n  mutate(\n    #for NGL in, if NTK_in reported we accept to not consider unreported NO2_in and NO2_in as 0 (because NO in negligible)\n    #if NTK_in unreported, NGL_in is unreported\n    NGL_in = sum(NTK_in, NO2_in, NO3_in, na.rm=!is.na(NTK_in)), \n    #For NGL_out, NO3 and NTK must be reported, and we accept to neglect NO2 when it is unreported.\n    NGL_out = sum(NTK_out, NO2_out, NO3_out, na.rm=!((is.na(NTK_out)|is.na(NO3_out)))),\n    #Computes yields \n    Pt_yield = (1-Pt_out/Pt_in)*100, \n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    DBO5_yield =(1-DBO5_out/DBO5_in)*100, \n    DCO_yield =(1-DCO_out/DCO_in)*100,\n    MES_yield =(1-MES_out/MES_in)*100,\n    #nutrient ratios\n    N_P_ratio_in = NGL_in/Pt_in, \n    N_P_ratio_out = NGL_out/Pt_out,\n    DCO_DBO5_ratio_in = DCO_in/DBO5_in,\n    DCO_DBO5_ratio_out = DCO_out/DBO5_out,\n    DBO5_N_ratio_in = DBO5_in/NGL_in,\n    DBO5_N_ratio_out = DBO5_out/NGL_out,\n    DBO5_P_ratio_in = DBO5_in/Pt_in,\n    DBO5_P_ratio_out = DBO5_out/Pt_out\n  )\n\n\n\n\nCode\n#recompute basin values (flows, yields, ratios..)\nbasin_N_P_rhin_meuse &lt;- f_basin_flows(N_P_rhin_meuse)\nbasin_N_P_rhin_meuse &lt;- f_all_nutrient_ratios_basin(basin_N_P_rhin_meuse, N_P_rhin_meuse)\nbasin_N_P_rhin_meuse &lt;- f_all_yields_basin(basin_N_P_rhin_meuse, N_P_rhin_meuse)\nbasin_N_P_rhin_meuse &lt;- f_year_categories(basin_N_P_rhin_meuse)\n\n#recompute basin x PE values (flows, yields, ratios..)\nbasin_PE_N_P_rhin_meuse &lt;- f_basin_PE_flows(N_P_rhin_meuse)\nbasin_PE_N_P_rhin_meuse &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_rhin_meuse, N_P_rhin_meuse)\nbasin_PE_N_P_rhin_meuse &lt;- f_all_yields_basin_PE(basin_PE_N_P_rhin_meuse, N_P_rhin_meuse)\nbasin_PE_N_P_rhin_meuse &lt;- f_year_categories(basin_PE_N_P_rhin_meuse)\n\n\n\n\n\n\n\n\n\n\nCapacities distribution\n\nReporting EvolutionLarge categoriesHistogramCumulative distribution\n\n\n\n\nCode\ntemp &lt;- N_P_rhin_meuse %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    capacity = sum(capacity, na.rm = T)/10^6, #capacity in million PE\n    nb_WWTP = n()\n  )\n\nn_min &lt;- first(temp$nb_WWTP)\nn_max &lt;- last(temp$nb_WWTP)\ncapacity_min &lt;- round(first(temp$capacity), digits=1)\ncapacity_max &lt;- round(last(temp$capacity), digits=1)\n\n\nEven though the number of listed plants in the data base increases from 423 to 865 (a 104% increase) between 1996 and 2021, the total capacity only increases by 28% from 5.3 to 6.8 million Population Equivalent.\nThis highlights the fact that unreported plants are mostly small and that the plant size distribution is highly skewed, which is discussed in the following 3 tabs.\n\n\nCode\ncoef &lt;- max(temp$capacity)/max(temp$nb_WWTP)\nggplot(temp) +\n  geom_line(\n    aes(\n      Year, nb_WWTP, \n      color = \"number of reported facilities (left)\"\n      )\n    ) + \n  geom_line(\n    aes(\n      Year, capacity/coef, \n      color = \"total reported capacity (right)\"\n      )\n    ) + \n  scale_y_continuous(\n    limits = c(0, NA),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, \n        name=\"million Population Equivalent\"\n        )\n    ) +\n  labs(\n    title = \"Evolution of the reporting in the database\",\n    subtitle = \"in terms of number of WWTP reported and total reported capacity\",\n    y=\"\", x=\"\", \n    color=\"\", caption =Source\n  ) +\n  theme(\n    legend.position = c(0.7, 0.5)\n  )\n\n\n\n\n\n\n\nReported but not necessarily actual (cf low number of waste water treatment plants &lt; 200 EH)\n\n\nCode\ntemp &lt;- N_P_rhin_meuse %&gt;%\n  filter(is.na(capacity)==F) %&gt;%\n  select(Year, capacity, PE_bin) %&gt;%\n  group_by(Year, PE_bin) %&gt;%\n  summarise(\n    `capacity (million PE)` = sum(capacity)/10^6,\n    `number of stations` = n()\n  ) %&gt;% \n  gather(key=capacity_or_n, value = value, `capacity (million PE)`, `number of stations`)\n\n\n\nAbsoluteRelative\n\n\n\n\nCode\nggplot(temp) + \n  geom_area(aes(Year, value, fill=PE_bin)) + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"For each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) + \n  geom_area(aes(Year, value, fill=PE_bin), position = \"fill\") + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"Proportion of each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_rhin_meuse %&gt;% filter(Year==Year_analysis)\nggplot(temp) + \n  geom_histogram(\n    aes(\n      capacity, \n      fill = \"Nb of facilities\"\n      ), \n    n=100, alpha=.4, stat=\"density\"\n    ) +\n  geom_histogram(\n    aes(\n      capacity, weight = capacity, \n      fill=\"Nb of facilities weighted by capacity\"\n      ), \n    n=100, alpha=.4, stat=\"density\"\n    ) +\n  theme(\n    legend.position = c(0.7,0.8),\n  ) +\n  labs(\n    x=\"Waste Water Treatment Plant Capacity \\n(Population Equivalent)\",\n    y=\"Distribution density\",\n    fill=\"Distribution of\",\n    title = paste(\"WWTP capacities distribution,\", Year_analysis),\n    subtitle = \"raw of weighted by capacity\"\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    )\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_rhin_meuse %&gt;% \n  ungroup() %&gt;%\n  filter(Year==Year_analysis) %&gt;% \n  select(code_WWTP, name_WWTP, capacity) %&gt;%\n  filter(is.na(capacity) == F) %&gt;%\n  arrange(desc(capacity)) %&gt;%\n  mutate( \n    cumulative_capacity = cumsum(capacity)/10^6,\n    rank_STEU = rank(-capacity, ties.method = \"first\"),\n    percent_cumulative_capacity = round(cumulative_capacity/sum(capacity/10^6)*100, digits = 1),\n    percent_rank = round(rank_STEU/n()*100, digits = 1)\n    ) \n\nf_save_csv_files(\n  temp %&gt;% mutate(basin = \"Rhin-Meuse\"), \n  \"output_data/zipf_law/\",\n  \"zipf_law_02_rhin_meuse.csv\"\n)\n\ncoef &lt;- max(temp$rank_STEU)/100\ncoef2 &lt;- max(temp$cumulative_capacity)/100\n\n\n\nNb of WWTPs vs Capacity (linear scale)Nb of WWTPs vs Capacity (log scale)Zipf law\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(\n      x = percent_rank, y = percent_cumulative_capacity\n      )\n    ) + \n  labs(\n    title = paste(\"Cumulative distribution,\", Year_analysis),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) +\n  scale_x_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions PE)\"\n        )\n    ) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(\n      x = percent_rank, y = percent_cumulative_capacity\n      )\n    ) + \n  labs(\n    title = paste(\"Cumulative distribution,\", Year_analysis),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, \n        name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions Population Equivalent)\"\n        )\n    ) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_point(\n    aes(\n      x = rank_STEU, y = capacity\n      )\n    ) + \n  labs(\n    title = paste(\"WWTP capacity vs rank,\", Year_analysis),\n    subtitle = \"looking for a Zipf law\",\n    x=\"Waste Water Treatment Plant \\n(ranked by capacity)\",\n    y=\" Waste Water Treatment Plant capacity\\n(Population Equivalent)\"\n    ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    ) + \n  scale_y_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\nPollution flows\n\nData Quality : reporting ratesBasin scaleReal flow extrapolation\n\n\nNavigate through tabs below to see details for each pollutant. For each pollutant, we present reporting for incoming and outgoing pollution, in terms of number of WWTP reporting the data or in terms of installed capacity.\nPollution reporting is excellent for NTK, PT, DBO5, DCO and MES. Starting 2005, NH4, NO2 and NO3 out are well reported. Incoming NH4, NO2 and NO3 is poorly reported. For NO2 and NO3, since they represent a negligible share of incoming N load, it is not a great concern. Its is more problematic for incoming NH4, with 10-15% of incoming capacity not reported.\n\n\nCode\n#function for plots : to be finished\nf_graph_reporting_nutrients &lt;- function(pollution_in, pollution_out){\n  temp &lt;- N_P_rhin_meuse %&gt;%\n    select(\n      Year, capacity, \n      !!as.symbol(pollution_in), !!as.symbol(pollution_out)\n      ) %&gt;%\n    mutate(\n      nutrient_in = is.na(!!as.symbol(pollution_in))==F,\n      nutrient_out = is.na(!!as.symbol(pollution_out))==F\n      ) %&gt;%\n    gather(\n      key=in_out_flow, \n      value = `reported pollution`, \n      nutrient_in, nutrient_out\n      ) %&gt;%\n    group_by(\n      Year, in_out_flow, `reported pollution`\n      ) %&gt;%\n    summarise(\n      `number of WWTP`=n(), \n      `capacity (million PE)` = sum(capacity, na.rm=T)/10^6\n      ) %&gt;%\n    gather(\n      key=n_or_capacity, \n      value = value, \n      `number of WWTP`, `capacity (million PE)`\n      ) %&gt;%\n    #renaming labels\n    mutate(\n      in_out_flow = case_when(\n        in_out_flow == \"nutrient_in\" ~ pollution_in,\n        in_out_flow == \"nutrient_out\" ~ pollution_out,\n      )\n    )\n\n  g &lt;- ggplot(temp) +\n    geom_area(aes(Year, value, fill=`reported pollution`)) +\n    facet_grid(\n      n_or_capacity~in_out_flow, \n      scales=\"free_y\", switch = \"y\") +\n    labs(\n      y=\"\", x=\"\",\n      title = \"Reporting of nutrient inflows (left) and outflows (right)\",\n      subtitle = \"In terms of total capacity (top) and nb of WWTP (bottom)\",\n      caption = Source\n      ) \n\n  return(g)\n}\n\n\n\nNGLNTKNH4NO2NO3PtDBO5DCOMES\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NGL_in\", \"NGL_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NTK_in\", \"NTK_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NH4_in\", \"NH4_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NO2_in\", \"NO2_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NO3_in\", \"NO3_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"Pt_in\", \"Pt_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"DBO5_in\", \"DBO5_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"DCO_in\", \"DCO_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"MES_in\", \"MES_out\")\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#changing the graph function to change the subtitle (before data cleaning =&gt; after data cleaning)\nf_graph_nutrient &lt;- function(dataset, nutrient_in, nutrient_out, label, legend_x, legend_y){\n  p &lt;- ggplot(dataset) + \n    #nutrient inflow\n    geom_line(\n      aes(\n        Year, \n        !!as.symbol(nutrient_in), \n        color=nutrient_in\n        )\n      ) + \n    #nutrient outflow\n    geom_line(\n      aes(\n        Year,\n        !!as.symbol(nutrient_out), \n        color = nutrient_out\n        )\n      ) +\n    ylim(0, NA) +\n    theme(\n      legend.position = c(legend_x, legend_y), \n      legend.title = element_blank()\n      ) +\n    labs(\n      x=\"\", y=paste(\"kt of\", label) , \n      title = paste(\"Reported\", label, \"flows in Rhin-Meuse WWTPs\") ,\n      subtitle = \"reported, not necessarily actual ; here after data cleaning\", \n      caption = Source\n      ) \n  return(p)\n}\n\n\n\nNTKNH4NO2NO3All N% All N forms% NH4 / NTKPtDBO5DCOMES\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"NTK_in\", \"NTK_out\", \"NTK\", 0.7, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"NH4_in\", \"NH4_out\", \"NH4\", 0.7, 0.2)\n\n\n\n\n\n\n\nDue to the very low quantities of NO2, noise remains in the data even after data cleaning but the order of magnitude can be seen.\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"NO2_in\", \"NO2_out\", \"NO2\", 0.6, 0.7)\n\n\n\n\n\n\n\nDue to the very low quantities of NO3, noise remains in the data even after data cleaning, but the order of magnitude can be seen.\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"NO3_in\", \"NO3_out\", \"NO3\", 0.4, 0.5)\n\n\n\n\n\n\n\nReleased total N has been halved, mostly due to decrease in outgoing NTK. Released NO3 remained roughly the same.\n\n\nCode\n# N in data preparation\ntemp &lt;- basin_N_P_rhin_meuse %&gt;% select(Year, NTK_in, NO2_in, NO3_in) %&gt;%\n  gather(key = N_type, value = kt, NTK_in, NO2_in, NO3_in)\n# N out preaparation\ntemp2 &lt;- basin_N_P_rhin_meuse %&gt;% \n  #renaming for the legend\n  select(Year, NTK=NTK_out, NO2=NO2_out, NO3=NO3_out) %&gt;%\n  gather(key = N_type, value = kt, NTK, NO2, NO3)\n\n#graphs\nplot_grid(\n  ggplot(temp) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_rhin_meuse, \n      aes(\n        Year, NH4_in\n        )\n      ) +\n    theme(legend.position = \"none\") +\n    annotate(\"text\", x=2007, y=10, label=\"NH4\") +\n    labs(\n      x=\"\", y=\"kt of N\", \n      title = \"Reported N flows in Rhin-Meuse WWTPs\",\n      subtitle = \"Inflows\",\n      caption=\"\"\n    ) +\n    ylim(0, 18),\n  ggplot(temp2) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_rhin_meuse, \n      aes(\n        Year, NH4_out\n        )\n      ) +\n    theme(\n      legend.position = c(0.6, 0.6), \n      legend.title = element_blank()\n      ) +\n    annotate(\n      \"text\", label=\"NH4\", \n      x=1998, y=1.5\n      ) +\n    labs(\n      x=\"\", y=\"\", \n      title = \"\",\n      subtitle = \"Outflows\",\n      caption=Source\n    ) + \n    ylim(0, 18),\n  align = \"hv\"\n)\n\n\n\n\n\n\n\n\n\nCode\n# N in data preparation\ntemp &lt;- basin_N_P_rhin_meuse %&gt;% select(Year, NTK_in, NO2_in, NO3_in) %&gt;%\n  gather(key = N_type, value = kt, NTK_in, NO2_in, NO3_in)\n# N out preaparation\ntemp2 &lt;- basin_N_P_rhin_meuse %&gt;% \n  #renaming for the legend\n  select(Year, NTK=NTK_out, NO2=NO2_out, NO3=NO3_out) %&gt;%\n  gather(key = N_type, value = kt, NTK, NO2, NO3)\n\n#graphs\nplot_grid(\n  #inflow\n  ggplot(temp) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        ),\n      position = \"fill\"\n      ) +\n    geom_line(\n      data = basin_N_P_rhin_meuse, \n      aes(\n        Year, NH4_in/(NTK_in+NO3_in+NO2_in)\n        )\n      ) +\n    theme(legend.position = \"none\") +\n    annotate(\"text\", x=2007, y=0.4, label=\"NH4\") +\n    labs(\n      x=\"\", y=\"kt of N\", \n      title = \"Reported share N flows in Rhin-Meuse WWTPs\",\n      subtitle = \"Inflows\",\n      caption=\"\"\n    ),\n  #outflow\n  ggplot(temp2) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        ),\n      position=\"fill\"\n      ) +\n    geom_line(\n      data = basin_N_P_rhin_meuse, \n      aes(\n        Year, NH4_out/(NTK_out+NO3_out+NO2_out)\n        )\n      ) +\n    theme(\n      legend.position = \"bottom\", \n      legend.title = element_blank()\n      ) +\n    annotate(\n      \"text\", label=\"NH4\", \n      x=1998, y=0.6\n      ) +\n    labs(\n      x=\"\", y=\"\", \n      title = \"\",\n      subtitle = \"Outflows\",\n      caption=Source\n    ),\n  align = \"hv\", axis=\"tblr\"\n)\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_rhin_meuse) +\n  geom_line(aes(Year, NH4_in/NTK_in*100, color=\"inflow\")) +\n  geom_line(aes(Year, NH4_out/NTK_out*100, color=\"outflow\")) +\n  ylim(0, 100) +\n  theme(legend.position = c(0.3, 0.3)) +\n  labs(\n    y=\"%\", x=\"\", color=\"\",\n    title = \"Share of NH4 in NTK\",\n    subtitle = \"reported, no necessarily actual ; here after data cleaning\",\n    caption=Source\n    )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"Pt_in\", \"Pt_out\", \"Pt\", 0.4, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"DBO5_in\", \"DBO5_out\", \"DBO5\", 0.4, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"DCO_in\", \"DCO_out\", \"DCO\", 0.4, 0.5)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_rhin_meuse, \"MES_in\", \"MES_out\", \"MES\", 0.4, 0.5)\n\n\n\n\n\n\n\n\n\n\nWe extrapolate the flows at the basin scale for the plants not reporting them. For that, we use a coefficient proportionate to the unreported capacity of the given nutrient flow (see data quality tab).\n\nCoefficient calculationPtNGLDBO5DCOMES\n\n\nWe compute in terms of installed capacity the reported and unreported flows for NGL, Pt, DBO5, DCO and MES. We do this for each year and for each capacity category.\n\n\nCode\n#create file of reported \ntemp &lt;- N_P_rhin_meuse %&gt;%\n  select(\n    Year, PE_bin, capacity, \n    Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    ) %&gt;%\n  #spots unreported values for each nutrient flow\n  mutate(\n    across(\n      c(Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out),\n      ~ is.na(.x)==F\n      )\n    ) %&gt;%\n  #gather to ba able to then group by flow and count capacity\n  gather(\n    key=nutrient_flow, \n    value = reported_pollution, \n    Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    )  %&gt;%\n  #count reported capacity and unreported capacity for each (Year, capacity category, nutrient flow)\n  group_by(\n    Year, PE_bin, nutrient_flow, reported_pollution\n    ) %&gt;%\n  summarise(\n    capacity = sum(capacity, na.rm=T)/10^6\n    ) %&gt;%\n  #creates reported/unreported names for each nutrient flow and spreads into columns\n  mutate(\n    nutrient_flow = case_when(\n      reported_pollution == T ~ paste0(nutrient_flow, \"_reported\"),\n      reported_pollution == F ~ paste0(nutrient_flow, \"_unreported\")\n    )\n  ) %&gt;%\n  select(-reported_pollution) %&gt;%\n  spread(nutrient_flow, capacity)\n\n# NA values replaced by 0 for future coeff computation\ntemp[is.na(temp)] &lt;- 0\n\n\nFrom this we compute proportionate coefficient to extrapolate real flows.\n\n\nCode\ntemp &lt;- temp %&gt;%\n  mutate(\n    #Pt\n    Pt_in_coeff = (Pt_in_reported + Pt_in_unreported)/Pt_in_reported,\n    Pt_out_coeff = (Pt_out_reported + Pt_out_unreported)/Pt_out_reported,\n    #NGL\n    NGL_in_coeff = (NGL_in_reported + NGL_in_unreported)/NGL_in_reported,\n    NGL_out_coeff = (NGL_out_reported + NGL_out_unreported)/NGL_out_reported,\n    #DBO5\n    DBO5_in_coeff = (DBO5_in_reported + DBO5_in_unreported)/DBO5_in_reported,\n    DBO5_out_coeff = (DBO5_out_reported + DBO5_out_unreported)/DBO5_out_reported,\n    #DCO\n    DCO_in_coeff = (DCO_in_reported + DCO_in_unreported)/DCO_in_reported,\n    DCO_out_coeff = (DCO_out_reported + DCO_out_unreported)/DCO_out_reported,\n    #MES\n    MES_in_coeff = (MES_in_reported + MES_in_unreported)/MES_in_reported,\n    MES_out_coeff = (MES_out_reported + MES_out_unreported)/MES_out_reported,\n  ) %&gt;%\n  select(\n    -c(\n      Pt_in_reported, Pt_in_unreported,\n      Pt_out_reported, Pt_out_unreported,\n      NGL_in_reported, NGL_in_unreported,\n      NGL_out_reported, NGL_out_unreported,\n      DBO5_in_reported, DBO5_in_unreported,\n      DBO5_out_reported, DBO5_out_unreported,\n      DCO_in_reported, DCO_in_unreported, \n      DCO_out_reported, DCO_out_unreported, \n      MES_in_reported, MES_in_unreported, \n      MES_out_reported, MES_out_unreported\n      )\n    )\n\n#replace Inf values by 1 (check if it does not create problems)\ntemp[temp == Inf] &lt;- 1\ntemp[is.na(temp)] &lt;- 1\n\n\nWith these coefficients we compute the adjusted flows\n\n\nCode\n#file with reported flows and adjustment coefficient\ntemp2 &lt;- left_join(\n  basin_PE_N_P_rhin_meuse %&gt;%\n    #selects only flows and not yields or ratios\n    select(\n      Year, PE_bin, \n      Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    ),\n  temp, by=c(\"Year\", \"PE_bin\")\n)\n\n#computes adjusted flows\ntemp2 &lt;- temp2 %&gt;%\n  mutate(\n    #Pt\n    Pt_in_adj = round(Pt_in_coeff*Pt_in, 5),\n    Pt_out_adj = round(Pt_out_coeff*Pt_out, 5),\n    #NGL\n    NGL_in_adj = round(NGL_in_coeff*NGL_in, 5),\n    NGL_out_adj = round(NGL_out_coeff*NGL_out, 5),\n    #DBO5\n    DBO5_in_adj = round(DBO5_in_coeff*DBO5_in, 5),\n    DBO5_out_adj = round(DBO5_out_coeff*DBO5_out, 5),\n    #DCO\n    DCO_in_adj = round(DCO_in_coeff*DCO_in, 5),\n    DCO_out_adj = round(DCO_out_coeff*DCO_out, 5),\n    #MES\n    MES_in_adj = round(MES_in_coeff*MES_in, 5),\n    MES_out_adj = round(MES_out_coeff*MES_out, 5)\n  ) %&gt;%\n  #we remove coefficients and unajusted flows\n  select(\n    -c(\n      Pt_in, Pt_in_coeff, Pt_out, Pt_out_coeff,\n      NGL_in, NGL_in_coeff, NGL_out, NGL_out_coeff,\n      DBO5_in, DBO5_in_coeff, DBO5_out, DBO5_out_coeff,\n      DCO_in, DCO_in_coeff, DCO_out, DCO_out_coeff, \n      MES_in, MES_in_coeff, MES_out, MES_out_coeff\n    )\n  )\n\n\nWe add these adjusted flows to the main files reporting flows at the basin scale\n\n\nCode\n#adding adjusted flows to the basin x capacity files\nbasin_PE_N_P_rhin_meuse &lt;- left_join(\n  basin_PE_N_P_rhin_meuse, temp2, by=c(\"Year\", \"PE_bin\")\n)\n\n#aggregating adjusted flows at the basin scale without the capacity categories\ntemp &lt;- temp2 %&gt;%\n  select(-PE_bin) %&gt;%\n  group_by(Year) %&gt;%\n  summarise_all(~signif(sum(.x), 3))\n\n#adding adjusted flows to the basin files\nbasin_N_P_rhin_meuse &lt;- left_join(\n  basin_N_P_rhin_meuse, temp, by=\"Year\"\n)\n\n\nWe plot the comparison reported / adjusted in the following graphs. For the Rhin-Meuse basin, the difference is very marginal.\n\n\nCode\nf_graph_adjusted &lt;- function(basin_file, basin_PE_file, nutrient_adjusted, nutrient_reported, nutrient_label){\n  g &lt;- plot_grid(\n    ggplot(basin_PE_file) +\n      geom_line(\n        data = basin_file,\n        aes(Year, !!as.symbol(nutrient_adjusted)), \n        color=\"black\", size=1\n        ) + \n      geom_area(\n        aes(Year, !!as.symbol(nutrient_reported), fill=PE_bin), \n        alpha=.7\n        ) + \n      theme(legend.position = \"none\") +\n      labs(\n        x=\"\", y=\"kt per year\",\n        caption = \"\\n\",\n        title = paste(\"Adjusted\", nutrient_label, \"flows\")\n    ),\n    ggplot(basin_PE_file) +\n      geom_line(\n        aes(Year, !!as.symbol(nutrient_adjusted), color=PE_bin), \n        size=1\n        ) + \n      geom_area(\n        aes(Year, !!as.symbol(nutrient_reported), fill=PE_bin), \n        alpha=.7\n        ) + \n      theme(legend.position = \"none\") +\n      facet_wrap(vars(PE_bin), scales=\"free\") +\n      labs(\n        x=\"\", y=\"\",\n        caption = Source,\n        title = \"\",\n        subtitle = \"line: adjusted flow ; area: reported flow\"\n      ),\n    rel_widths = c(0.3, 0.7)\n  )\n  return(g)\n}\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhin_meuse, \n  basin_PE_N_P_rhin_meuse,\n  \"Pt_in_adj\", \"Pt_in\", \"incoming Pt\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhin_meuse, \n  basin_PE_N_P_rhin_meuse,\n  \"Pt_out_adj\", \"Pt_out\", \"discharged Pt\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhin_meuse, \n  basin_PE_N_P_rhin_meuse,\n  \"NGL_in_adj\", \"NGL_in\", \"incoming NGL\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhin_meuse, \n  basin_PE_N_P_rhin_meuse,\n  \"NGL_out_adj\", \"NGL_out\", \"discharged NGL\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhin_meuse, \n  basin_PE_N_P_rhin_meuse,\n  \"DBO5_in_adj\", \"DBO5_in\", \"incoming DBO5\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhin_meuse, \n  basin_PE_N_P_rhin_meuse,\n  \"DBO5_out_adj\", \"DBO5_out\", \"discharged DBO5\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhin_meuse, \n  basin_PE_N_P_rhin_meuse,\n  \"DCO_in_adj\", \"DCO_in\", \"incoming DCO\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhin_meuse, \n  basin_PE_N_P_rhin_meuse,\n  \"DCO_out_adj\", \"DCO_out\", \"discharged DCO\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhin_meuse, \n  basin_PE_N_P_rhin_meuse,\n  \"MES_in_adj\", \"MES_in\", \"incoming MES\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_rhin_meuse, \n  basin_PE_N_P_rhin_meuse,\n  \"MES_out_adj\", \"MES_out\", \"discharged MES\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRatios\n\nBasin scale\n\n\n\nN:PDCO:DBO5DBO5:N vs DBO5:P\n\n\n\n\nCode\n#temporal P/N ratio\nggplot(basin_N_P_rhin_meuse) + \n  geom_line(aes(Year, N_P_ratio_in, color=\"N:P in\")) + \n  geom_line(aes(Year, N_P_ratio_out, color = \"N:P out\")) + \n  ylim(0, NA) +\n  theme(\n    legend.position = c(0.7, 0.6)\n  ) +\n  labs(\n    x=\"\", y=\"N:P ratio\",\n    title = \"N:P ratio in Rhin-Meuse basin\",\n    subtitle = \"increase over time reflect phosphate detergent ban\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_rhin_meuse) + \n  geom_line(aes(Year, DCO_DBO5_ratio_in, color=\"DCO:DBO5 in\")) + \n  geom_line(aes(Year, DCO_DBO5_ratio_out, color = \"DCO:DBO5 out\")) + \n  ylim(0, NA) +\n  theme(\n    legend.position = c(0.7, 0.6)\n  ) +\n  labs(\n    x=\"\", y=\"DCO:DBO5 ratio\",\n    title = \"DCO:DBO5 ratio in Rhin-Meuse basin\",\n    subtitle = \"decrease in outflow shows biodegradation\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_rhin_meuse) + \n  geom_point(\n    aes(\n      DBO5_N_ratio_in, DBO5_P_ratio_in, \n      color=Year_category\n      )\n    ) +\n  geom_point(\n    aes(\n      DBO5_N_ratio_out, DBO5_P_ratio_out, \n      color=Year_category\n        )\n    ) +\n  ylim(0, NA) +\n  annotate(\n    geom=\"text\", label =\"inflow\",\n    x=4, y=25\n  ) +\n  annotate(\n    geom=\"text\", label =\"outflow\",\n    x=1.3, y=8\n  ) +\n  labs(\n    x=\"DBO5:Pt ratio\", y=\"DBO5:NGL ratio\",\n    title = \"DBO5:NGL vs DBO5:Pt ratio in Rhin-Meuse basin WWTPs\",\n    subtitle = \"decrease in outflow shows biodegradation\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nBasin yield\n\nBasinBasin x Capacity\n\n\n\n\nCode\nggplot(basin_N_P_rhin_meuse) + \n  geom_line(aes(Year, Pt_yield, color=\"P\")) + \n  geom_line(aes(Year, NGL_yield, color = \"N\")) + \n  geom_line(aes(Year, DBO5_yield, color = \"DBO5\")) +\n  geom_line(aes(Year, DCO_yield, color = \"DCO\")) +\n  geom_line(aes(Year, MES_yield, color = \"MES\")) +\n  ylim(0,100) +\n  theme(legend.position = c(0.7, 0.3)) +\n  labs(\n    title = \"Global abatement rate of Rhin-Meuse WWTPs\", \n    x=\"\", y=\"Yield (%)\", color=\"\",\n    caption = Source\n    )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE &lt;- function(dataset, nutrient_yield, nutrient_label){\n  g &lt;- ggplot(dataset %&gt;% filter(PE_bin !=\"unreported PE\")) +\n    geom_line(aes(Year, !!as.symbol(nutrient_yield), color=PE_bin)) + \n    ylim(0,100) +\n    theme(legend.position = c(0.7, 0.3)) +\n    labs(\n      title = paste(\"Global\", nutrient_label, \"yield of Rhin-Meuse basin\"), \n      subtitle = \"by capacity (population equivalent)\",\n      x=\"\", y=\"Yield (%)\", color=\"\",\n      caption = Source\n      )\n  return(g)\n}\n\n\n\nPtNGLDBO5DCOMES\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_rhin_meuse %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"Pt_yield\", \"Pt\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_rhin_meuse %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"NGL_yield\", \"NGL\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_rhin_meuse %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"DBO5_yield\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_rhin_meuse %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"DCO_yield\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_rhin_meuse %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"MES_yield\", \"MES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave data\nWe save the final data.\n\n\nCode\n#all WWTP file\npath_output &lt;- \"output_data/all_WWTP/\"\ntemp &lt;- N_P_rhin_meuse %&gt;%\n  select(\n    code_WWTP, name_WWTP, Year, capacity, name_commune, INSEE_COM, lat_WWTP, long_WWTP, PE_bin,\n    DBO5_in, DCO_in, MES_in, NGL_in, NTK_in, NH4_in, NO3_in, NO2_in, Pt_in,\n    DBO5_out, DCO_out, MES_out, NGL_out, NTK_out, NH4_out, NO3_out, NO2_out, Pt_out,\n    DBO5_yield, DCO_yield, MES_yield, NGL_yield, Pt_yield,\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"all_WWTP_02_rhin_meuse.csv\"\n)\n\n#basin agregated file\npath_output &lt;- \"output_data/basins/\"\ntemp &lt;- basin_N_P_rhin_meuse %&gt;%\n  select(\n    Year, capacity, nb_WWTP,\n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_02_rhin_meuse.csv\"\n)\n\n#basin x PE agregated file\npath_output &lt;- \"output_data/basins_PE/\"\ntemp &lt;- basin_PE_N_P_rhin_meuse %&gt;%\n  select(\n    Year, capacity, nb_WWTP, PE_bin, \n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_PE_02_rhin_meuse.csv\"\n)\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "0_sludge_composition.html",
    "href": "0_sludge_composition.html",
    "title": "Sludge Composition",
    "section": "",
    "text": "This page describes the data source used to estimate the N content of wastewater treatment plants sludge in our study, based on N:P ratio (we know the P content of sludge). The composition values listed here are also used to assess the coherence of our results.\n\n\nCode\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(plot.title = element_text(face=\"bold\"))\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\nSource &lt;- \"Sources: Water Agencies\\nComputation Thomas Starck\"\n\n# Load the function file\nsource(\"functions.R\")\n\n\n\nEsco MAFOR\nWe use a French review (collective scientific expertise) on organic fertilizers, called Esco MAFOR. Link to the review (values used page 413).\n\nReviewMean values used for our study\n\n\nBelow are the P content, N content and N:P ratio in the reported studies, for composted and not composted urban sludge. Mohanty et al. (2006) seems to be an outlier due to very low P content and high N:P ratio. We will exclude it in the following.\n\n\nCode\n#path of the data\npath_source &lt;- \"source_data/0_sludge_composition/\"\n\n#load data on sludge composition\nreview_sludge &lt;- read_csv(paste0(path_source, \"sludge_composition_ESCO_MAFOR.csv\")) \nreview_sludge$compost &lt;- factor(\n  review_sludge$compost,\n  c(\"not composted\", \"composted\")\n)\n\n#caption of the graphs\nSource &lt;- \"Source: French Collective Scientific Expertise on\\nOrganic Fertilizers, 2014\"\n\n\n\n\nCode\n#function to plot sludge composition\ng_composition &lt;- function(dataset, select_variable){\n  \n  #order studies by increasing value\n  dataset$Study &lt;- reorder(dataset$Study, dataset %&gt;% pull(!!as.symbol(select_variable)))\n  \n  #remove empty values\n  dataset &lt;- dataset %&gt;% filter(is.na(!!as.symbol(select_variable))==F)\n  \n  #plot\n  ggplot(dataset) +\n    geom_col(aes(Study, !!as.symbol(select_variable), fill=compost)) +\n    geom_text(\n      aes(Study, !!as.symbol(select_variable), label=!!as.symbol(select_variable)),\n      hjust=0, fontface=\"italic\"\n      ) +\n    coord_flip() +\n    theme(\n      legend.position = \"none\"\n      ) +\n    labs(\n      x=\"\", y=\"\", \n      fill = \"\", \n      caption = Source\n    ) +\n    facet_wrap(vars(compost))\n}\n\n\n\n\nCode\n#we use rounded values for the graph\nrounded_values &lt;- review_sludge %&gt;%\n  mutate(\n    P = round(P, 0), \n    N= round(N, 0),\n    N_P_ratio = round(N_P_ratio, 1)\n  )\n\n\n\nPNN:P ratio\n\n\n\n\nCode\ng_composition(rounded_values, \"P\") +\n  labs(\n    title = \"Review of P content in urban sludge\",\n    subtitle = \"g of P per kg of Dry Matter\"\n  ) +\n  ylim(0, 40)\n\n\n\n\n\n\n\n\n\nCode\ng_composition(rounded_values, \"N\") +\n  labs(\n    title = \"Review of N content in urban sludge\",\n    subtitle = \"g of N per kg of Dry Matter\"\n  ) +\n  ylim(0, 50)\n\n\n\n\n\n\n\n\n\nCode\ng_composition(rounded_values, \"N_P_ratio\") +\n  labs(\n    title = \"Review of N:P ratio in urban sludge\",\n    subtitle = \"\"\n  ) +\n  ylim(0, 8)\n\n\n\n\n\nCode\nggsave(#svg\n  \"graphs/sludge_ratio_review.svg\",\n  dpi=500, width=6, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#pdf\n  \"graphs/sludge_ratio_review.pdf\",\n  dpi=500, width=6, height=4, bg=\"white\", create.dir = T\n  )\nggsave(#png\n  \"graphs/sludge_ratio_review.png\",\n  dpi=500, width=6, height=4, bg=\"white\", create.dir = T\n  )\n\n\n\n\n\n\n\nFor P and N:P values, we remove the Mohanty et al. (2006) value which seems to be an outlier. Composted values are indicative, we will not use them because there are only 2 very old studies.\nWe compute 2 different mean values for the N:P ratio.\n\nThe mean of the ratios, based on the 6 values\n\nThe ratio of the N and P average contents, based on 13 P values and 7 N values\n\nFor first method gives a ratio of 2.2, the second 1.5. We will use a ratio of 2 for our study.\n\n\nCode\n#mean P content no composted\ntemp &lt;- review_sludge %&gt;% filter(compost==\"not composted\", Study!= \"Mohanty et al., 2006\")\nmean_P_no_compost &lt;- round(mean(temp$P, na.rm=T), 0)\n\n#mean P content composted\ntemp &lt;- review_sludge %&gt;% filter(Study!= \"Mohanty et al., 2006\" & compost==\"composted\")\nmean_P_compost &lt;- round(mean(temp$P, na.rm=T), 0)\n\n#mean N content not composted\ntemp &lt;- review_sludge %&gt;% filter(compost==\"not composted\")\nmean_N_no_compost &lt;- round(mean(temp$N, na.rm=T), 0)\n\n#mean N content composted\ntemp &lt;- review_sludge %&gt;% filter(compost==\"composted\")\nmean_N_compost &lt;- round(mean(temp$N, na.rm=T), 0)\n\n#mean N:P ratio not composted\ntemp &lt;- review_sludge %&gt;% filter(compost==\"not composted\", Study!= \"Mohanty et al., 2006\")\nmean_ratio_NP_no_compost &lt;- round(mean(temp$N_P_ratio, na.rm=T), 1)\n\n#mean N:P ratio composted\ntemp &lt;- review_sludge %&gt;% filter(compost==\"composted\")\nmean_ratio_NP_compost &lt;- round(mean(temp$N_P_ratio, na.rm=T), 1)\n\n#ratio of means N and P no compost\nratio_means_NP_no_compost &lt;- round(mean_N_no_compost/mean_P_no_compost, 1)\n\n#ratio of means N and P compost\nratio_means_NP_compost &lt;- round(mean_N_compost/mean_P_compost, 1)\n\n#create dataset of computed values\nmean_values &lt;- data.frame(\n  compost = c(\"not composted\", \"composted\"),\n  P = c(mean_P_no_compost, mean_P_compost),\n  N = c(mean_N_no_compost, mean_N_compost),\n  N_P_mean_of_ratios = c(mean_ratio_NP_no_compost, mean_ratio_NP_compost),\n  N_P_ratio_of_means = c(ratio_means_NP_no_compost, ratio_means_NP_compost),\n  N_P_ratio = c(2, 0.9)\n)\nmean_values$compost &lt;- factor(\n  mean_values$compost,\n  c(\"not composted\", \"composted\")\n)\n\n#save computed values\nf_save_csv_files(\n  mean_values, \n  \"output_data/sludge_composition/\",\n  \"N_P_sludge_review.csv\"\n)\n\n\n\nPNN:P ratio\n\n\n\n\nCode\ng_composition(rounded_values %&gt;% filter(Study!= \"Mohanty et al., 2006\"), \"P\") +\n  labs(\n    title = \"Review of P content in urban sludge\",\n    subtitle = \"g of P per kg of Dry Matter\"\n  ) +\n  ylim(0, 40) +\n  geom_hline(data = mean_values, aes(yintercept=P), linetype=\"dashed\") +\n  geom_text(\n    data = mean_values, hjust=-0.2, family = \"Times New Roman\", fontface = \"italic\",\n    aes(x=\"Traore et al., 1999\", y=P, label=paste(\"mean:\", P))\n    )\n\n\n\n\n\n\n\n\n\nCode\ng_composition(rounded_values, \"N\") +\n  labs(\n    title = \"Review of N content in urban sludge\",\n    subtitle = \"g of N per kg of Dry Matter\"\n  ) +\n  ylim(0, 50) +\n  geom_hline(data = mean_values, aes(yintercept=N), linetype=\"dashed\") +\n  geom_text(\n    data = mean_values, hjust=-0.2, family = \"Times New Roman\", fontface = \"italic\",\n    aes(x=\"Mohanty et al., 2006\", y=N, label=paste(\"mean:\", N))\n    )\n\n\n\n\n\n\n\n\n\nCode\ng_composition(rounded_values %&gt;% filter(Study!= \"Mohanty et al., 2006\"), \"N_P_ratio\") +\n  labs(\n    title = \"Review of N:P ratio in urban sludge\",\n    subtitle = \"we will use a N:P ratio of 2 for uncomposted sludge\"\n  ) +\n  ylim(0, 4) +\n  #mean of ratios\n  geom_hline(data = mean_values, aes(yintercept=N_P_mean_of_ratios, linetype=\"mean of ratios\")) +\n  geom_text(\n    data = mean_values, hjust=-0.2, family = \"Times New Roman\", fontface = \"italic\",\n    aes(x=c(\"Sikora et al., 1982\", \"Traore et al., 1999\"), y=N_P_mean_of_ratios, label= N_P_mean_of_ratios)\n    ) +\n  #ratio of means\n  geom_hline(data = mean_values, aes(yintercept=N_P_ratio_of_means, linetype=\"ratio of means\")) +\n  geom_text(\n    data = mean_values, hjust=1.2, family = \"Times New Roman\", fontface = \"italic\",\n    aes(x=c(\"Sikora et al., 1982\", \"Traore et al., 1999\"), y=N_P_ratio_of_means, label= N_P_ratio_of_means)\n    ) +\n  theme(legend.position = \"top\") +\n  labs(linetype=\"\") + \n  guides(fill = \"none\") #not showing composted/not composted legend\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "0_nutrient_excretions.html",
    "href": "0_nutrient_excretions.html",
    "title": "Nutrient Excretions",
    "section": "",
    "text": "This page describes the data used to estimate nitrogend and phosphorus excretions by French people.\n\n\nCode\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#loading additional relevant packages\nlibrary(cowplot) #for plot_grid(), multiple plots\nlibrary(DT) #for interactive tables\n\n#path for data \npath_output &lt;- \"output_data/nutrient_ingestion_excretion/\"\npath_source &lt;- \"source_data/0_nutrient_excretion/0_INCA3/\"\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(plot.title = element_text(face=\"bold\"))\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\nSource &lt;- \"Source: INCA3\\nComputation Thomas Starck\"\n\n# Load the function file\nsource(\"functions.R\")\n\n\n\nNutrient ingestion survey\n\nSourceLoading data\n\n\nData are from a survey and report by ANSES. All data and documentation are available on data.gouv. Three files describe the data : User guide (english), Nomenclature, Thesaurus. See also its publication in the scientific literature.\nThere is a R package reporting in details the data of this INCA3 survey (see here and here)\n\n\nCode\n#normally the INCA3 package should be installed in renv/library/R-4.3/aarch64-apple-darwin20/inca3\n#if this is not the case, you can uncomment the following line to install package from the internet\n#remotes::install_github(\"thinkr-open/inca3\", build_vignettes = FALSE)\n\nlibrary(inca3) #package inca with data on food ingestion\n\n\nHere are the data files available in the package (in user guide document) :\nused for our analysis\n\nDESCRIPTION_INDIV : used for age and sex of each individual. Also includes data on weight, height, BMI (not used)…\nAPPORTS_NUT_ALIM : used, reports synthetized daily nutrients intakes for each individuals (about 4000).\n\nnot used\n\nHABITUDES_INDIV, HABITUDES_MEN, ACTPHYS_SEDENT, FPQ : not used, describes individuals and households habits.\nCONSO_CA_PROD, CONSO_CA_INDIV : not used, tables about food supplements consumption.\nOCCASIONS : not used (day of consumption, location…).\nCONSO_COMPO_ALIM : very complete (250k obs, each individual, each aliment), not used because we do not need this level of precision.\nNOMENCLATURE : possibly to convert in different food groups, could be a key table\nGloboDiet_gpe_name ?\nCONSO_GPE_INCA3 : no used, food group names\n\n\n\nWe load a file we produced ourselves, to translate nutrients as reported by INCA3 data (nutriment1, nutriment2…) into plain language (see in the user guide p78).\n\n\nCode\n#my files for foodstuff group names and nutrient keys\nnutriments_contrib_INCA3 &lt;- read_csv(paste(path_source, \"nutriments_contrib_INCA3.csv\", sep=\"\"))\n\n\nThen we load the file reporting, for each individual, the nutrient intakes per day (40 000 observations). We only keep a few of them (K, P, protein, energy, carbohydrates, lipids)\n\n\nCode\n#quick glimpse at apports_nut_alim: nutriments for each individual\nglimpse(apports_nut_alim)\n#report individual ID, nutriments 1-54 (quantity/j), contribution 3-45 (%AESA, or for 100 kcal nutriment), 4114 individuals\n\n#load data of interest from apports_nut_alim\nfile_apports_nut_alim &lt;- \n  apports_nut_alim %&gt;% \n  # we only focus on individuals ID and nutrients: remove POPULATION column\n  select(-POPULATION) %&gt;%\n  #gather nutriments in 1 column\n  gather(\n    key = nutriment_contrib_nb, value = value_nutriment, nutriment1:contrib54\n    ) %&gt;%\n  #we join the nutriment column with our simplified nutrient names\n  left_join(\n    nutriments_contrib_INCA3, by=\"nutriment_contrib_nb\"\n    ) %&gt;%\n  #only select data on energy, carbohydrates, lipids, proteins, phosphorus, and potassium\n  filter(\n    nutriment_contrib_name %in% c(\n    \"Energie-Apport énergétique total (AET) (kcal/j)\", \n    \"Energie-Apport énergétique sans alcool (AESA) (kcal/j)\",\n    \"Protéines (g/j)\", \n    \"Glucides (g/j)\", \n    \"Lipides (g/j)\", \n    \"Phosphore (mg/j)\", \n    \"Potassium (mg/j)\", \n    \"Contribution des Protéines à l'AESA (%)\", \n    \"Contribution des Glucides à l'AESA (%)\", \n    \"Contribution des Lipides à l'AESA (%)\")\n    )\n\n\n#simplified file easier to handle: spread nutrients into columns\nfile_apports_nut_alim_simple &lt;- \n  file_apports_nut_alim %&gt;% \n  select(\n    ID = NOIND, \n    nutriment_contrib_name_simple, \n    value_nutriment\n    ) %&gt;%\n  spread(\n    nutriment_contrib_name_simple, value_nutriment\n    ) %&gt;%\n  #convert P and K intakes into g per day \n  mutate(\n    phosphorus = phosphorus/1000,\n    potassium = potassium/1000\n  )\n\n\nWe load the file describing each individual in the survey. We modify it, to create age categories (more or less precise) to later merge it with the data we have about French population in each city, by age class.\n\n\nCode\n#load file describing individuals\nfile_individuals &lt;- description_indiv %&gt;% \n  #select and rename variables of interest\n  select(\n    ID = NOIND, \n    sex = sex_PS, \n    age_class = tage_PS, \n    height = taille, \n    weight = poids, \n    BMI = imc\n    ) %&gt;% \n  #create fine and large age categories\n  mutate(\n    age_class_large = case_when(\n      age_class %in% c(1,2,3,4)~\"child (&lt;10 yr)\", \n      age_class %in% c(5,6)~\"adolescent (11-18 yr)\", \n      age_class %in% c(7,8,9)~\"adult (&gt;18 yr)\"),\n    age_class = case_when(\n      age_class == 1~\"&lt;1\", age_class == 2~\"1-3\", age_class == 3~\"4-6\", age_class == 4~\"7-10\", \n      age_class == 5~\"11-14\", age_class == 6~\"15-17\", \n      age_class == 7~\"18-44\", age_class == 8~\"45-64\", age_class == 9~\"65-79\")\n    ) %&gt;%\n  #male or female made more explicit\n    mutate(\n      sex = case_when(\n      sex == 1~\"M\", sex == 2~\"F\")\n      )\n\n#transform ages intervals into factors\nfile_individuals$age_class &lt;- \n  factor(file_individuals$age_class, levels = c(\"&lt;1\", \"1-3\", \"4-6\", \"7-10\", \"11-14\", \"15-17\", \"18-44\", \"45-64\", \"65-79\"))\n\n#transform large age categories into factors\nfile_individuals$age_class_large &lt;- \n  factor(\n    file_individuals$age_class_large, \n    levels = \n      c(\n        \"child (&lt;10 yr)\", \n        \"adolescent (11-18 yr)\", \n        \"adult (&gt;18 yr)\"\n        )\n    )\n\n#create and age median variable from ages intervals, used for our plots of intakes vs age\nfile_individuals &lt;- file_individuals %&gt;% mutate(\n  age_median = case_when(\n    age_class == \"&lt;1\" ~ 1,\n    age_class == \"1-3\" ~ 2,\n    age_class == \"4-6\" ~ 5,\n    age_class == \"7-10\" ~ 8.5,\n    age_class == \"11-14\" ~ 12.5,\n    age_class == \"15-17\" ~ 16,\n    age_class == \"18-44\" ~ 31,\n    age_class == \"45-64\" ~ 54.5,\n    age_class == \"65-79\" ~ 72)\n  )\n\n\nWe gather the nutrient intakes file and the individual description file, based on individuals IDs.\n\n\nCode\n#joining tables\nID_intakes_day &lt;- inner_join(file_individuals, file_apports_nut_alim_simple, by = \"ID\") %&gt;%\n  rename(energy = AET)\n\n\nTo convert proteins intake to nitrogen, we use Jone’s factor of 6.25.\n\n\nCode\n#jone's factor\nN_factor &lt;- 6.25\n#transform protein intakes to N intakes\nID_intakes_day &lt;- ID_intakes_day %&gt;%\n  mutate(nitrogen = proteins/N_factor)\n\n\n\n\n\n\n\nNutrient intakes by age and sex\nHere are presented micro and macronutrients intakes by age and sex.\n\n\nCode\n# temporary file summarizing nutrients intakes by (median) age and sex\ntemp &lt;- \n  # gather together the 2 following files\n  bind_rows(\n  # summarize data for both sexes together, precise age categories\n    ID_intakes_day %&gt;% \n      select(\n        sex, age_class, age_median, \n        energy, proteins, lipids, carbohydrates, \n        nitrogen, phosphorus, potassium\n        ) %&gt;%\n      mutate(\n        sex=\"both\"\n        ) %&gt;%\n      group_by(\n        sex, age_class, age_median\n        ) %&gt;%\n      summarise_all(\n        mean, na.rm=T\n        ),\n    # summarize data with discriminated sex (male/ffemale) and precise age categories\n    ID_intakes_day %&gt;% \n      select(\n        sex, age_class, age_median, \n        energy, proteins, lipids, carbohydrates, \n        nitrogen, phosphorus, potassium\n        ) %&gt;%\n      group_by(\n        sex, age_class, age_median\n        ) %&gt;%\n      summarise_all(\n        mean, na.rm=T\n        )\n    ) %&gt;%\n  select(\n    #reordering columns of interest\n    sex, age_class, age_median, \n    energy, carbohydrates, lipids, proteins, \n    nitrogen, phosphorus, potassium\n  ) %&gt;%\n  #3 significant digits\n  mutate(\n    across(\n      c(\n        energy, carbohydrates, lipids, proteins, \n        nitrogen, phosphorus, potassium\n        ), ~ signif(.x, 3)\n    )\n  )\n\n\n\n\nCode\n#function to plot evolution of nutrient intakes with age\nf_graph &lt;- function(dataset, nutrient_select, nutrient_label){\n  g &lt;- ggplot(dataset) + \n    geom_line(\n      aes(age_median, !!as.symbol(nutrient_select), color=sex)\n      ) + \n    scale_y_continuous(\n      limits = c(0, NA),\n      #second axis, intakes by year\n      sec.axis = \n        sec_axis(\n          trans=~.*(365/1000), \n          name=\"kg/year\"\n          )\n      ) +\n    theme(\n      legend.position = c(.8, .2)\n      ) + \n    labs(\n      title = paste(nutrient_label, \"intakes by age and sex\"), \n      x=\"Age\", y=\"g/day\",\n      caption = Source,\n      color= \"sex\"\n      )\n  return(g)\n}\n\n\n\nMicronutrientMacronutrientsTables\n\n\n\nNitrogenPhopshorusPotassium\n\n\n\n\nCode\nf_graph(temp, \"nitrogen\", \"N\") + \n  labs(\n    subtitle = paste(\"conversion from protein to nitrogen with\", N_factor, \"factor\")\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph(temp, \"phosphorus\", \"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph(temp, \"potassium\", \"K\")\n\n\n\n\n\n\n\n\n\n\n\nEnergyCarbohydratesLipidsProteins\n\n\n\n\nCode\nf_graph(temp, \"energy\", \"Energy\") +\n  labs(\n    y=\"kcal/day\"\n  ) +\n  #second axis, intakes by year\n  scale_y_continuous(\n      limits = c(0, NA),\n      sec.axis = \n        sec_axis(\n          trans=~.*(365/1000), \n          name=\"Mcal/year\"\n          )\n      )\n\n\n\n\n\n\n\n\n\nCode\nf_graph(temp, \"carbohydrates\", \"Carbohydrates\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph(temp, \"lipids\", \"Lipids\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph(temp, \"proteins\", \"Proteins\")\n\n\n\n\n\n\n\n\n\n\nWe do not yet give a mean value for whole France, because an unweighed mean would not consider the age distribution of the population and would give excessive weight to young population (which are less numerous). This issues is addressed in the next section Nutrient excretion in France, where you can see in the France tab the distribution of excretions by age categories. Our weighted national value can be seen in Comparison with litterature review\n\nby Sex and Age large categoriesby Sex and Age detailed categories\n\n\n\nper dayper year\n\n\n\n\nCode\n#nutrients x sex x large age category\ntemp &lt;- bind_rows(\n  #both sex together\n  ID_intakes_day %&gt;% \n    select(\n      sex, age_class_large, \n      energy, carbohydrates, lipids, proteins,\n      nitrogen, phosphorus, potassium\n      ) %&gt;%\n    mutate(sex=\"both\") %&gt;%\n    group_by(sex, age_class_large) %&gt;%\n    summarise_all(funs(signif(mean(., na.rm=T), 3))),\n  #discriminated sex\n  ID_intakes_day %&gt;% \n    select(\n      sex, age_class_large, \n      energy, carbohydrates, lipids, proteins,\n      nitrogen, phosphorus, potassium\n      ) %&gt;%\n    group_by(sex, age_class_large) %&gt;%\n    summarise_all(funs(signif(mean(., na.rm=T), 3)))\n  )\n\n#display table\ndatatable(\n  temp, \n  colnames = \n    c(\"sex\",\n      \"age\",\n      \"energy\\n(kcal/d)\",\n      \"carbohydrates\\n(g/d)\",\n      \"lipids\\n(g/d)\",\n      \"protein\\n(g/d)\",\n      \"N\\n(g/d)\",\n      \"P\\n(g/d)\",\n      \"K\\n(g/d)\"\n      ),\n  options = list(scrollX = TRUE, responsive = TRUE)\n  )\n\n\n\n\n\n\n\nCode\n#save data\nf_save_csv_files(\n  temp,\n  path_output,\n  \"nutrients_age_large_sex_g_per_day.csv\"\n)\n\n\n\n\n\n\nCode\n#change from per day to per year\ntemp &lt;- temp %&gt;%\n  mutate(\n    across(\n      c(\n        energy, carbohydrates, lipids, proteins,\n        nitrogen, phosphorus, potassium\n        ), ~signif(.x*(365/1000),3)\n      )\n    )\n\n#display table\ndatatable(\n  temp, \n  colnames = \n    c(\"sex\",\n      \"age\",\n      \"energy\\n(Mcal/yr)\",\n      \"carbohydrates\\n(kg/yr)\",\n      \"lipids\\n(kg/yr)\",\n      \"protein\\n(kg/yr)\",\n      \"N\\n(kg/yr)\",\n      \"P\\n(kg/yr)\",\n      \"K\\n(kg/yr)\"\n      ),\n  options = list(scrollX = TRUE, responsive = TRUE)\n  )\n\n\n\n\n\n\n\nCode\nf_save_csv_files(\n  temp,\n  path_output,\n  \"nutrients_age_large_sex_kg_per_year.csv\"\n)\n\n\n\n\n\n\n\n\nper dayper year\n\n\n\n\nCode\n#nutrients x sex x detailed age category\ntemp &lt;- bind_rows(\n  ID_intakes_day %&gt;% \n    select(\n      sex, age_class, \n      energy, carbohydrates, lipids, proteins,\n      nitrogen, phosphorus, potassium\n      ) %&gt;%\n    mutate(sex=\"both\") %&gt;%\n    group_by(sex, age_class) %&gt;%\n    summarise_all(funs(signif(mean(., na.rm=T), 3))),\n  ID_intakes_day %&gt;% \n    select(\n      sex, age_class, \n      energy, carbohydrates, lipids, proteins,\n      nitrogen, phosphorus, potassium\n      ) %&gt;%\n    group_by(sex, age_class) %&gt;%\n    summarise_all(funs(signif(mean(., na.rm=T), 3)))\n  )\n\n#display table\ndatatable(\n  temp, \n  colnames = \n    c(\"sex\",\n      \"age\",\n      \"energy\\n(kcal/d)\",\n      \"carbohydrates\\n(g/d)\",\n      \"lipids\\n(g/d)\",\n      \"protein\\n(g/d)\",\n      \"N\\n(g/d)\",\n      \"P\\n(g/d)\",\n      \"K\\n(g/d)\"\n      ),\n  options = list(scrollX = TRUE, responsive = TRUE)\n  )\n\n\n\n\n\n\n\nCode\nf_save_csv_files(\n  temp,\n  path_output,\n  \"nutrients_age_detailed_sex_g_per_day.csv\"\n)\n\n\n\n\n\n\nCode\n#change from per day to per year\ntemp &lt;- temp %&gt;%\n  mutate(\n    across(\n      c(\n        energy, carbohydrates, lipids, proteins,\n        nitrogen, phosphorus, potassium\n        ), ~signif(.x*(365/1000),3)\n      )\n    )\n\n#display table\ndatatable(\n  temp, \n  colnames = \n    c(\"sex\",\n      \"age\",\n      \"energy\\n(Mcal/yr)\",\n      \"carbohydrates\\n(kg/yr)\",\n      \"lipids\\n(kg/yr)\",\n      \"protein\\n(kg/yr)\",\n      \"N\\n(kg/yr)\",\n      \"P\\n(kg/yr)\",\n      \"K\\n(kg/yr)\"\n      ),\n  options = list(scrollX = TRUE, responsive = TRUE)\n  )\n\n\n\n\n\n\n\nCode\nf_save_csv_files(\n  temp,\n  path_output,\n  \"nutrients_age_detailed_sex_kg_per_year.csv\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nrm(file_individuals, file_apports_nut_alim, file_apports_nut_alim_simple, nutriments_contrib_INCA3, temp)\n\n\n\n\nNutrient excretion in France\nWe prepare the population data by cities and 5-year age categories, and transform it into age categories compatible with the INCA3 survey. The source of this data is INSEE, here.\n\n\nCode\n#path of population by city and by age file\npath_source &lt;- \"source_data/population/\"\n\n#load file\npopulation_age_commune &lt;- \n  readxl::read_excel(\n    paste0(path_source, \"pop-sexe-age-quinquennal6818.xls\"), \n    sheet = \"COM_2018\",skip=13\n    )\n#give explicit sex and age wording categories\npopulation_age_commune &lt;- \n  population_age_commune %&gt;% select(\n  INSEE_REG = RR,\n  INSEE_DEP = DR,\n  INSEE_COM = CR,\n  NOM= LIBELLE,\n  #5-years age categories and sex\n  age_0_4_sex_H = ageq_rec01s1rpop2018,\n  age_0_4_sex_F = ageq_rec01s2rpop2018,\n  age_5_9_sex_H = ageq_rec02s1rpop2018,\n  age_5_9_sex_F = ageq_rec02s2rpop2018,\n  age_10_14_sex_H = ageq_rec03s1rpop2018,\n  age_10_14_sex_F = ageq_rec03s2rpop2018,\n  age_15_19_sex_H = ageq_rec04s1rpop2018,\n  age_15_19_sex_F = ageq_rec04s2rpop2018,\n  age_20_24_sex_H = ageq_rec05s1rpop2018,\n  age_20_24_sex_F = ageq_rec05s2rpop2018,\n  age_25_29_sex_H = ageq_rec06s1rpop2018,\n  age_25_29_sex_F = ageq_rec06s2rpop2018,\n  age_30_34_sex_H = ageq_rec07s1rpop2018,\n  age_30_34_sex_F = ageq_rec07s2rpop2018,\n  age_35_39_sex_H = ageq_rec08s1rpop2018,\n  age_35_39_sex_F = ageq_rec08s2rpop2018,\n  age_40_44_sex_H = ageq_rec09s1rpop2018,\n  age_40_44_sex_F = ageq_rec09s2rpop2018,\n  age_45_49_sex_H = ageq_rec10s1rpop2018,\n  age_45_49_sex_F = ageq_rec10s2rpop2018,\n  age_50_54_sex_H = ageq_rec11s1rpop2018,\n  age_50_54_sex_F = ageq_rec11s2rpop2018,\n  age_55_59_sex_H = ageq_rec12s1rpop2018,\n  age_55_59_sex_F = ageq_rec12s2rpop2018,\n  age_60_64_sex_H = ageq_rec13s1rpop2018,\n  age_60_64_sex_F = ageq_rec13s2rpop2018,\n  age_65_69_sex_H = ageq_rec14s1rpop2018,\n  age_65_69_sex_F = ageq_rec14s2rpop2018,\n  age_70_74_sex_H = ageq_rec15s1rpop2018,\n  age_70_74_sex_F = ageq_rec15s2rpop2018,\n  age_75_79_sex_H = ageq_rec16s1rpop2018,\n  age_75_79_sex_F = ageq_rec16s2rpop2018,\n  age_80_84_sex_H = ageq_rec17s1rpop2018,\n  age_80_84_sex_F = ageq_rec17s2rpop2018,\n  age_85_89_sex_H = ageq_rec18s1rpop2018,\n  age_85_89_sex_F = ageq_rec18s2rpop2018,\n  age_90_94_sex_H = ageq_rec19s1rpop2018,\n  age_90_94_sex_F = ageq_rec19s2rpop2018,\n  age_95_sex_H = ageq_rec20s1rpop2018,\n  age_95_sex_F = ageq_rec20s2rpop2018\n)\n\n#grouping in similar age and sex categories as INCA3 denomination\npopulation_age_commune &lt;- population_age_commune %&gt;% \n  mutate(\n    INSEE_COM = paste0(INSEE_DEP, INSEE_COM),\n    age_0_9_H = age_0_4_sex_H + age_5_9_sex_H,\n    age_0_9_F = age_0_4_sex_F + age_5_9_sex_F,\n    age_10_18_H = age_10_14_sex_H + age_15_19_sex_H,\n    age_10_18_F = age_10_14_sex_F + age_15_19_sex_F,\n    age_19_44_H = age_20_24_sex_H + age_25_29_sex_H + age_30_34_sex_H + age_35_39_sex_H + age_40_44_sex_H,\n    age_19_44_F = age_20_24_sex_F + age_25_29_sex_F + age_30_34_sex_F + age_35_39_sex_F + age_40_44_sex_F,\n    age_45_64_H = age_45_49_sex_H + age_50_54_sex_H + age_55_59_sex_H + age_60_64_sex_H,\n    age_45_64_F = age_45_49_sex_F + age_50_54_sex_F + age_55_59_sex_F + age_60_64_sex_F,\n    age_65_H = age_65_69_sex_H + age_70_74_sex_H + age_75_79_sex_H + age_80_84_sex_H + age_85_89_sex_H + age_90_94_sex_H + age_95_sex_H,\n    age_65_F = age_65_69_sex_F + age_70_74_sex_F + age_75_79_sex_F + age_80_84_sex_F + age_85_89_sex_F + age_90_94_sex_F + age_95_sex_F,\n    ) %&gt;% \n  select(\n    INSEE_REG, INSEE_DEP, INSEE_COM, NOM, age_0_9_H, age_0_9_F, age_10_18_H, age_10_18_F, \n    age_19_44_H, age_19_44_F, age_45_64_H, age_45_64_F, age_65_H, age_65_F\n    )\n\n#gathering age and sex\npopulation_age_commune &lt;-  population_age_commune %&gt;%\n  gather(\"age_sex\", \"capita\" , age_0_9_H:age_65_F)\npopulation_age_commune &lt;-  population_age_commune %&gt;%\n  mutate(\n    sex = case_when(\n      grepl(\"H\", age_sex, fixed = T) ~ \"M\",\n      T ~ \"F\"\n      ),\n    age_class = substring(age_sex, 1, nchar(age_sex)-2)\n    ) %&gt;%\n  select(-age_sex)\npopulation_age_commune &lt;-  population_age_commune %&gt;%\n  mutate(\n    age_class = case_when(\n      age_class == \"age_0_9\" ~ \"&lt; 10\",\n      age_class == \"age_10_18\" ~ \"10 - 18\",\n      age_class == \"age_19_44\" ~ \"18 - 45\",\n      age_class == \"age_45_64\" ~ \"45 - 65\",\n      age_class == \"age_65\" ~ \"&gt; 65\"\n    )\n  )\npopulation_age_commune$age_class &lt;- \n  factor(\n    population_age_commune$age_class, \n    levels = c(\n      \"&gt; 65\",\n      \"45 - 65\",\n      \"18 - 45\",\n      \"10 - 18\",\n      \"&lt; 10\"\n    )\n  )\n\n#have to merge Paris arrondissements in 1 unique commune\n#first we merge the arrondissements in one temporary file. 75056 is the code for Paris in the map file\ntemp &lt;- population_age_commune %&gt;% filter(\n  INSEE_COM %in% c(\n    \"75101\", \"75102\", \"75103\", \"75104\", \"75105\", \"75106\", \"75107\", \"75108\", \"75109\", \"75110\",\n    \"75111\", \"75112\", \"75113\", \"75114\", \"75115\", \"75116\", \"75117\", \"75118\", \"75119\", \"75120\")) %&gt;%\n  mutate(INSEE_COM = \"75056\", NOM = \"Paris\") %&gt;%\n  group_by(INSEE_REG, INSEE_DEP, INSEE_COM, NOM, age_class, sex) %&gt;%\n  summarise(capita = sum(capita, na.rm = T))\n#then we remove arrondissements from the main file\npopulation_age_commune &lt;- population_age_commune %&gt;% \n  filter(!INSEE_COM %in% c(\n    \"75101\", \"75102\", \"75103\", \"75104\", \"75105\", \"75106\", \"75107\", \"75108\", \"75109\", \"75110\",\n    \"75111\", \"75112\", \"75113\", \"75114\", \"75115\", \"75116\", \"75117\", \"75118\", \"75119\", \"75120\"))\n#finally we merge the two files\npopulation_age_commune &lt;- \n  bind_rows(population_age_commune, temp)\n\n#we remove overseas territories\npopulation_age_commune &lt;- population_age_commune %&gt;% \n  filter(!INSEE_DEP %in% c(\n    \"971\", \"972\", \"973\", \"974\"))\n\n#creating file summarized at departmental, regional and national scale\n#department\npopulation_age_department &lt;- population_age_commune %&gt;%\n  select(INSEE_DEP, age_class, sex, capita) %&gt;%\n  group_by(INSEE_DEP, age_class, sex) %&gt;%\n  summarise(capita = sum(capita, na.rm = T))\n#region\npopulation_age_region &lt;- population_age_commune %&gt;%\n  select(INSEE_REG, age_class, sex, capita) %&gt;%\n  group_by(INSEE_REG, age_class, sex) %&gt;%\n  summarise(capita = sum(capita, na.rm = T))\n#france\npopulation_age_france &lt;- population_age_commune %&gt;%\n  select(age_class, sex, capita) %&gt;%\n  group_by(age_class, sex) %&gt;%\n  summarise(capita = sum(capita, na.rm = T))\n\n\nWe also want the nutrient excetions by water agencies basins, which is an administrative category not present in our population dataset. We join the cities with our key file linking each cities to water agencies basins.\n\n\nCode\n#for basin we use our key file city / basin\npath_source &lt;- \"source_data/maps/towns_basins/\"\n\n#load key file attributing each city to a basin\nkey_cities_basins &lt;- bind_rows(\n  read_csv(paste0(path_source, \"ADOUR-GARONNE.csv\")) %&gt;% mutate(basin = \"Adour-Garonne\"),\n  read_csv(paste0(path_source, \"ARTOIS-PICARDIE.csv\")) %&gt;% mutate(basin = \"Artois-Picardie\"),\n  read_csv(paste0(path_source, \"CORSE.csv\")) %&gt;% mutate(basin = \"Rhône-Méditerranée\"),\n  read_csv(paste0(path_source, \"LOIRE-BRETAGNE.csv\")) %&gt;% mutate(basin = \"Loire-Bretagne\"),\n  read_csv(paste0(path_source, \"RHIN-MEUSE.csv\")) %&gt;% mutate(basin = \"Rhin-Meuse\"),\n  read_csv(paste0(path_source, \"RHONE-MEDITERRANEE.csv\")) %&gt;% mutate(basin = \"Rhône-Méditerranée\"),\n  read_csv(paste0(path_source, \"SEINE-NORMANDIE.csv\")) %&gt;% mutate(basin = \"Seine-Normandie\")\n)\nkey_cities_basins &lt;- key_cities_basins %&gt;%\n  select(basin, INSEE_COM = admin4)\n\n#join population commune data with basin key\npopulation_age_commune &lt;- left_join(population_age_commune, key_cities_basins, by=\"INSEE_COM\")\n\n#unmatched cities\ntest &lt;- population_age_commune %&gt;% filter(is.na(basin))\nsum(test$capita/10^6, na.rm = T) #unmatched population represent 0.6 million individuals\nsum(population_age_commune$capita/10^6, na.rm = T) #over 64.8 million in Metropole\nsum(test$capita/10^6, na.rm = T)/sum(population_age_commune$capita/10^6, na.rm = T)*100 #so 0.1% lost\nrm(test)\n\n#we remove unmatched cities\npopulation_age_commune &lt;- population_age_commune %&gt;% filter(is.na(basin)==F)\n\n#summarize the sex/age categories by water agency basin\npopulation_age_basins &lt;- population_age_commune %&gt;%\n  select(basin, age_class, sex, capita) %&gt;%\n  group_by(basin, age_class, sex) %&gt;%\n  summarise(capita = sum(capita, na.rm = T))\n\n\nWe load the excretion data by age, and combine it with population age/sex data to have the quantities excreted in France, by basin, by region, by department and by commune.\n\n\nCode\npath_source &lt;- \"output_data/nutrient_ingestion_excretion/\"\n\n#creating the excretion file for 5 age categories\nchildren_excretion &lt;- read_csv(paste(path_source, \"nutrients_age_large_sex_kg_per_year.csv\", sep=\"\")) %&gt;%\n  select(\n    sex, age_class = age_class_large, \n    N_per_cap = nitrogen, P_per_cap = phosphorus, K_per_cap = potassium) %&gt;%\n  filter(\n    sex != \"both\",\n    age_class != \"adult (&gt;18 yr)\") %&gt;%\n  mutate(#giving similar age name as population file\n    age_class = case_when(\n      age_class == \"child (&lt;10 yr)\" ~ \"&lt; 10\",\n      age_class == \"adolescent (11-18 yr)\" ~ \"10 - 18\"))\n\nadult_excretion &lt;- read_csv(paste(path_source, \"nutrients_age_detailed_sex_kg_per_year.csv\", sep=\"\")) %&gt;%\n  select(sex, age_class, N_per_cap = nitrogen,  P_per_cap = phosphorus,  K_per_cap = potassium) %&gt;%\n  filter(\n    sex != \"both\",\n    age_class %in% c(\"18-44\", \"45-64\", \"65-79\")\n    ) %&gt;%\n  mutate(#giving similar age name as population file\n    age_class = case_when(\n      age_class == \"18-44\" ~ \"18 - 45\",\n      age_class == \"45-64\" ~ \"45 - 65\",\n      age_class == \"65-79\" ~ \"&gt; 65\")\n    )\nall_excretion &lt;- bind_rows(children_excretion, adult_excretion) \n\nall_excretion$age_class &lt;- \n  factor(\n    all_excretion$age_class, \n    levels = c(\n      \"&gt; 65\",\n      \"45 - 65\",\n      \"18 - 45\",\n      \"10 - 18\",\n      \"&lt; 10\"\n    )\n  )\n\n\n#adding excretions to the populations files\nexcretion_commune &lt;- \n  left_join(population_age_commune, all_excretion, by = c(\"sex\", \"age_class\")) %&gt;% \n  mutate(\n    N_excretion = signif(capita*N_per_cap, 3),\n    P_excretion = signif(capita*P_per_cap, 3),\n    K_excretion = signif(capita*K_per_cap, 3)\n    )\nexcretion_department &lt;- \n  left_join(population_age_department, all_excretion, by = c(\"sex\", \"age_class\")) %&gt;% \n  mutate(\n    N_excretion = signif(capita*N_per_cap, 3),\n    P_excretion = signif(capita*P_per_cap, 3),\n    K_excretion = signif(capita*K_per_cap, 3) \n    )\n#non existing region numbers : does not change anything, probably overseas territories\nexcretion_region &lt;- \n  left_join(population_age_region, all_excretion, by = c(\"sex\", \"age_class\")) %&gt;% \n  mutate(\n    N_excretion = signif(capita*N_per_cap, 3),\n    P_excretion = signif(capita*P_per_cap, 3),\n    K_excretion = signif(capita*K_per_cap, 3)\n    )\nexcretion_basins &lt;- \n  left_join(population_age_basins, all_excretion, by = c(\"sex\", \"age_class\")) %&gt;% \n  mutate(\n    N_excretion = signif(capita*N_per_cap, 3),\n    P_excretion = signif(capita*P_per_cap, 3),\n    K_excretion = signif(capita*K_per_cap, 3)\n    )\nexcretion_france &lt;- \n  left_join(population_age_france, all_excretion, by = c(\"sex\", \"age_class\")) %&gt;% \n  mutate(\n    N_excretion = signif(capita*N_per_cap/10^6, 3),\n    P_excretion = signif(capita*P_per_cap/10^6, 3),\n    K_excretion = signif(capita*K_per_cap/10^6, 3)\n    )\n\n#remove temporary excretion files and key cities / basins\nrm(adult_excretion, children_excretion, all_excretion, key_cities_basins, temp)\n\n#remove incomplete population files\nrm(population_age_basins, population_age_commune, population_age_department, population_age_region, population_age_france)\n\n\n\nFranceWater Agencies Basins\n\n\n\n\nCode\n#temporary file to save France excretions\ntemp &lt;- excretion_france %&gt;%\n  select(N_excretion, P_excretion, K_excretion, capita) %&gt;%\n  mutate(basin = \"Metropolitan France\") %&gt;%\n  group_by(basin) %&gt;%\n  summarise(\n    capita = signif(sum(capita, na.rm=T)/10^6, 3),\n    N_excretion = signif(sum(N_excretion, na.rm=T), 3),\n    P_excretion = signif(sum(P_excretion, na.rm=T), 3),\n    K_excretion = signif(sum(K_excretion, na.rm=T), 3)\n    )\n#save file\nf_save_csv_files(\n  temp,\n  path_output,\n  \"excretions_human_france_kt_year.csv\"\n)\n\n#mean excretion values per capita, four our comparison with litterature review\nN_excr_kg_year &lt;- round(temp$N_excretion/temp$capita, 1)\nN_excr_g_day &lt;- round(temp$N_excretion/temp$capita*1000/365, 1)\nP_excr_kg_year &lt;- round(temp$P_excretion/temp$capita, 2)\nP_excr_g_day &lt;- round(temp$P_excretion/temp$capita*1000/365, 1)\nK_excr_kg_year &lt;- round(temp$K_excretion/temp$capita, 1)\nK_excr_g_day &lt;- round(temp$K_excretion/temp$capita*1000/365, 1)\nN_P_ratio_excr &lt;- round(temp$N_excretion/temp$P_excretion, 1)\n\n#temporary file for our plot\ntemp2 &lt;- excretion_france %&gt;%\n  select(age_class, N_excretion, P_excretion, K_excretion, capita) %&gt;%\n  mutate(capita = signif(capita/10^6, 3)) %&gt;%\n  gather(quantity, value, N_excretion, P_excretion, K_excretion, capita) %&gt;%\n  mutate(\n    quantity = case_when(\n      quantity == \"N_excretion\" ~ paste(\"N excretion\\n\", temp$N_excretion, \"ktN per year\"),\n      quantity == \"P_excretion\" ~ paste(\"P excretion\\n\", temp$P_excretion, \"ktP per year\"),\n      quantity == \"K_excretion\" ~ paste(\"K excretion\\n\", temp$K_excretion, \"ktK per year\"),\n      quantity == \"capita\" ~ paste(\"population\\n\", temp$capita, \"million\"),\n    )\n  )\n\n#plot nutrient excretions in France by age categories\nggplot(temp2) +\n  geom_col(aes(\"\", value, fill=age_class), alpha=.9) +\n  facet_wrap(vars(quantity), nrow=1, scales=\"free_y\") +\n  labs(\n    x=\"\", y=\"\",\n    caption = Source,\n    fill=\"age group\"\n  )\n\n\n\n\n\n\n\n\n\nCode\n#prepare basins temporayr file for plots\ntemp &lt;- excretion_basins %&gt;% group_by(basin) %&gt;%\n  summarise(\n    capita = signif(sum(capita, na.rm=T)/10^6, 2),\n    N_excretion = round(sum(N_excretion, na.rm=T)/10^6, 0),\n    P_excretion = round(sum(P_excretion, na.rm=T)/10^6, 1),\n    K_excretion = round(sum(K_excretion, na.rm=T)/10^6, 1)\n    )\n\ntemp$basin &lt;- \n  factor(\n    temp$basin,\n    levels = c(\n      \"Seine-Normandie\",\n      \"Rhône-Méditerranée\",\n      \"Loire-Bretagne\",\n      \"Adour-Garonne\",\n      \"Artois-Picardie\",\n      \"Rhin-Meuse\"\n    )\n  )\n\n\n\nPopulation comparisonExcretionsConnected to sewers\n\n\nWe compare the basin population we estimated by attributing eahc city to a basin with values reported by the different water agencies. There is a rather good matching. We apply a correction coefficient to our computed excretions based on our estimation of population values to match the population figures reported by the water agencies.\n\n\nCode\n#reported population by basin\ntemp2 &lt;- read_csv(\"source_data/pop_sewage_connection/pop_basins_sewage_connection.csv\") %&gt;%\n  filter(basin!=\"Metropolitan France\")\n\n#comparison between the 2 populations values\nggplot(temp) +\n  geom_col(aes(basin, capita, fill = basin), alpha=.8) +\n  geom_point(\n    data=temp2, \n    aes(basin, pop)\n    ) +\n  theme(\n    axis.text.x = element_text(angle = 20, vjust = 0.5, hjust=1),\n    legend.position = \"none\"\n    ) +\n  labs(\n    x=\"\", y=\"\",\n    title = \"Basins population (million)\",\n    subtitle = \"bar: our estimation; point: reported by water agencies\",\n    caption = Source\n  )\n\n\n\n\n\nCode\n#applying coefficient to our excretion values\ncoeff &lt;- left_join(\n  temp %&gt;% select(basin, capita),\n  temp2 %&gt;% select(basin, pop),\n  by=\"basin\"\n) %&gt;%\n  mutate(coeff = pop/capita)\n\n temp &lt;- left_join(temp, coeff %&gt;% select(basin, coeff), by= \"basin\") %&gt;%\n   mutate(\n     N_excretion = round(N_excretion*coeff, 0),\n     P_excretion = round(P_excretion*coeff, 1),\n     K_excretion = round(K_excretion*coeff, 1)\n   ) %&gt;%\n   select(-coeff)\n \n#save excreted values\nf_save_csv_files(\n  temp,\n  path_output,\n  \"excretions_human_basins_kt_year.csv\"\n)\n\n\n\n\n\n\nCode\ntemp2 &lt;- temp %&gt;%\n  gather(\n    variable_study, value, N_excretion, P_excretion, K_excretion, capita\n  ) %&gt;%\n  mutate(\n    variable_study = case_when(\n      variable_study == \"N_excretion\" ~ \"N excretion\\nktN per year\",\n      variable_study == \"P_excretion\" ~ \"P excretion\\nktP per year\",\n      variable_study == \"K_excretion\" ~ \"K excretion\\nktK per year\",\n      variable_study == \"capita\" ~ \"population\\nmillion\"\n      )\n    )\n\ntemp2$basin &lt;- \n  factor(\n    temp2$basin,\n    levels = c(\n      \"Seine-Normandie\",\n      \"Rhône-Méditerranée\",\n      \"Loire-Bretagne\",\n      \"Adour-Garonne\",\n      \"Artois-Picardie\",\n      \"Rhin-Meuse\"\n    )\n  )\n\nggplot(temp2) +\n  geom_col(aes(basin, value, fill = basin), alpha=.8) +\n  facet_wrap(vars(variable_study), scales = \"free_y\") +\n  theme(\n    axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1),\n    legend.position = \"none\"\n    ) +\n  labs(\n    x=\"\", y=\"\",\n    title = \"N, P and K excretions by basin (ktons)\",\n    subtitle = \"for population, the unit is million inhabitants\",\n    caption = Source\n  )\n\n\n\n\n\n\n\nWe combine our excretion figures by basin with the share of population connected to sewers of to individual autonomous systems.\n\n\nCode\n#population connected to sewers\ntemp2 &lt;- read_csv(\"source_data/pop_sewage_connection/pop_basins_sewage_connection.csv\") %&gt;%\n  filter(basin!=\"Metropolitan France\")\ntemp &lt;- temp %&gt;%\n  gather(\n    variable_study, value, N_excretion, P_excretion, K_excretion, capita\n  ) %&gt;%\n  mutate(\n    variable_study = case_when(\n      variable_study == \"N_excretion\" ~ \"N excretion\\nktN per year\",\n      variable_study == \"P_excretion\" ~ \"P excretion\\nktP per year\",\n      variable_study == \"K_excretion\" ~ \"K excretion\\nktK per year\",\n      variable_study == \"capita\" ~ \"population\\nmillion\"\n      )\n    )\ntemp &lt;- left_join(\n  temp, temp2 %&gt;% select(basin, percent_sewage), by=\"basin\" \n)\ntemp &lt;- temp %&gt;%\n  mutate(\n    to_sewers = value*percent_sewage,\n    to_IAS = value*(1-percent_sewage)\n  ) %&gt;%\n  select(-value) %&gt;%\n  gather(\n    destination, value, to_sewers, to_IAS\n  ) %&gt;%\n  mutate(\n    destination = case_when(\n      destination==\"to_sewers\"~ \"to sewers\",\n      destination==\"to_IAS\"~ \"to individual\\nautonomous\\nsystem\"\n    )\n  )\n\ntemp$basin &lt;- \n  factor(\n    temp$basin,\n    levels = c(\n      \"Seine-Normandie\",\n      \"Rhône-Méditerranée\",\n      \"Loire-Bretagne\",\n      \"Adour-Garonne\",\n      \"Artois-Picardie\",\n      \"Rhin-Meuse\"\n    )\n  )\n\n\nggplot(temp) +\n  geom_col(aes(basin, value, fill = destination), alpha=.8, position = position_dodge()) +\n  facet_wrap(vars(variable_study), scales = \"free_y\") +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust=1),\n    ) +\n  labs(\n    x=\"\", y=\"\",\n    title = \"N, P and K excretions by basin (ktons)\",\n    subtitle = \"for population, the unit is million inhabitants\",\n    caption = Source,\n    fill=\"excretion desination\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nComparison with litterature review\n\n\nCode\n#Caption of our graphs\nSource &lt;- \"Source: INCA3 and litterature review by Tanguy Fardet\\ncomputation by Thomas Starck\"\n\n#path of the literature review\npath_source &lt;- \"source_data/0_nutrient_excretion/\"\n\n#load literature review file\nreview_excretion &lt;- read_csv(paste0(path_source, \"n_p_fractions.csv\"))\n\n#change column names into more explicit\nreview_excretion &lt;- review_excretion %&gt;%\n  select(\n    #total P and N excretions urine + feces (absolute values) and % in urine and feces\n    P_excr = `total P excretion (kg/y)`, \n    perc_P_urine = `% urine P`, \n    perc_P_feces = `% feces P`, \n    N_excr = `total N excretion (kg/y)`, \n    perc_N_urine = `% urine N`, \n    perc_N_feces = `% feces N`, \n    N_P_ratio = `N:P ratio`,\n    year, country, authors\n  ) %&gt;%\n  mutate(\n    #study: name of authors, year, country\n    study = paste0(authors, \", \", year, \", \", country),\n    #P and N in urine and feces in absolute values, 2 significant digits\n    P_urine = round(P_excr*perc_P_urine/100, 2),\n    P_feces = round(P_excr*perc_P_feces/100, 2),\n    N_urine = round(N_excr*perc_N_urine/100, 2),\n    N_feces = round(N_excr*perc_N_feces/100, 2)\n    ) %&gt;%\n  select(-c(year, country, authors)) \n\n\n\n#function for graph literature review N and P excretions\ng_excr &lt;- function(dataset, label_nutrient, y_lim, our_value, label_unit){\n  #mean total excretion\n  mean_excr &lt;- round(mean(dataset %&gt;% pull(excr), na.rm=T), 2)\n  \n  #order studies by increasing value\n  dataset$study &lt;- reorder(dataset$study, dataset %&gt;% pull(value_urine_feces))\n  #remove empty values\n  dataset &lt;- dataset %&gt;% filter(is.na(value_urine_feces)==F)\n  \n  #colors of urine and feces \n  colors_fill &lt;- scale_fill_manual(\n    limits = c(\"urine\", \"feces\"),\n    values=c(\"#e3dc00\", \"#591000\")\n  )\n  \n  \n  plot_grid(\n    \n    #plot of the review values\n    ggplot(dataset) +\n      #urine and feces values\n      geom_col(\n        aes(study, value_urine_feces, fill=urine_feces)\n        ) +\n      #urine + feces value (black contour)\n      geom_col(\n        aes(study, excr),\n        color=\"black\", fill=\"transparent\"\n        ) +\n      #label for urine+feces value\n      geom_text(\n        aes(study, excr, label=excr),\n        hjust=-0.1, family = \"Times New Roman\", fontface=\"italic\"\n        ) +\n      colors_fill +#colors\n      ylim(c(0, y_lim)) +\n      coord_flip() +\n      theme(\n        legend.position = \"none\",\n        axis.text.x = element_blank(),\n        plot.subtitle = ggtext::element_markdown() #for colored title\n        ) +\n      labs(\n        x=\"\", y=\"\", \n        title = paste(\"Review of\", label_nutrient, \"excretion per capita\"),\n        subtitle = \"in&lt;span style='color:#e3dc00;'&gt;urine,&lt;/span&gt;&lt;span style='color:#591000;'&gt;feces,&lt;/span&gt;and urine+feces\",\n        ),\n    \n    #plot of our values (INCA3)\n    ggplot(data_frame(study = \"This study (based on INCA3)\", value = our_value)) +\n      geom_col(\n        aes(study, value), fill=\"black\"\n          ) +\n      geom_label(\n        aes(study, value, label=value),\n        hjust=-0.2, family = \"Times New Roman\", fontface=\"bold\"\n        ) +\n      coord_flip() +\n      ylim(c(0, y_lim)) +\n      labs(\n        x=\"\", y=label_unit, \n        fill = \"\", \n        caption = Source\n      ),\n    \n    \n    ncol=1, rel_heights = c(0.8, 0.2), align=\"v\"\n    \n  )\n}\n\n\n\nPNRepartition urine / fecesN:P ratioComparison with crop N:P content\n\n\n\nkg per yearg per day\n\n\n\n\nCode\n#prepare for P excretion graph\ntemp &lt;- review_excretion %&gt;% \n  select(study, excr=P_excr, urine=P_urine, feces=P_feces) %&gt;%\n  gather(urine_feces, value_urine_feces, urine, feces)\ntemp$urine_feces &lt;- factor(temp$urine_feces, c(\"feces\", \"urine\"))\n\n#graph\ng_excr(temp, \"P\", 0.8, P_excr_kg_year, \"kg per year\") \n\n\n\n\n\n\n\n\n\nCode\n#prepare for P excretion graph\ntemp &lt;- review_excretion %&gt;% \n  select(study, excr=P_excr, urine=P_urine, feces=P_feces) %&gt;%\n  gather(urine_feces, value_urine_feces, urine, feces) %&gt;%\n  #convert from kg/year to g/day\n  mutate(\n    excr = round(excr/365*1000, 1), \n    value_urine_feces = round(value_urine_feces/365*1000, 1)\n    )\ntemp$urine_feces &lt;- factor(temp$urine_feces, c(\"feces\", \"urine\"))\n\ng_excr(temp, \"P\", 2.2, P_excr_g_day, \"g per day\")\n\n\n\n\n\n\n\n\n\n\n\nkg per yearg per day\n\n\n\n\nCode\n#prepare for N excretion graph\ntemp &lt;- review_excretion %&gt;% \n  select(study, excr=N_excr, urine=N_urine, feces=N_feces) %&gt;%\n  gather(urine_feces, value_urine_feces, urine, feces) %&gt;%\n  #we round the value\n  mutate(\n    excr = round(excr, 1), \n    value_urine_feces = round(value_urine_feces, 1)\n    )\n\ntemp$urine_feces &lt;- factor(temp$urine_feces, c(\"feces\", \"urine\"))\ng_excr(temp, \"N\", 5, N_excr_kg_year, \"kg per year\")\n\n\n\n\n\n\n\n\n\nCode\n#prepare for P excretion graph\ntemp &lt;- review_excretion %&gt;% \n  select(study, excr=N_excr, urine=N_urine, feces=N_feces) %&gt;%\n  gather(urine_feces, value_urine_feces, urine, feces) %&gt;%\n  #convert from kg/year to g/day\n  mutate(\n    excr = round(excr/365*1000, 1), \n    value_urine_feces = round(value_urine_feces/365*1000, 1)\n    )\ntemp$urine_feces &lt;- factor(temp$urine_feces, c(\"feces\", \"urine\"))\n\ng_excr(temp, \"N\", 14, N_excr_g_day, \"g per day\")\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#prepare file for graph, columns\ntemp &lt;- review_excretion %&gt;% \n  select(study, perc_N_urine, perc_P_urine) %&gt;%\n  gather(perc_type, perc, perc_N_urine, perc_P_urine) %&gt;%\n  mutate(\n    nutrient = case_when(\n      perc_type %in% c(\"perc_N_urine\") ~ \"Nitrogen\",\n      perc_type %in% c(\"perc_P_urine\") ~ \"Phosphorus\"\n    )\n  ) \n\n#for labels\ntemp2 &lt;- temp %&gt;% \n  mutate(\n    perc = round(perc)\n  ) \n\n\ntemp$study &lt;- reorder(temp$study, temp$perc)\n#graph for nitrogen\ng1 &lt;- ggplot(temp %&gt;% filter(nutrient==\"Nitrogen\", is.na(perc)==F)) +\n  #columns for feces\n  geom_col(\n    aes(100, reorder(study, perc)), fill=\"#591000\"\n    ) +\n  #columns of urine\n  geom_col(\n    aes(perc, study), fill=\"#e3dc00\"\n    ) +\n  #labels\n  geom_text(\n    data=temp2 %&gt;% filter(nutrient==\"Nitrogen\", is.na(perc)==F),\n    aes(100, study, label = paste(perc, \"/\", 100-perc, \"%\")),\n    hjust=-0.1, family = \"Times New Roman\", fontface=\"italic\"\n    ) +\n  facet_wrap(vars(nutrient), nrow=2) +\n  theme(plot.title = ggtext::element_markdown()) + #for colored title\n  scale_x_continuous(\n    breaks = seq(0, 100, by=10), \n    limits = c(0, 130)) +\n  labs(\n    x=\"\", y=\"\",\n    title = \"N and P repartition in &lt;span style='color:#e3dc00;'&gt;urine&lt;/span&gt; and in &lt;span style='color:#591000;'&gt;feces&lt;/span&gt;\",\n    subtitle = \"nutrient in urine: ~85% for N and ~60% for P\"\n  )\n#graph for nitrogen\ng2 &lt;- ggplot(temp %&gt;% filter(nutrient==\"Phosphorus\", is.na(perc)==F)) +\n  #columns for feces\n  geom_col(\n    aes(100, reorder(study, perc)), fill=\"#591000\"\n    ) +\n  #columns of urine\n  geom_col(\n    aes(perc, study), fill=\"#e3dc00\"\n    ) +\n  #labels\n  geom_text(\n    data=temp2 %&gt;% filter(nutrient==\"Phosphorus\", is.na(perc)==F),\n    aes(100, study, label = paste(perc, \"/\", 100-perc, \"%\")),\n    hjust=-0.1, family = \"Times New Roman\", fontface=\"italic\"\n    ) +\n  facet_wrap(vars(nutrient), nrow=2) +\n  scale_x_continuous(\n    breaks = seq(0, 100, by=10), \n    limits = c(0, 130)) +\n  labs(\n    x=\"%\", y=\"\",\n    caption=Source\n  )\nplot_grid(g1, g2, nrow=2, align=\"v\")\n\n\n\n\n\n\n\n\n\nCode\n#prepare data for ratio graph\ntemp &lt;- review_excretion %&gt;%\n  mutate(\n    N_P_ratio_excr = round(N_excr/P_excr, 1),\n    N_P_ratio_urine = round(N_urine/P_urine, 1),\n    N_P_ratio_feces = round(N_feces/P_feces, 1)\n  )\ntemp$study &lt;- reorder(temp$study, temp$N_P_ratio_excr)\ntemp &lt;- temp %&gt;%\n  select(study, N_P_ratio_excr, N_P_ratio_urine, N_P_ratio_feces) %&gt;%\n  gather(ratio_type, ratio_value, N_P_ratio_excr, N_P_ratio_urine, N_P_ratio_feces) %&gt;%\n  filter(is.na(ratio_value)==F) %&gt;%\n  mutate(\n    ratio_type = case_when(\n      ratio_type == \"N_P_ratio_excr\" ~ \"urine + feces\",\n      ratio_type == \"N_P_ratio_urine\" ~ \"urine\",\n      ratio_type == \"N_P_ratio_feces\" ~ \"feces\"\n    )\n  )\ntemp$ratio_type &lt;- factor(temp$ratio_type, levels=c(\"feces\", \"urine\", \"urine + feces\"))\ncolors_fill &lt;- scale_fill_manual(\n    limits = c(\"urine\", \"feces\", \"urine + feces\"),\n    values=c(\"#e3dc00\", \"#591000\", \"black\")\n  )\n\n\n#ratio graph review\ng1 &lt;- ggplot(temp) +\n  geom_col(\n    aes(ratio_value, study, fill=ratio_type), \n    position=\"dodge\"\n    ) +\n  geom_text(\n    aes(x=ratio_value, y=study, label=ratio_value),\n    hjust=0, family = \"Times New Roman\", fontface=\"italic\"\n    ) +\n  colors_fill + \n  theme(\n    legend.position = \"none\",\n    axis.text.x = element_blank(),\n    plot.subtitle = ggtext::element_markdown()  #for colored title\n    ) +\n  facet_wrap(vars(ratio_type), nrow=3) +\n  labs(\n    y=\"\",  x=\"\", \n    title = \"N:P ratio values in our review\",\n    subtitle = \"in&lt;span style='color:#e3dc00;'&gt;urine,&lt;/span&gt;&lt;span style='color:#591000;'&gt;feces,&lt;/span&gt;and urine+feces\",\n    ) +\n  xlim(0, 18) \n\n\ng2 &lt;- \n  ggplot(\n    data = \n      data_frame(\n        study=\"Our value, 2017, France\\n(from INCA3 study)\", \n        value = N_P_ratio_excr\n        )\n    ) +\n  geom_col(\n    aes(value, study), \n    fill=\"black\"\n      ) +\n  geom_label(\n    aes(value, study, label=value),\n    hjust=-0.2, family = \"Times New Roman\", fontface=\"italic\"\n    ) +\n  labs(\n    y=\"\", x=\"\",\n    caption=Source\n    ) +\n  xlim(0, 18)\n\nplot_grid(g1, g2, nrow=2, align=\"v\", rel_heights = c(0.8, 0.2))\n\n\n\n\n\n\n\n\n\nCode\npath_source &lt;- \"source_data/crop_N_P_content/\"\ncrop_N_P_content &lt;- read_csv(paste0(path_source, \"crop_N_P_content.csv\")) %&gt;%\n  mutate(N_P_ratio = perc_N/perc_P)\n                             \nggplot(crop_N_P_content) +\n  annotate(\"rect\", xmin = -Inf, xmax=Inf, ymin = 8, ymax=14, fill=\"#e3dc00\", alpha=.7) +\n  annotate(\"rect\",xmin = -Inf, xmax=Inf, ymin = 1.5, ymax=3, fill=\"#591000\", alpha=.7) +\n  annotate(\"rect\",xmin = -Inf, xmax=Inf, ymin = 6, ymax=10, fill=\"grey\", alpha=.7) +\n  geom_point(aes(reorder(crop, N_P_ratio), N_P_ratio)) +\n  coord_flip() +\n  scale_y_continuous(breaks = seq(0, 20, by=2), limits=c(0, 20)) +\n  facet_grid(vars(group), scales=\"free_y\", space=\"free_y\") +\n  theme(\n    strip.text.y.right = element_text(angle = 0),\n    plot.subtitle = ggtext::element_markdown()  #for colored title) \n  ) +\n  labs(\n    y=\"N:P ratio\", x=\"\",\n    title= \"N:P ratio of different crop contents\",\n    subtitle = \"comparison with &lt;span style='color:#e3dc00;'&gt;urine&lt;/span&gt;, &lt;span style='color:#591000;'&gt;feces (similar to urban sludge)&lt;/span&gt; and &lt;span style='color:grey;'&gt;urine+feces&lt;/span&gt;\",\n    caption = \"Source: crop content in Le Noé Thesis, 2018, page 53\\nurine and feces ratios from litterature review by Tanguy Fardet\\ncomputation by Thomas Starck\"\n    )\n\n\n\n\n\n\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This website describes the data sources and processing to get the results presented in Starck, Fardet, and Esculier (2024) (for nitrogen) and Starck, Fardet, and Esculier (2023) (for phosphorus). The results here go beyond what is presented in the articles.\nThis project assesses the nutrient flows in the French sanitation system. Multiple sources are used: wastewater treatment plant data from water agencies, industry discharge, food intakes surveys…\nIn WWTP flows preparation and Other flows preparation, we present, clean and normalize the data related to wastewater treatment plants and the other flows (industry, food ingestion / excretion, sludge composition…).\nIn Results, we show our main results: nutrients flows in wastewater treatment plants, nitrogen and phosphorus nutrient flow analysis in the whole sanitation system, and the main figures used in our articles.\nThe source data, output data, and code to generate it is accessible on this github repository, which produced this website. It is also stored on a permanent repository on zenodo at https://doi.org/10.5281/zenodo.7990172.\n\n\n\n\nReferences\n\nStarck, Thomas, Tanguy Fardet, and Fabien Esculier. 2023. “Phosphorus Recycling from Human Excreta in French Agroecosystems and Potential for Food Self-Sufficiency.” arXiv Preprint arXiv:2310.06461. https://doi.org/https://doi.org/10.48550/arXiv.2310.06461.\n\n\n———. 2024. “Fate of Nitrogen in French Human Excreta: Current Waste and Agronomic Opportunities for the Future.” Science of The Total Environment 912: 168978. https://doi.org/https://doi.org/10.1016/j.scitotenv.2023.168978."
  },
  {
    "objectID": "0_industry_discharge.html",
    "href": "0_industry_discharge.html",
    "title": "Industrial sewage network discharge",
    "section": "",
    "text": "This page describes the data used to determine how much nitrogen and phosphorus is discharged by industries to sewers networks.\n\n\nCode\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#loading additional relevant packages\nlibrary(cowplot) #for plot_grid(), multiple plots\nlibrary(patchwork) #also for multiple plots\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(plot.title = element_text(face=\"bold\"))\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\nSource &lt;- \"Source: géorisque database\\ncomputation by Thomas Starck\"\n\n# Load the functions file\nsource(\"functions.R\")\n\n\n\nSource, description and loading data\nThe géorisque database is publicly available and reports industrial discharge, when they are made compulsory by the regulatory thresholds. It reports industrial facilities name and IDs. The GEREP database is not open access but was provided by the French administration ; it contains more data than simply the mandatory reported ones, but the industrial facilities are anonymized. In the following we will use the GEREP database. We nonetheless study the géorisques database to test the consistency of the GEREP database.\n\nLoad géorisque dataLoad GEREP dataMore information\n\n\n\nSource and descriptionEmissionsDischarged flows\n\n\nThe data were downloaded on the georisque website, reporting industrial pollution discharges. Read the description of the data on this page.\nAll pollution flows are reported in kg/year in the database.\n\n\nWe load the emission file emissions.csv, for each year. They report the industry facility ID and name, pollutant type (145 different), discharge environment (air, water direct, water indirect, ground), and quantity in kg/an. We focus only on NGL, Pt, DBO5, DCO, MES.\n\n\nCode\n#path for géorsiques data  source\npath_source &lt;- \"source_data/0_industry_discharge/georisque_data/\"\n\n#loading pollutant data\nfile_georisques_emission &lt;- list.files( #read and merge csv of all years\n    path = path_source,\n    pattern = \"emissions.csv\", full.names = T, recursive = T) %&gt;%\n    lapply(read_csv2) %&gt;% bind_rows()\n\n# see the 145 different pollutants\nunique(file_georisques_emission$polluant)\n\n# focus only on NGL, Pt, DBO5, DCO, MES\nfile_georisques_emission &lt;- file_georisques_emission %&gt;% \n  filter(\n    polluant %in% c(\n      \"Phosphore total\",\n      \"Azote total\",\n      \"Demande chimique en oxygène (DCO)\",\n      \"Demande biologique en oxygène (DBO5)\",\n      \"Matières en suspension (MES)\"\n      )\n    ) %&gt;%\n  #transform numbers into numeric\n  mutate(\n    quantite = as.numeric(quantite)\n  )\n\n\nWe load the files describing the facilities (etablissements.csv). They report the site name, address, coordinates, the European Pollutant Release and Transfer Register code (EPRTR code and wording), and the APE code and wording. EPRTR categories are listed here, and APE codes are listed here.\n\n\nCode\nyear_min &lt;- 2003\nyear_max &lt;- 2020\n\n#function to load industrial sites files, from 2003 to 2020\nf_load_id_sites &lt;- function(year_min, year_max){\n  #read the file site for the first yer\n  temp &lt;- \n    read_csv2(paste0(path_source, year_min, \"/etablissements.csv\")) %&gt;% \n    mutate(\n      coordonnees_x = as.numeric(coordonnees_x),\n      coordonnees_y = as.numeric(coordonnees_y),\n      annee_emission = year_min\n      )\n  #read the sites files for subsequent years, merge with previous years file\n  for (i in (year_min+1):year_max){\n    temp2 &lt;- \n      read_csv2(paste0(path_source, i, \"/etablissements.csv\")) %&gt;% \n      mutate(\n        coordonnees_x = as.numeric(coordonnees_x),\n        coordonnees_y = as.numeric(coordonnees_y),\n        annee_emission = i\n        )\n    temp &lt;- bind_rows(temp, temp2)\n  }\n  #return file for all years\n  return(temp)\n}\n\n#loading industrial sites files from 2003 to 2020\nfile_georisques_id_sites &lt;- f_load_id_sites(2003, 2020)\n\n\nWe merge these 2 emissions files through their unique ID. There are 200 APE codes and 50 EPRTR codes related to our pollution of interest (NGL, Pt, DBO5, DCO, MES).\n\n\nCode\n#merge the industrial sites file with the file on pollutant emissions\nfile_georisques_emissions_id_site &lt;- left_join(\n  file_georisques_emission, file_georisques_id_sites, by=c(\"annee_emission\",\"identifiant\")\n)\n\n# see the 300 APE codes\nunique(file_georisques_emissions_id_site$libelle_ape)\n\n# see the 60 EPRTR codes\nunique(file_georisques_emissions_id_site$libelle_eprtr)\n\n# we create the main gérosique file, one column for each pollutant\ngeorisque &lt;- file_georisques_emissions_id_site %&gt;%\n  spread(polluant, quantite)\n\n# renaming columns (we could also get commune, department and region IDs)\ngeorisque &lt;- georisque %&gt;%\n  select(\n    Year = annee_emission,\n    Id = identifiant,\n    NGL = `Azote total`,\n    Pt = `Phosphore total`,\n    DCO = `Demande chimique en oxygène (DCO)`,\n    DBO5 = `Demande biologique en oxygène (DBO5)`,\n    MES = `Matières en suspension (MES)`,\n    site_name = nom_etablissement.x,\n    SIRET_code = numero_siret,\n    discharge_environment = milieu,\n    lat_site = coordonnees_x,\n    long_site = coordonnees_y,\n    code_epsg,\n    code_ape,\n    libelle_ape,\n    code_eprtr,\n    libelle_eprtr\n  )\n\n# we change the french wording of discharge environment (\"mileu\" in original file) to English\ngeorisque &lt;- georisque %&gt;%\n  mutate(\n    discharge_environment = case_when(\n      discharge_environment == \"Eau (direct)\"~ \"water (direct)\",\n      discharge_environment == \"Eau (indirect)\"~ \"water (indirect)\",\n      discharge_environment == \"Sol\"~ \"ground\",\n    )\n  )\n\n#see a summary of emissions according to the environmental discharge\ntable(\n  file_georisques_emissions_id_site %&gt;% \n    filter(\n      polluant %in% c(\n      \"Phosphore total\",\n      \"Azote total\",\n      \"Demande chimique en oxygène (DCO)\",\n      \"Demande biologique en oxygène (DBO5)\",\n      \"Matières en suspension (MES)\"\n      )\n    ) %&gt;%\n    select(polluant, milieu)\n  )\n\n\n\n\nOnly for the years 2019 and 2020, for each site (ID and name), there are files (rejets.csv) specifically specifying if discharges are in the sewers network or in the natural environment, in m3/y. We will use it to test our main dataset on this particular point.\n\n\nCode\n#read and merge csv of all years\nfile_georisques_discharge &lt;- list.files( \n    path = path_source,\n    pattern = \"rejets.csv\", full.names = T, recursive = T) %&gt;%\n    lapply(\n      read_csv2\n      ) %&gt;% \n  bind_rows()\n\n#renaming French columns to English\nfile_georisques_discharge &lt;- file_georisques_discharge %&gt;%\n  rename(\n    Year = annee_rejet,\n    Id = identifiant,\n    site_name = nom_etablissement,\n    discharge_network_m3_y = rejet_raccorde_m3_par_an,\n    discharge_environment_m3_y = rejet_isole_m3_par_an\n    )\n\n\n\n\n\n\n\nWe load the data. Contrary to géorisques data, there is only 1 main file, so no need to merge several files together.\n\n\nCode\n#path for GEREP data source\npath_source &lt;- \"source_data/0_industry_discharge/GEREP_data/\"\n\n#read GEREP file\nfile_GEREP &lt;- readxl::read_excel(paste0(path_source, \"2010_2021_Rejets raccordés eau par agence.xlsx\"))\n\n#rename French column names to English\nGEREP &lt;- file_GEREP %&gt;%\n  select(\n    Year = Année,\n    basin = `Agence de l'eau`,\n    nutrient = Substance,\n    incoming = `Masse émise retenue (kg/an)`,\n    discharged = `Rejet final après épuration (kg/an)`,\n    INSEE_REG = `Code INSEE Région`,\n    name_REG = Région,\n    INSEE_DEP = `Code INSEE département`,\n    name_DEP = Département,\n    INSEE_COM = `Code INSEE Commune`,\n    name_COM = Commune\n  )\n\n# Simplify the name of the basin rhone-med-corse basin\nGEREP &lt;- GEREP %&gt;%\n  mutate(\n    basin = case_when(\n      basin == \"Rhône-Méditerranée-Corse\" ~ \"Rhône-Méditerranée\",\n      T ~ basin\n    )\n  )\n\n\nWe summarize the flows at the national scale.\n\n\nCode\nGEREP &lt;- GEREP %&gt;%\n  #We only keep metropolitan France sites (exclude overseas territories)\n  filter(\n    basin %in% c(\"Adour-Garonne\", \"Artois-Picardie\", \"Loire-Bretagne\", \"Rhin-Meuse\", \"Rhône-Méditerranée\", \"Seine-Normandie\")\n    )\n\n#temporary file, incoming and discharged nutrient flows and number of facilities, at the national scale\ntemp &lt;- GEREP %&gt;%\n  group_by(Year, nutrient) %&gt;%\n  #transform from kg/year (for each facility) to kt/year (national) for nutrient flows\n  summarise(\n    incoming = signif(sum(incoming, na.rm=T)/10^6, 3),\n    discharged = signif(sum(discharged, na.rm=T)/10^6, 3),\n    nb_facilities = sum(is.na(nutrient)==F)\n    )\n\n#function to spread nutrients flows and number of facilities in columns\nf_spread_nutrients &lt;- function(dataset, nutrient_type, suffix){\n  dataset &lt;- dataset %&gt;%\n    #spread in columns\n    spread(nutrient, {{ nutrient_type }}) %&gt;%\n    #change name of the columns with suffix\n    rename(\n      !!paste0(\"NGL_\", suffix) := `Azote total (N)`,\n      !!paste0(\"Pt_\", suffix) := `Phosphore total (P)`,\n      !!paste0(\"DBO5_\", suffix) := `Demande biologique en oxygène (DBO5)`,\n      !!paste0(\"DCO_\", suffix) := `Demande chimique en oxygène (DCO)`,\n      !!paste0(\"MES_\", suffix) := `Matières en suspension (MES)`\n    )\n  return(dataset)\n}\n\n#temporary file with incoming flow for each nutrient in columns, at the national scale\ntemp_in &lt;- f_spread_nutrients(temp %&gt;% select(-c(discharged, nb_facilities)), incoming, \"in\")\n\n#temporary file with discharge flows for each nutrient in columns, at the national scale\ntemp_out &lt;- f_spread_nutrients(temp %&gt;% select(-c(incoming, nb_facilities)), discharged, \"out\")\n\n#temporary file with number of industrial facilities for each nutrient, at the national scale\ntemp_nb &lt;- f_spread_nutrients(temp %&gt;% select(-c(incoming, discharged)), nb_facilities, \"nb_facilities\")\n\n#merge together flows in, out, and number of facilities\nGEREP_national &lt;- \n  left_join(\n    temp_in, temp_out, by=\"Year\"\n)\nGEREP_national &lt;-   left_join(\n    GEREP_national, temp_nb, by=\"Year\"\n)\n\n\nWe summarize the flows at each water agency basin scale.\n\n\nCode\n#temporary file, incoming and discharges nutrient flows and number of facilities, for each water agency basin\ntemp &lt;- GEREP %&gt;%\n  group_by(Year, basin, nutrient) %&gt;%\n  summarise(\n    #transform from kg/year (for each facility) to kt/year (for each basin) for nutrient flows\n    incoming = signif(sum(incoming, na.rm=T)/10^6, 3),\n    discharged = signif(sum(discharged, na.rm=T)/10^6, 3),\n    nb_facilities = sum(is.na(nutrient)==F)\n    )\n\n#temporary file with incoming flow for each nutrient in columns, for each water agency basin\ntemp_in &lt;- f_spread_nutrients(temp %&gt;% select(-c(discharged, nb_facilities)), incoming, \"in\")\n\n#temporary file with discharge flows for each nutrient in columns, for each water agency basin\ntemp_out &lt;- f_spread_nutrients(temp %&gt;% select(-c(incoming, nb_facilities)), discharged, \"out\")\n\n#temporary file with number of industrial facilities for each nutrient, for each water agency basin\ntemp_nb &lt;- f_spread_nutrients(temp %&gt;% select(-c(incoming, discharged)), nb_facilities, \"nb_facilities\")\n\n#merge together flows in, out, and number of facilities\nGEREP_basins &lt;- left_join(\n  temp_in, temp_out, by=c(\"Year\", \"basin\")\n  )\nGEREP_basins &lt;- left_join(\n  GEREP_basins, temp_nb, by=c(\"Year\", \"basin\")\n  )\n\n\nWe also create a complete file with the flows of all the industrial facilities, not summarized at the basin nor national scale.\n\n\nCode\n# add dummy ID for each industrial facility to merge temporary files together\ntemp &lt;- GEREP %&gt;% mutate(ID = 1:n())\n\n# temporary file of incoming nutrient flows in columns, for each industrial facility\ntemp_in &lt;- f_spread_nutrients(temp %&gt;% select(-c(discharged)), incoming, \"in\")\n\n# temporary file of discharged nutrient flows in columns, for each industrial facility\ntemp_out &lt;- f_spread_nutrients(temp %&gt;% select(-c(incoming)), discharged, \"out\")\n\n# merge incoming and discharged nutrient flows\nGEREP_all &lt;- left_join(\n  temp_in, \n  temp_out %&gt;% select(ID, NGL_out, Pt_out, DBO5_out, DCO_out, MES_out), by=\"ID\"\n)\n\n#remove temporary files\nrm(temp_in, temp_out, temp_nb)\n\n\n\n\nAbout INERIS, responsible for IREP (Installation Registre Emissions Polluantes, installation register pollutant emissions).\nAbout Aida, INERIS website on risk prevention and environmental protection regulations, and the related decree concerning the reporting of industrial pollution discharges.\nAbout the European registry E-PRTR.\n\n\n\n\n\ngéorisque data\nIn the graphs below we see that there is a distinction in the gérosiques database between water (direct) and water (indirect) discharge. On this page we can see that what is called water indirect (“eau indirect”) in the database corresponds to pollutants sent from industrial facilities to wastewater treatment plants (“eau vers station d’épuration”). However it is unclear whether the reported pollutant flows correspond to the quantity first discharged to the sewage network or to the quantity discharged to the environment after WWTP end of pipe pollution treatment.\n\nOutliers identificationCorrected FlowsUnderstand network dischargeFinal data\n\n\nFor 2003-2020, we plot at the national scale the number of industrial facilities reporting discharges for the concerned nutrient (left) and the quantity discharged (right). Spikes in the right chart indicate some potential incoherent data, that we investigate.\n\n\nCode\n#function for the graph of géorisques nutrient inflows and discharges\nf_graph &lt;- function(nutrient){\n  temp &lt;- georisque %&gt;%\n    filter(is.na(!!as.symbol(nutrient))==F) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      n=n(),\n      nutrient = sum(!!as.symbol(nutrient))/10^6, #kt\n    )\n  temp2 &lt;- georisque %&gt;%\n    filter(is.na(!!as.symbol(nutrient))==F) %&gt;%\n    group_by(Year, discharge_environment) %&gt;%\n    summarise(\n      n=n(),\n      nutrient = sum(!!as.symbol(nutrient))/10^6, #kt\n    )\n  \n  g1 &lt;- ggplot(temp2) + \n      geom_area(aes(Year, n, fill=discharge_environment), alpha=.8) + \n      geom_line(data = temp, aes(Year, n)) +\n      ylim(0, NA) +\n      labs(\n        title = paste(nutrient, \"industrial emissions\"),\n        subtitle = paste(\"nb of industrial sites reporting\", nutrient, \"emissions\"),\n        x=\"\", y=\"\",\n        caption = \"\",\n        fill=\"environmental discharge:\"\n      ) +\n      theme(\n        legend.position = \"none\"\n      )\n  g2 &lt;- ggplot(temp2) + \n      geom_area(aes(Year, nutrient, fill=discharge_environment), alpha=.8) + \n      geom_line(data = temp, aes(Year, nutrient)) +\n      ylim(0, NA) +\n      labs(\n        title = \"\",\n        subtitle = paste(\"total\", nutrient, \"industrial emissions (kt/year)\"),\n        x=\"\", y=\"\",\n        caption = Source,\n        fill=\"environmental discharge:\"\n      ) +\n      theme(\n        legend.position = \"bottom\"\n      )\n  \n  g1 + g2 + plot_layout(guides = \"collect\") & theme(legend.position = 'bottom')\n}\n\n\n\nNGLPtDBO5DCOMESOutliers investigation and correction\n\n\nOutliers (visual identification): in 2017 for indirect water discharge; in 2010 for direct water discharge; potential outlier in 2007.\n\n\nCode\nf_graph(\"NGL\")\n\n\n\n\n\n\n\nOutliers (visual identification): in 2010 direct water discharge ; in 2008 and 2020 ground discharge.\n\n\nCode\nf_graph(\"Pt\")\n\n\n\n\n\n\n\nOutliers (visual identification): in 2010 direct water discharge, and in 2007.\n\n\nCode\nf_graph(\"DBO5\")\n\n\n\n\n\n\n\nOutliers (visual identification): in 2010 direct water discharge ; in 2018, 2019 and 2020 indirect water discharge.\n\n\nCode\nf_graph(\"DCO\")\n\n\n\n\n\n\n\nOutliers (visual identification): in 2010 direct water discharge ; in 2018, 2019 and 2020 indirect water discharge.\n\n\nCode\nf_graph(\"MES\")\n\n\n\n\n\n\n\nFor the 5 nutrients, in 2010 for SIAAP Marne Aval (ID 0079305101)\n\nNGL, Pt are off by a factor 100 (we divide the values by 100)\nDCO, DBO5 and MES are off by factor 1000 (we divide the values by 1000)\n\n\n\nCode\n#NGL\ngeorisque$NGL[georisque$Id == \"0079305101\" & georisque$Year == 2010] &lt;- \n  georisque$NGL[georisque$Id == \"0079305101\" & georisque$Year == 2010]/100\n#Pt\ngeorisque$Pt[georisque$Id == \"0079305101\" & georisque$Year == 2010] &lt;- \n  georisque$Pt[georisque$Id == \"0079305101\" & georisque$Year == 2010]/100\n#DBO5\ngeorisque$DBO5[georisque$Id == \"0079305101\" & georisque$Year == 2010] &lt;- \n  georisque$DBO5[georisque$Id == \"0079305101\" & georisque$Year == 2010]/1000\n#DCO\ngeorisque$DCO[georisque$Id == \"0079305101\" & georisque$Year == 2010] &lt;- \n  georisque$DCO[georisque$Id == \"0079305101\" & georisque$Year == 2010]/1000\n#MES\ngeorisque$MES[georisque$Id == \"0079305101\" & georisque$Year == 2010] &lt;- \n  georisque$MES[georisque$Id == \"0079305101\" & georisque$Year == 2010]/1000\n\n\nNGL :\n\nin 2007, Id 0006506939, SIAAP : OK, names and ID are just changes (originally SIAAP - Seine Aval) starting 2008, no need to correct for us\nin 2017, Id 0005403171, SMET NORD EST 71 : only year reported for this facility =&gt; we remove it\n\n\n\nCode\ngeorisque$NGL[georisque$Id == \"0005403171\" & georisque$Year == 2017] &lt;- NA\n\n\nPt :\n\nin 2008, Id 0005103644 SOVALD : only year reported =&gt; we remove it\nin 2020, Id 0005106528 SUEZ ORGANIQUE : only year reported for this facility =&gt; we remove it\n\n\n\nCode\ngeorisque$Pt[georisque$Id == \"0005103644\" & georisque$Year == 2008] &lt;- NA\ngeorisque$Pt[georisque$Id == \"0005106528\" & georisque$Year == 2020] &lt;- NA\n\n\nDBO5 :\n\nin 2007, Id 0009000031, Base Aérienne 103 CDT René MOUCHOTTE : only year reported for this facility =&gt; we remove it\n\n\n\nCode\ngeorisque$DBO5[georisque$Id == \"0009000031\" & georisque$Year == 2007] &lt;- NA\n\n\nDCO :\n\nin 2018, 2019 and 2020, Id 0006402259 SERAMM, Usine des boues: values about 10 times higher than the previous years. We divide the values of these years by 10.\n\n\n\nCode\ngeorisque$DCO[georisque$Id == \"0006402259\" & georisque$Year %in% c(2018, 2019, 2020)] &lt;- \n  georisque$DCO[georisque$Id == \"0006402259\" & georisque$Year %in% c(2018, 2019, 2020)]/10\n\n\nMES :\n\nin 2019, Id 0006700018, Matthieu COTTING : only year reported for this facility =&gt; we remove it\nin 2018, 2019, 2020, Id 0006402259 SERAMM Usine des boues : about 10 times higher than the previous years. We divide by 10.\n\n\n\nCode\ngeorisque$MES[georisque$Id == \"0006700018\" & georisque$Year ==2019] &lt;- NA\n\ngeorisque$MES[georisque$Id == \"0006402259\" & georisque$Year %in% c(2018, 2019, 2020)] &lt;- \n  georisque$MES[georisque$Id == \"0006402259\" & georisque$Year %in% c(2018, 2019, 2020)]/10\n\n\n\n\n\n\n\nHere are the pollutant flows after outliers correction. For the 5 nutrients, the data seem reliable starting 2008.\n\nNGLPtDBO5DCOMES\n\n\n\n\nCode\nf_graph(\"NGL\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph(\"Pt\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph(\"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph(\"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph(\"MES\")\n\n\n\n\n\n\n\n\n\n\nFor 2019 and 2020 discharged flows in the sanitation network and in the environment are reported (in m3/year) in the emission.csv file. We compare these data with the ones presented in the previous graphs, to check for coherence. Normally the nutrient flows discharged in the network should correspond to the “water (indirect)” flows of the previous graphs.\n\n\nCode\n#merge our main georisque data with file on network discharges\ndata_sewers_discharge_merged &lt;- inner_join(\n  file_georisques_discharge %&gt;% \n    #We only keep non null discharge flows into networks\n    filter(is.na(discharge_network_m3_y)==F) %&gt;%\n    filter(discharge_network_m3_y != 0),\n  georisque, \n  by = c(\"Year\", \"Id\")\n)\n\n# check that in the 2 databases the site names are the same. if returns 0 lines =&gt; OK\nnrow(data_sewers_discharge_merged %&gt;% filter(site_name.x != site_name.y))\n# we only keep 1 site name\ndata_sewers_discharge_merged &lt;- data_sewers_discharge_merged %&gt;% \n  select(-site_name.y) %&gt;%\n  rename(site_name = site_name.x)\n\n\nSome of what is reported as “connected disharged” in the emission file is actually not a discharge into the sanitation network, but a discharge in the environment from waste water treatment plant. We identify these waste water treatment plants by their APE code (“Collecte et traitement des eaux usées”) and EPRTR code (“Installations de traitement des eaux urbaines résiduaires d’une capacité de 100 000 équivalents habitants”).\n\n\nCode\n#see all the APE labels (about 90)\nunique(data_sewers_discharge_merged$libelle_ape)\n#see al the EPRTR labels (about 30)\nunique(data_sewers_discharge_merged$libelle_eprtr)\n\n# classify each row in WWTP / not WWTP, based on APE and EPRTR labels\ndata_sewers_discharge_merged &lt;- data_sewers_discharge_merged %&gt;% \n  mutate(\n    WWTP = case_when(\n      libelle_ape == \"Collecte et traitement des eaux usées\" | \n        libelle_eprtr == \"Installations de traitement des eaux urbaines résiduaires d'une capacité de 100 000 équivalents habitants\" ~\n        \"WWTP\", \n      T ~ \"not WWTP (=industrial facilities)\"\n    )\n  )\n\n\nIn the graphs below, we can see that besides what looks like some little incoherences, the “indirect water discharge” of our previous data (black line) corresponds well to the discharge into networks of facilities that are not WWTP (columns for 2019 and 2020, left).\nSo in the following, we will use the “indirect water discharge” as a proxy for what is discharged into the sanitation networks.\n\n\nCode\nf_graph_comparison &lt;- function(nutrient_select){\n  #in the main file keep only indirect water discharge of nutrient, normally corresponding to discharge in sanitation networks.\n  #agregate at the national scale\n  temp &lt;- georisque %&gt;%\n    filter(\n      is.na(!!as.symbol(nutrient_select))==F & discharge_environment == \"water (indirect)\"\n    ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(nutrient=sum(!!as.symbol(nutrient_select)))\n  \n  #keep only non null NGL emissions\n  temp2 &lt;- data_sewers_discharge_merged %&gt;% \n    filter(is.na(!!as.symbol(nutrient_select))==F) %&gt;%\n    rename(nutrient = !!as.symbol(nutrient_select))\n  \n  ggplot(temp2) +\n    geom_col(\n      aes(\n        Year, nutrient/10^6, \n        fill= discharge_environment\n        ),\n      alpha=.8\n      ) +\n    geom_line(\n      data=temp %&gt;% mutate(WWTP = \"not WWTP (=industrial facilities)\"),\n      aes(Year, nutrient/10^6)\n      ) +\n    facet_wrap(vars(WWTP)) +\n    labs(\n      x=\"\", y=\"kt/year\",\n      title = paste(\"Comparison of\", nutrient_select, \"'network discharge' to 'indirect water discharge'\"),\n      subtitle = \"network discharge of WWTP (right) and other facilities (left)\\nwater discharged in sewage networks (columns) and indirect water discharge (line)\",\n      caption=Source,\n      fill = \"discharge to\\n sewers networks\"\n    )\n}\n\n\n\nNGLPtDCODBO5MES\n\n\n\n\nCode\nf_graph_comparison(\"NGL\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(\"Pt\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(\"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(\"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(\"MES\")\n\n\n\n\n\n\n\n\n\n\nWe save the sewage network discharge for all the industrial sites.\n\n\nCode\n#remove temporary file used only to check consistency of sewers discharge\nrm(data_sewers_discharge_merged)\n\n#in the main georisques databse, select only \"water (indirect)\", i.e. discharge to sewers networks\ntemp &lt;- georisque %&gt;%\n  filter(\n    discharge_environment==\"water (indirect)\"\n    )\n\n#output path\noutput_data &lt;- \"output_data/industry_sewers_network_discharge/\"\n#save the géorisques data on industrial discharge to sewers\nf_save_csv_files(\n  temp, \n  output_data, \n  \"industry_sewers_network_discharge_georisque_ALL.csv\"\n  )\n\n\nWe also save the data aggregated at the national scale. Below are the graphs for each nutrient.\n\n\nCode\n#same as before, but flows summarized at the national scale\nnational_network_discharge &lt;- georisque %&gt;%\n  filter(\n    discharge_environment==\"water (indirect)\"\n    ) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    across(\n      c(Pt, NGL, DBO5, DCO, MES), \n      ~ signif(sum(.x, na.rm=T)/10^6, 3) #converted in kt per year\n    )\n  )\n\n#temporary file summarizing the number of industrial facilities at the national scale for each nutrient\ntemp &lt;- georisque %&gt;%\n  filter(\n    discharge_environment==\"water (indirect)\"\n    ) %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    across(\n      c(Pt, NGL, DBO5, DCO, MES), \n      ~ sum(is.na(.x)==F), .names = \"{.col}_nb_facilities\" #converted in kt per year\n    )\n  )\n\n#merge the 2 files (flows and number of facilities)\nnational_network_discharge &lt;- \n  left_join(national_network_discharge, temp, by=\"Year\")\n\n#output patch\noutput_data &lt;- \"output_data/industry_sewers_network_discharge/\"\n#save data at the national scale\nf_save_csv_files(\n  national_network_discharge, \n  output_data, \n  \"industry_sewers_network_discharge_georisque_national.csv\"\n  )\n\n\n\n\nCode\n#function for graph of industries discharge to sewers networks\nf_graph_final &lt;- function(dataset, nutrient_flow, nutrient_nb_facilities){\n  g &lt;- plot_grid(\n    ggplot(dataset) +\n      geom_area(aes(Year, !!as.symbol(nutrient_flow), fill=\"\"), alpha=.8) +\n        theme(legend.position = \"none\") +\n        labs(\n          x=\"\", y=paste(\"kt of\", nutrient_flow, \"per year\"), \n          caption = \"\\n\",\n          title=\"Industrial discharge to sewage network in France\",\n          subtitle = paste(nutrient_flow, \"flow\")\n        ),\n      ggplot(dataset) +\n        geom_area(aes(Year, !!as.symbol(nutrient_nb_facilities), fill=\"\"), alpha=.8) +\n        theme(legend.position = \"none\") +\n        labs(\n          x=\"\", y=\"\", \n          caption = Source,\n          title=\"\",\n          subtitle = paste(\"nb of facilities reporting\",  nutrient_flow, \"discharge\")\n        )\n    )\n  return(g)\n}\n\n\n\nPtNGLDBO5DCOMES\n\n\nOrder of magnitude for the 2010s : 0.7 ktP/year.\n\n\nCode\nf_graph_final(national_network_discharge, \"Pt\", \"Pt_nb_facilities\")\n\n\n\n\n\n\n\nOrder of magnitude for the 2010s : 3-4 ktN/year.\n\n\nCode\nf_graph_final(national_network_discharge, \"NGL\", \"NGL_nb_facilities\")\n\n\n\n\n\n\n\nOrder of magnitude for the 2010s : 60-70 ktDBO5/year.\n\n\nCode\nf_graph_final(national_network_discharge, \"DBO5\", \"DBO5_nb_facilities\")\n\n\n\n\n\n\n\nOrder of magnitude for the 2010s : 150 ktDCO/year.\n\n\nCode\nf_graph_final(national_network_discharge, \"DCO\", \"DCO_nb_facilities\")\n\n\n\n\n\n\n\nOrder of magnitude for the 2010s : 10-15 ktMES/year.\n\n\nCode\nf_graph_final(national_network_discharge, \"MES\", \"MES_nb_facilities\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nGEREP data\n\nBefore CorrectionAfter Correction\n\n\nBelow, we plot the GEREP nutrient flows of discharges in sewers networks, at the national and water agency basins scales. Spikes indicate potential outliers, that we investigate. At the national scale, we also compare it to the géorisques data. There are many more facilities reported in the GEREP database than in géorisques, but the difference in actual nutrient flows is much smaller. This indicates that the géorisques database captures the majority of large discharges. However the temporal dynamics are very similar in the 2 database.\nThe database also reports the discharge downstream of the sewer network, after the WWTP treatment (in yellow on th egraphs below), using actual or estimated WWTP removal efficiencies. We show it as an indication, but will not use it.\n\nNational (georisque comparison)Water Agencies BasinsOutliers investigation and correction\n\n\n\n\nCode\n#caption of the comparison graph\nSource_GEREP_georisque &lt;- \"Source: géorisque and GEREP database\\ncomputation by Thomas Starck\"\n\n#function for graph comparison between GEREP and géorisques databases\nf_graph_data_comparison &lt;- function(\n    dataset_GEREP, dataset_national_network_discharge, \n    nutri_georisq, nutri_GEREP_in, nutri_GEREP_out, nutri_nb_facilities, nutrient_label\n    ){\n  g1 &lt;- ggplot(dataset_GEREP) +\n    geom_area(\n      data = dataset_national_network_discharge, \n      aes(Year, !!as.symbol(nutri_georisq), fill=\"discharged in\\nsewage network\"), \n      alpha=.5\n      ) +\n    geom_line(\n      aes(Year, !!as.symbol(nutri_GEREP_out), color = \"discharged\\nafter treatment\")\n      ) +\n    geom_line(\n      aes(Year, !!as.symbol(nutri_GEREP_in), color = \" discharged\")\n      ) +\n    labs(\n      x=\"\", y=\"\",\n      color=\"GEREP database\",\n      fill=\"gérosique database\",\n      caption = Source_GEREP_georisque,\n      title = \"Comparison of discharge in sewage network\\nin GEREP and géorisques databases\",\n      subtitle = paste0(\"kt\", nutrient_label, \" per year\")\n    )\n  \n  g2 &lt;- ggplot(dataset_GEREP) +\n    geom_area(\n      data = dataset_national_network_discharge, \n      aes(Year, !!as.symbol(nutri_nb_facilities), fill=\"géorisque database\"), \n      alpha=.5\n      ) +\n    geom_line(\n      aes(Year, !!as.symbol(nutri_nb_facilities), color = \"GEREP database\")\n      ) +\n    theme(legend.position = c(.5, .5)) +\n    labs(\n      x=\"\", y=\"\",\n      color=\"\",\n      fill=\"\",\n      caption = \"\\n\",\n      title = \"\\n\",\n      subtitle = \"Number of facilities\"\n    )\n  \n  g &lt;- plot_grid(g1, g2, rel_widths = c(.6, .4))\n  return(g)\n}\n\n#caption for gerep flows graph\nSource_GEREP &lt;- \"Source: GEREP database\\ncomputation by Thomas Starck\"\n\n#function for graph of GEREP nutrient flows\nf_graph_basin &lt;- function(dataset, basin_select, nutri_in, nutri_out, nutri_nb_facilities, nutrient_label){\n  g1 &lt;- ggplot(dataset %&gt;% filter(basin == basin_select)) +\n    geom_line(\n      aes(Year, !!as.symbol(nutri_out), color = \"discharged\\nafter treatment\")\n      ) +\n    geom_line(\n      aes(Year, !!as.symbol(nutri_in), color = \" discharged\")\n      ) +\n    labs(\n      x=\"\", y=\"\",\n      color=\"\",\n      caption = \"\\n\",\n      title = \"Pollution discharged to sewage networks\",\n      subtitle = paste0(\"kt\", nutrient_label, \" per year\"),\n    ) +\n    ylim(0, NA)\n  \n  g2 &lt;- ggplot(dataset %&gt;% filter(basin == basin_select)) +\n    geom_line(\n      aes(Year, !!as.symbol(nutri_nb_facilities))\n      ) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", y=\"\",\n      title = \"\",\n      caption = Source_GEREP,\n      subtitle = \"number of facilities\"\n    ) +\n    ylim(0, NA)\n  g &lt;- plot_grid(g1, g2, rel_widths = c(.6, .4))\n  return(g)\n}\n\n\n\nPtNGLDBO5DCOMES\n\n\n\n\nCode\nf_graph_data_comparison(GEREP_national, national_network_discharge, \"Pt\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\", \"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_data_comparison(GEREP_national, national_network_discharge, \"NGL\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_data_comparison(GEREP_national, national_network_discharge, \"DBO5\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_data_comparison(GEREP_national, national_network_discharge, \"DCO\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_data_comparison(GEREP_national, national_network_discharge, \"MES\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\n\n\nPtNGLDBO5DCOMES\n\n\n\nAdour-GaronneArtois-PicardieLoire-BretagneRhin-MeuseRhône-MéditerranéeSeine-Normandie\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Adour-Garonne\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\",\"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Artois-Picardie\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\", \"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Loire-Bretagne\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\", \"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhin-Meuse\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\", \"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhône-Méditerranée\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\", \"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Seine-Normandie\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\", \"P\")\n\n\n\n\n\n\n\n\n\n\n\nAdour-GaronneArtois-PicardieLoire-BretagneRhin-MeuseRhône-MéditerranéeSeine-Normandie\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Adour-Garonne\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Artois-Picardie\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Loire-Bretagne\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhin-Meuse\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhône-Méditerranée\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Seine-Normandie\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\n\n\nAdour-GaronneArtois-PicardieLoire-BretagneRhin-MeuseRhône-MéditerranéeSeine-Normandie\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Adour-Garonne\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Artois-Picardie\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Loire-Bretagne\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhin-Meuse\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhône-Méditerranée\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Seine-Normandie\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\n\n\nAdour-GaronneArtois-PicardieLoire-BretagneRhin-MeuseRhône-MéditerranéeSeine-Normandie\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Adour-Garonne\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Artois-Picardie\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Loire-Bretagne\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhin-Meuse\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhône-Méditerranée\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Seine-Normandie\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\n\n\nAdour-GaronneArtois-PicardieLoire-BretagneRhin-MeuseRhône-MéditerranéeSeine-Normandie\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Adour-Garonne\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Artois-Picardie\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Loire-Bretagne\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhin-Meuse\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhône-Méditerranée\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Seine-Normandie\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere are the identified outliers and corrections we make, for each nutrient.\nPt\n\nin 2017 for CHAGNY, in and out, factor 100 (select incoming==55879 because there are several Chagny)\nin 2010 and 2011 for PORT-SUR-SAONE, does not exist afterwards. We do not correct it\nin 2010 and 2011 for VITRY-SUR-SEINE, correct factor 100 in, factor 10 out\n\nNGL\n\nin 2017 for CHAGNY, correct factor 100 (select incoming == 7711302 because there are several Chagny)\nin 2019 for AUBIGNY, correct factor 1000 in, factor 10 000 out\nin 2013 for ILLZACH, correct factor 10 in and out\n\nDCO\n\nin 2018 for MARSEILLE, correct factor 10 in and out 10 (select incoming==94603000 because there are several Marseille)\n\nMES\n\nin 2018, MARSEILLE, correct factor 10 in and out 10 (select incoming==24927000 because there are several Marseille)\nin 2019 for BISCHWILLER, correct factor 10 000 in and out\n\n\n\nCode\n#PHOSPHORUS\n#CHAGNY in, 2017\nGEREP$incoming[\n  GEREP$Year==2017 & GEREP$name_COM == \"CHAGNY\" & GEREP$nutrient==\"Phosphore total (P)\" & GEREP$incoming==55879\n  ] &lt;- \n  GEREP$incoming[\n    GEREP$Year==2017 & GEREP$name_COM == \"CHAGNY\" & GEREP$nutrient==\"Phosphore total (P)\" & GEREP$incoming==55879\n    ]/100\n#CHAGNY out, 2017\nGEREP$discharged[\n  GEREP$Year==2017 & GEREP$name_COM == \"CHAGNY\" & GEREP$nutrient==\"Phosphore total (P)\" & GEREP$incoming==55879\n  ] &lt;- \n  GEREP$discharged[\n    GEREP$Year==2017 & GEREP$name_COM == \"CHAGNY\" & GEREP$nutrient==\"Phosphore total (P)\" & GEREP$incoming==55879\n    ]/100\n#VITRY-SUR-SEIN in, 2010 and 2011\nGEREP$incoming[\n  GEREP$Year%in%c(2010, 2011) & GEREP$name_COM == \"VITRY-SUR-SEINE\" & GEREP$nutrient==\"Phosphore total (P)\"\n  ] &lt;- \n  GEREP$incoming[\n    GEREP$Year%in%c(2010, 2011) & GEREP$name_COM == \"VITRY-SUR-SEINE\" & GEREP$nutrient==\"Phosphore total (P)\"\n    ]/100\n#VITRY-SUR-SEIN out, 2010 and 2011\nGEREP$discharged[\n  GEREP$Year%in%c(2010, 2011) & GEREP$name_COM == \"VITRY-SUR-SEINE\" & GEREP$nutrient==\"Phosphore total (P)\"\n  ] &lt;- \n  GEREP$discharged[\n    GEREP$Year%in%c(2010, 2011) & GEREP$name_COM == \"VITRY-SUR-SEINE\" & GEREP$nutrient==\"Phosphore total (P)\"\n    ]/10\n\n\n#NITROGEN\n#CHAGNY in, 2017\nGEREP$incoming[\n  GEREP$Year==2017 & GEREP$name_COM == \"CHAGNY\" & GEREP$nutrient==\"Azote total (N)\" & GEREP$incoming==7711302\n  ] &lt;- \n  GEREP$incoming[\n    GEREP$Year==2017 & GEREP$name_COM == \"CHAGNY\" & GEREP$nutrient==\"Azote total (N)\" & GEREP$incoming==7711302\n    ]/100\n#AUBIGNY in, 2019\nGEREP$incoming[\n  GEREP$Year==2019 & GEREP$name_COM == \"AUBIGNY\" & GEREP$nutrient==\"Azote total (N)\"\n  ] &lt;- \n  GEREP$incoming[\n    GEREP$Year==2019 & GEREP$name_COM == \"AUBIGNY\" & GEREP$nutrient==\"Azote total (N)\"\n    ]/1000\n#AUBIGNY out, 2019\nGEREP$discharged[\n  GEREP$Year==2019 & GEREP$name_COM == \"AUBIGNY\" & GEREP$nutrient==\"Azote total (N)\"\n  ] &lt;- \n  GEREP$discharged[\n    GEREP$Year==2019 & GEREP$name_COM == \"AUBIGNY\" & GEREP$nutrient==\"Azote total (N)\"\n    ]/10000\n#ILLZACH in, 2013\nGEREP$incoming[\n  GEREP$Year==2013 & GEREP$name_COM == \"ILLZACH\" & GEREP$nutrient==\"Azote total (N)\"\n  ] &lt;- \n  GEREP$incoming[\n    GEREP$Year==2013 & GEREP$name_COM == \"ILLZACH\" & GEREP$nutrient==\"Azote total (N)\"\n    ]/10\n#ILLZACH out, 2013\nGEREP$discharged[\n  GEREP$Year==2013 & GEREP$name_COM == \"ILLZACH\" & GEREP$nutrient==\"Azote total (N)\"\n  ] &lt;- \n  GEREP$discharged[\n    GEREP$Year==2013 & GEREP$name_COM == \"ILLZACH\" & GEREP$nutrient==\"Azote total (N)\"\n    ]/10\n\n\n#DCO\n#MARSEILLE in, 2018 \nGEREP$incoming[\n  GEREP$Year==2018 & GEREP$name_COM == \"MARSEILLE\" & GEREP$nutrient==\"Demande chimique en oxygène (DCO)\" & GEREP$incoming==94603000\n  ] &lt;- \n  GEREP$incoming[\n    GEREP$Year==2018 & GEREP$name_COM == \"MARSEILLE\" & GEREP$nutrient==\"Demande chimique en oxygène (DCO)\" & GEREP$incoming==94603000\n    ]/10\n#MARSEILLE out, 2018 \nGEREP$discharged[\n  GEREP$Year==2018 & GEREP$name_COM == \"MARSEILLE\" & GEREP$nutrient==\"Demande chimique en oxygène (DCO)\" & GEREP$incoming==94603000\n  ] &lt;- \n  GEREP$discharged[\n    GEREP$Year==2018 & GEREP$name_COM == \"MARSEILLE\" & GEREP$nutrient==\"Demande chimique en oxygène (DCO)\" & GEREP$incoming==94603000\n    ]/10\n\n#MES\n#MARSEILLE in, 2018 \nGEREP$incoming[\n  GEREP$Year==2018 & GEREP$name_COM == \"MARSEILLE\" & GEREP$nutrient==\"Matières en suspension (MES)\" & GEREP$incoming==24927000\n  ] &lt;- \n  GEREP$incoming[\n    GEREP$Year==2018 & GEREP$name_COM == \"MARSEILLE\" & GEREP$nutrient==\"Matières en suspension (MES)\" & GEREP$incoming==24927000\n    ]/10\n#MARSEILLE out, 2018 \nGEREP$discharged[\n  GEREP$Year==2018 & GEREP$name_COM == \"MARSEILLE\" & GEREP$nutrient==\"Matières en suspension (MES)\" & GEREP$incoming==24927000\n  ] &lt;- \n  GEREP$discharged[\n    GEREP$Year==2018 & GEREP$name_COM == \"MARSEILLE\" & GEREP$nutrient==\"Matières en suspension (MES)\" & GEREP$incoming==24927000\n    ]/10\n#BISCHWILLER in, 2019\nGEREP$incoming[\n  GEREP$Year==2019 & GEREP$name_COM == \"BISCHWILLER\" & GEREP$nutrient==\"Matières en suspension (MES)\"\n  ] &lt;- \n  GEREP$incoming[\n    GEREP$Year==2019 & GEREP$name_COM == \"BISCHWILLER\" & GEREP$nutrient==\"Matières en suspension (MES)\"\n    ]/10000\n#BISCHWILLER out, 2019\nGEREP$discharged[\n  GEREP$Year==2019 & GEREP$name_COM == \"BISCHWILLER\" & GEREP$nutrient==\"Matières en suspension (MES)\"\n  ] &lt;- \n  GEREP$discharged[\n    GEREP$Year==2019 & GEREP$name_COM == \"BISCHWILLER\" & GEREP$nutrient==\"Matières en suspension (MES)\"\n    ]/10000\n\n\n\n\n\n\n\nWe recompute the aggregated (national and basin scale) flows after our corrections on the GEREP database.\n\n\nCode\n#We recompute the flows at the national scale\n\n#temporary file, incoming and discharged nutrient flows and number of facilities, at the national scale\ntemp &lt;- GEREP %&gt;%\n  group_by(Year, nutrient) %&gt;%\n  #transform from kg/year (for each facility) to kt/year (national) for nutrient flows\n  summarise(\n    incoming = signif(sum(incoming, na.rm=T)/10^6, 3),\n    discharged = signif(sum(discharged, na.rm=T)/10^6, 3),\n    nb_facilities = sum(is.na(nutrient)==F)\n    )\n\n#temporary file with incoming flow for each nutrient in columns, at the national scale\ntemp_in &lt;- f_spread_nutrients(temp %&gt;% select(-c(discharged, nb_facilities)), incoming, \"in\")\n\n#temporary file with discharge flows for each nutrient in columns, at the national scale\ntemp_out &lt;- f_spread_nutrients(temp %&gt;% select(-c(incoming, nb_facilities)), discharged, \"out\")\n\n#temporary file with number of industrial facilities for each nutrient, at the national scale\ntemp_nb &lt;- f_spread_nutrients(temp %&gt;% select(-c(incoming, discharged)), nb_facilities, \"nb_facilities\")\n\n#merge together flows in, out, and number of facilities\nGEREP_national &lt;- \n  left_join(\n    temp_in, temp_out, by=\"Year\"\n)\nGEREP_national &lt;-   left_join(\n    GEREP_national, temp_nb, by=\"Year\"\n)\n\n\n\n\n# We recompute the flows for each basin\n\n#temporary file, incoming and discharges nutrient flows and number of facilities, for each water agency basin\ntemp &lt;- GEREP %&gt;%\n  group_by(Year, basin, nutrient) %&gt;%\n  summarise(\n    #transform from kg/year (for each facility) to kt/year (for each basin) for nutrient flows\n    incoming = signif(sum(incoming, na.rm=T)/10^6, 3),\n    discharged = signif(sum(discharged, na.rm=T)/10^6, 3),\n    nb_facilities = sum(is.na(nutrient)==F)\n    )\n\n#temporary file with incoming flow for each nutrient in columns, for each water agency basin\ntemp_in &lt;- f_spread_nutrients(temp %&gt;% select(-c(discharged, nb_facilities)), incoming, \"in\")\n\n#temporary file with discharge flows for each nutrient in columns, for each water agency basin\ntemp_out &lt;- f_spread_nutrients(temp %&gt;% select(-c(incoming, nb_facilities)), discharged, \"out\")\n\n#temporary file with number of industrial facilities for each nutrient, for each water agency basin\ntemp_nb &lt;- f_spread_nutrients(temp %&gt;% select(-c(incoming, discharged)), nb_facilities, \"nb_facilities\")\n\n#merge together flows in, out, and number of facilities\nGEREP_basins &lt;- left_join(\n  temp_in, temp_out, by=c(\"Year\", \"basin\")\n)\nGEREP_basins &lt;- left_join(\n  GEREP_basins, temp_nb, by=c(\"Year\", \"basin\")\n)\n\n#remove temporary files\nrm(temp_in, temp_out, temp_nb)\n\n\n\nNational (georisque comparison)Basins\n\n\n\nPtNGLDBO5DCOMES\n\n\n\n\nCode\nf_graph_data_comparison(GEREP_national, national_network_discharge, \"Pt\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\", \"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_data_comparison(GEREP_national, national_network_discharge, \"NGL\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_data_comparison(GEREP_national, national_network_discharge, \"DBO5\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_data_comparison(GEREP_national, national_network_discharge, \"DCO\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_data_comparison(GEREP_national, national_network_discharge, \"MES\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\n\n\nPtNGLDBO5DCOMES\n\n\n\nAdour-GaronneArtois-PicardieLoire-BretagneRhin-MeuseRhône-MéditerranéeSeine-Normandie\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Adour-Garonne\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\",\"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Artois-Picardie\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\", \"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Loire-Bretagne\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\", \"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhin-Meuse\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\", \"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhône-Méditerranée\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\", \"P\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Seine-Normandie\", \"Pt_in\", \"Pt_out\", \"Pt_nb_facilities\", \"P\")\n\n\n\n\n\n\n\n\n\n\n\nAdour-GaronneArtois-PicardieLoire-BretagneRhin-MeuseRhône-MéditerranéeSeine-Normandie\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Adour-Garonne\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Artois-Picardie\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Loire-Bretagne\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhin-Meuse\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhône-Méditerranée\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Seine-Normandie\", \"NGL_in\", \"NGL_out\", \"NGL_nb_facilities\", \"N\")\n\n\n\n\n\n\n\n\n\n\n\nAdour-GaronneArtois-PicardieLoire-BretagneRhin-MeuseRhône-MéditerranéeSeine-Normandie\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Adour-Garonne\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Artois-Picardie\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Loire-Bretagne\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhin-Meuse\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhône-Méditerranée\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Seine-Normandie\", \"DBO5_in\", \"DBO5_out\", \"DBO5_nb_facilities\", \"DBO5\")\n\n\n\n\n\n\n\n\n\n\n\nAdour-GaronneArtois-PicardieLoire-BretagneRhin-MeuseRhône-MéditerranéeSeine-Normandie\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Adour-Garonne\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Artois-Picardie\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Loire-Bretagne\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhin-Meuse\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhône-Méditerranée\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Seine-Normandie\", \"DCO_in\", \"DCO_out\", \"DCO_nb_facilities\", \"DCO\")\n\n\n\n\n\n\n\n\n\n\n\nAdour-GaronneArtois-PicardieLoire-BretagneRhin-MeuseRhône-MéditerranéeSeine-Normandie\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Adour-Garonne\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Artois-Picardie\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Loire-Bretagne\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhin-Meuse\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Rhône-Méditerranée\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_basin(GEREP_basins, \"Seine-Normandie\", \"MES_in\", \"MES_out\", \"MES_nb_facilities\", \"MES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave\nIn the géorisques data paragraph, we already saved the cleaned géorisques database.\nWe also save the GEREP data, which is more complete than the géorisques database. Note: with a little more work, it would also be possible to save industrial pollution at the departmental and regional scale.\n\n\nCode\n#output path\noutput_data &lt;- \"output_data/industry_sewers_network_discharge/\"\n\n#aggregate GEREP water agencies basins and national data\ntemp &lt;- bind_rows(\n  GEREP_national %&gt;% mutate(basin = \"Metropolitan France\"),\n  GEREP_basins\n)\n#save\nf_save_csv_files(\n  temp,\n  output_data,\n  \"industry_sewers_network_discharge_GEREP_basins.csv\"\n)\n\n# save all facilities of GEREP database\nf_save_csv_files(\n  GEREP_all,\n  output_data,\n  \"industry_sewers_network_discharge_GEREP_ALL.csv\"\n)\n\n\nWe add a metadata file to describe our saved files.\n\n\nCode\nwriteLines(\n\n\"The files in this folder report industries discharge to sewers networks. Géorisque database is publicly available, but less complete than GEREP database. GEREP is more complete, but anonymized (industry names and IDs are not reported). We report both databases. All files report pollution for each year for the following nutrients: NGL, Pt, DBO5, DCO, MES.\n  \n  \nGEORISQUES DATABASE\n  \n**industry_sewers_network_discharge_georisque_ALL.csv** reports individual industrial facilities discharges to sewers networks, with their name and ID. Pollutant flows are in **kg/year**. \n    \n**industry_sewers_network_discharge_georisque_national.csv** reports industrial facilities discharges to sewers networks at the national scale. Pollutant flows are in **kt/year**. We also report the number of industrial facilities for each nutrient.\n    \n    \nGEREP DATABASE\n  \nWe report both nutrient _in and _out. _in refers to what enters the sewers after industry discharge. _out refers to release downstream, after wastewater treatment plant, based on actual measure or estimation of wastewater treatment plant removal efficiency. We report it as an indication but do not use it. \n  \n**industry_sewers_network_discharge_GEREP_ALL.csv** reports individual industrial facilities discharges to sewers networks, with their city (COM), department (DEP) and region (REG) names (name_) and INSEE code (INSEE_). There is also an industry facility dummy ID (the data is anonymized). Pollutant flows are in **kg/year**.\n    \n**industry_sewers_network_discharge_GEREP_basins.csv** reports industrial facilities discharges to sewers networks at the national scale and for each water agency basin. Pollutant flows are in **kt/year**. We also report the number of industrial facilities for each nutrient.\n  \", \n  paste(output_data, \"metadata.md\")\n  )\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "0_sanitation_portal.html",
    "href": "0_sanitation_portal.html",
    "title": "Sanitation Portal",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n#loading relevant packages\nlibrary(cowplot) #for plot_grid()\nlibrary(patchwork) #for multiple ggplot graphs\nlibrary(sf) #for spherical geometry operations\n#at first with sf there was an issues with GDAL and PROJ librairies that were not found. I found the answer here https://github.com/r-spatial/sf/issues/2302 and here https://github.com/r-spatial/sf/issues/2298. I uninstalled the sf package and manually installed it with install.packages('sf', repos = c('https://r-spatial.r-universe.dev')). This changed the version \n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n  theme(plot.title = element_text(face=\"bold\"))\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\nSource &lt;- \"Source: Sanitation Portal\\nTreatment by Thomas Starck\"\n\nYear_analysis &lt;- 2019\n\n# Load the function file\nsource(\"functions.R\")\n\n\n\nSource and data description\n\nSourcePrepare data (inconsisten basin reporting)Extrapolate data\n\n\nWe load the files for each year, downloaded from this page from the sanitation portal website (on the left “téléchargement des données”).\n\n\nCode\nf_load_files &lt;- function(){\n  f2021 &lt;- read_delim(\"source_data/0_sanitation_portal/db_export_2021.csv\", delim = \"|\") %&gt;% mutate(Year = 2021)\n  f2020 &lt;- read_delim(\"source_data/0_sanitation_portal/db_export_2020.csv\", delim = \"|\") %&gt;% mutate(Year = 2020)\n  f2019 &lt;- read_delim(\"source_data/0_sanitation_portal/db_export_2019.csv\", delim = \"|\") %&gt;% mutate(Year = 2019)\n  f2018 &lt;- read_delim(\"source_data/0_sanitation_portal/db_export_2018.csv\", delim = \"|\") %&gt;% mutate(Year = 2018)\n  f2017 &lt;- read_delim(\"source_data/0_sanitation_portal/db_export_2017.csv\", delim = \"|\") %&gt;% mutate(Year = 2017)\n  f2016 &lt;- read_delim(\"source_data/0_sanitation_portal/db_export_2016.csv\", delim = \"|\") %&gt;% mutate(Year = 2016)\n  f2015 &lt;- read_delim(\"source_data/0_sanitation_portal/db_export_2015.csv\", delim = \"|\") %&gt;% mutate(Year = 2015)\n  f2014 &lt;- read_delim(\"source_data/0_sanitation_portal/db_export_2014.csv\", delim = \"|\") %&gt;% mutate(Year = 2014)\n  temp &lt;- bind_rows(f2021, f2020, f2019, f2018, f2017, f2016, f2015, f2014)\n  return(temp)\n}\nfile_BDERU &lt;- f_load_files()\n\n\nSome information about the variables can be found on the glossary on the website. There are many variables in the table, more than 100. We select only a part of them, about 40. They are related to :\n\nLocation and ID of the facilities : latitude and longitude of the plant and of its discharge ; department and city number ; name of the facility\nEnvironmental issues regarding the discharge : discharge environment (surface water, sea…)\nCapacity and flow\nTreatment types\nSludge production and destination\n\n\n\nWe select and clean the data.\n\n\nCode\nBDERU &lt;- file_BDERU %&gt;% select(\n  basin_reported = `    \"Libellé du bassin\"`,\n  Year,\n  #city infos\n  INSEE_dep = `Numéro département`,\n  INSEE_com = `Code INSEE commune principale`, #also INSEE commune implantation\n  city_EH = `Taille agglomération (EH)`, #careful some cities reported multiple times (because multiple WWTP for 1 city)\n  city_sum_max_incoming_EH = `Maximum de la somme des pollutions entrantes (EH)`, #for when several WWTP in 1 city\n  city_sum_nominal_capa_EH = `Somme des capacités nominales (EH)`, #for when several WWTP in 1 city\n  #WWTP infos\n  creation_year = `Année de création`,\n  lat_STEU = `Latitude du STEU (WGS84)`,\n  long_STEU = `Longitude du STEU (WGS84)`,\n  lat_discharge = `Latitude du rejet (WGS84)`,\n  long_discharge = `Longitude du rejet (WGS84)`,\n  code_WWTP = `Code du STEU`,\n  name_WWTP = `Nom du STEU`,\n  discharge_environment = `Type du milieu du rejet`,\n  network_type = `Type de réseau majoritaire`,\n  #WWTP capacity anf flowq\n  PE_bin = `Tranche obligation`,\n  capacity = `Capacité nominale en EH`,\n  capacity_kgDBO5 = `Capacité nominale en Kg de DBO5`,\n  max_incoming_EH = `Charge maximale entrante (EH)`,\n  flow_m3_d = `Débit entrant en m3/j`,\n  percentil95_m3_day = `Percentile95 calculé en m3/j`,\n  percent_direct_discharge_dry_weather = `Pourcentage rejet direct temps sec`,\n  #Tretment type\n  treatment = `Filière eau principale`,\n  sludge_treatment = `Filière boues principale`,\n  bio_treatment = `Niveau traitement existant : biologique`, #il y a aussi le traitement requis pour bio, N et P (au-delà de l'existant)\n  N_treatment = `Niveau traitement existant : azote`,\n  P_treatment = `Niveau traitement existant : phosphore`,\n  sanitization_treatment = `Niveau traitement existant : désinfection`, \n  #boues produites\n  sludge_production = `Prod boues sans réactif (tMS/an)`,\n  sludge_reagent_consumption = `Quantité réactifs utilisés (t/an)`,\n  sludge_spread = `Quantité épandage agricole (tMS/an)`,\n  sludge_incinerated = `Quantité incinérée (tMS/an)`,\n  sludge_compost = `Quantité Compostage «produit» (tMS/an)`,\n  sludge_landfill = `Quantité mise en décharge (tMS/an)`,\n  sludge_industrial_valorisation = `Quantité en valorisation industrielle (tMS/an)`,\n  sludge_to_other_WWTP = `Qté envoyée sur autre STEU (tMS/an)`, \n  #sensibilité\n  N_sens = `Sensibilité azote`, #aussi la date\n  P_sens = `Sensibilité phosphore`, #aussi la date\n  #suivi\n  autosurveillance_manual = `Existence manuel autosurveillance STEU`,\n  #conformité\n  compliance_DBO = `Conformité ERU perf DBO`,\n  compliance_DCO = `Conformité ERU perf DCO`,\n  compliance_NGL = `Conformité ERU perf NGL`,\n  compliance_PT = `Conformité ERU perf PT`,\n  #pas compris : \"Compostage déchet\", \"transit\", \"unité de traitement de sous produit\", centre de séchage\", \"unité de méthanisation\"\n  #intéressant : liste des communes raccordées (séparées par |)\n  date_operation_begin = `Date de mise en service du STEU`,\n  date_operation_end = `Date de mise hors serv du STEU`\n)\n\n#we focus on the year of begin of operation and not creation year, because it is smoother for the following\nBDERU &lt;- BDERU %&gt;%\n  mutate(\n    date_operation_begin = as.Date(date_operation_begin, '%Y/%m/%d'),\n    year_operation_begin = as.numeric(format(date_operation_begin,'%Y')),\n    #sometimes inconstitent year, in that case we take the creation year\n    year_operation_begin = case_when(\n      (year_operation_begin != creation_year) & (year_operation_begin&lt;1950) ~ creation_year,\n      T ~ year_operation_begin\n    )\n  )\n\n#recomputes and reorders WWTP by their share of total capacity\nBDERU &lt;- \n  BDERU %&gt;%\n  mutate(\n    PE_bin = case_when(\n      capacity &lt; 200 ~ \"0 - 200 PE\",\n      (capacity &gt;= 200) & (capacity &lt;2000) ~ \"200 - 2 000 PE\",\n      (capacity &gt;= 2000) & (capacity &lt;10000) ~ \"2 000 - 10 000 PE\",\n      (capacity &gt;= 10000) & (capacity &lt;100000) ~ \"10 000 - 100 000 PE\",\n      capacity &gt;= 100000 ~ \"&gt; 100 000 PE\",\n      T ~ \"unreported PE\"\n    )\n  )\nBDERU$PE_bin &lt;- \n  factor(\n    BDERU$PE_bin, \n    levels = \n      c(\"unreported PE\",\n        \"0 - 200 PE\", \n        \"200 - 2 000 PE\", \n        \"2 000 - 10 000 PE\",\n        \"10 000 - 100 000 PE\", \n        \"&gt; 100 000 PE\"\n        )\n      )\n  \n\nBDERU &lt;- BDERU %&gt;% \n  mutate(\n    sensitivity = case_when(\n      N_sens == \"Oui\" & P_sens == \"Non\" ~ \"Only N sensible\",\n      P_sens == \"Oui\" & N_sens == \"Non\" ~ \"Only P sensible\",\n      P_sens == \"Oui\" & N_sens == \"Oui\" ~ \"N and P sensible\",\n      T ~ \"Not sensible\"\n  )\n)\n#reorders sensitivity zones\nBDERU$sensitivity &lt;- \n  factor(\n    BDERU$sensitivity, \n    levels = \n      c(\n        \"Not sensible\",\n        \"Only N sensible\",\n        \"Only P sensible\", \n        \"N and P sensible\"\n        )\n    )\n\n\nWe correct the reported basins. Check here for the corresponding number to the corresponding basin (i.e. 03 = Seine-Normandie)\n\n\nCode\n#remove some code WWTP (closed ones and foreign)\nBDERU &lt;- BDERU %&gt;%\n  filter(!(substr(code_WWTP, 1, 2) %in% c(\n    \"NO\", #for NOSTEU\n    \"PR\", #for \"PROVISOIRE\"\n    \"CL\", \"ST\", #for CLO and STEUCLO\n    \"AL\", \"BE\", \"CH\", \"ES\", \"LU\", \"MC\", \"HS\" #for other countries\n    )\n    )\n    )\n\n#sometimes empty space at the beginning of the code : we correct this\nBDERU &lt;- BDERU %&gt;%\n  mutate(\n    code_WWTP = case_when(\n      substr(code_WWTP, 1, 1)==\" \" ~ sub(\" \", \"\", code_WWTP),\n      T ~ code_WWTP\n    )\n  )\n\n#sometimes missing 0 at the beginning of the code : we correct this\nBDERU &lt;- BDERU %&gt;%\n  mutate(\n    code_WWTP = case_when(\n      substr(code_WWTP, 1, 1)==\"8\" ~ paste0(\"0\", code_WWTP),\n      substr(code_WWTP, 1, 1)==\"6\" ~ paste0(\"0\", code_WWTP),\n      substr(code_WWTP, 1, 1)==\"3\" ~ paste0(\"0\", code_WWTP),\n      substr(code_WWTP, 1, 1)==\"2\" ~ paste0(\"0\", code_WWTP),\n      T ~ code_WWTP\n    )\n  )\n\n#basins based on code\nBDERU &lt;- BDERU %&gt;% mutate(\n  basin_code=\n    case_when(\n      substr(code_WWTP, 1, 2) == \"01\" ~ \"Artois-Picardie\",\n      substr(code_WWTP, 1, 2) == \"02\" ~ \"Rhin-Meuse\",\n      substr(code_WWTP, 1, 2) == \"03\" ~ \"Seine-Normandie\",\n      substr(code_WWTP, 1, 2) == \"04\" ~ \"Loire-Bretagne\",\n      substr(code_WWTP, 1, 2) == \"05\" ~ \"Adour-Garonne\",\n      substr(code_WWTP, 1, 2) %in% c(\"06\", \"12\") ~ \"Rhône-Méditerranée\",\n      T ~ \"Overseas and others\"\n    )\n)\n\nBDERU$basin_code &lt;- \n  factor(\n    BDERU$basin_code, \n    levels = \n      c(\"Artois-Picardie\", \n        \"Rhin-Meuse\", \n        \"Seine-Normandie\", \n        \"Loire-Bretagne\", \n        \"Adour-Garonne\",\n        \"Rhône-Méditerranée\",\n        \"Overseas and others\"\n        )\n    )\n\nBDERU &lt;- BDERU %&gt;%\n  mutate(\n    basin_reported = case_when(\n      basin_reported %in% c(\n        \"GUADELOUPE               \", \n        \"MAYOTTE                  \", \n        \"REUNION                  \",\n        \"GUYANE                   \",\n        \"MARTINIQUE               \",\n        \"GUADELOUPE\",\n        \"REUNION\",\n        \"GUYANE\",\n        \"MARTINIQUE\") ~ \"Overseas and others\",\n      basin_reported %in% c(\n        \"SEINE-NORMANDIE          \", \n        \"SEINE-NORMANDIE\") ~ \"Seine-Normandie\",\n      basin_reported %in% c(\n        \"CORSE\",\n        \"RHONE-MEDITERRANEE       \",\n        \"RHONE-MEDITERRANEE-CORSE \",\n        \"RHONE-MEDITERRANEE-CORSE\") ~ \"Rhône-Méditerranée\",\n      basin_reported %in% c(\n        \"LOIRE-BRETAGNE           \",\n        \"LOIRE-BRETAGNE\",\n        \"LOIRE-BRETAGNE         \") ~ \"Loire-Bretagne\",\n      basin_reported %in% c(\n        \"ADOUR-GARONNE            \",\n        \"ADOUR-GARONNE\") ~ \"Adour-Garonne\",\n      basin_reported %in% c(\n        \"ARTOIS-PICARDIE          \",\n        \"ARTOIS-PICARDIE\") ~ \"Artois-Picardie\",\n      basin_reported %in% c(\n        \"RHIN-MEUSE               \",\n        \"RHIN-MEUSE\") ~ \"Rhin-Meuse\"\n      )\n    )\n\nBDERU$basin_reported &lt;- \n  factor(\n    BDERU$basin_reported, \n    levels = \n      c(\"Artois-Picardie\", \n        \"Rhin-Meuse\", \n        \"Seine-Normandie\", \n        \"Loire-Bretagne\", \n        \"Adour-Garonne\",\n        \"Rhône-Méditerranée\",\n        \"Overseas and others\"\n        )\n    )\n\n\nSometimes the reported basin does not match what would be expected based on the individual WWTP code. This concerns ~150 WWTP (out of ~20,000 in Fance, 0.8%). In terms of nominal capacity this is 0.2 million population equivalent ((out of ~100 million in France, 0.2%). The largest WWTP in this case is 30,000 population equivalent.\nWe chose to remove all the concerned WWTP from the database. In a further version, we could manually reconcile the data.\n\n\nCode\n#to see when reported basin is different than code in 2020, mostly small ones\ntemp &lt;- BDERU %&gt;% \n  filter(\n    basin_reported!=basin_code\n    ) %&gt;% \n  select(\n    Year, basin_code, basin_reported, name_WWTP, code_WWTP, capacity, PE_bin\n    )\n\ng1 &lt;- ggplot(temp) + \n  geom_bar(aes(Year, fill=PE_bin)) + \n  labs(\n    title = \"WWTP with mismatching basin\",\n    subtitle = \"number of WWTP\",\n    caption=\"\\n\", x=\"\", fill=\"\", y=\"\",\n    ) +\n  theme(legend.position = \"bottom\") \ng2 &lt;- ggplot(temp) + \n  geom_col(aes(Year, capacity/10^6, fill=PE_bin)) +\n  labs(\n    title = \"\",\n    subtitle = \"capacity (million population equivalent)\",\n    caption=Source, x=\"\", fill=\"\", y=\"\",\n    ) +\n  theme(legend.position = \"none\")\n\ng1 + g2 + plot_layout(guides = \"collect\") & theme(legend.position = 'bottom')\n\n\n\n\n\n\n\nCode\n#get unique ID of mismatching WWTP\ntemp &lt;- temp %&gt;% select(code_WWTP)\nBDERU &lt;- anti_join(BDERU, temp, by=\"code_WWTP\")\n\n#remove second basin column now useless\nBDERU &lt;- BDERU %&gt;%\n  select(\n    -basin_code,\n    basin = basin_reported\n  )\n\n\n\n\nWe use the creation dates of each station create a database for the period 1960-2020. Note that we use the year 2014 to determine the characteristics of the WWTP, so the further we go back in time, the less reliable is the database. Indeed for instance when a WWTP change capacities, it usually changes SANDRE codes. However it allows to see the temporal evolution of the number of stations.\n\n\nCode\nf_file_WWTP_all_years &lt;- function(year_min, year_max, dataset){\n  data &lt;- dataset %&gt;% \n    filter(Year == year_max) %&gt;%\n    select(code_WWTP, year_operation_begin)\n  #initialisation\n  file &lt;- data %&gt;%\n    filter(year_operation_begin&lt;=year_min) %&gt;%\n    mutate(Year = year_min)\n  #loop to add WWTP to each year\n  for (i in (year_min+1):year_max) {\n    temp &lt;- data %&gt;%\n      filter(year_operation_begin==i) %&gt;%\n      mutate(Year = i)\n    temp2 &lt;- data %&gt;%\n      filter(year_operation_begin&lt;=i) %&gt;%\n      mutate(Year = i)\n    file &lt;- bind_rows(file, temp, temp2)\n  }\n  return(file)\n}\n# Il faudrait aussi voir quand les stations ont été fermées ?\ntemp &lt;- f_file_WWTP_all_years(1965, 2014, BDERU)\ntemp &lt;- temp %&gt;% distinct() #understand why doublons\ntemp &lt;- left_join(\n  temp %&gt;% select(-year_operation_begin), \n  BDERU %&gt;% filter(Year==2014) %&gt;% select(-Year), \n  by=c(\"code_WWTP\")\n)\nBDERU &lt;- bind_rows(\n  temp %&gt;% filter(Year&lt;2014), \n  BDERU \n)\n\n\n\nExtrapolation : number of facilitesExtrapolation : nominal capacityLast changes\n\n\nThere seem to have some incoherence with a large spike in the reporting rate in 2006 for some basins.\n\n\nCode\ntemp &lt;- BDERU %&gt;%\n  select(Year, basin, capacity, PE_bin) %&gt;%\n  group_by(Year, basin, PE_bin) %&gt;%\n  summarise(\n    n = n(),\n    capacity = sum(capacity, na.rm = T)\n  )\n\nggplot(temp %&gt;% filter(basin!=\"Overseas and others\")) + \n  geom_area(aes(Year, n, fill=PE_bin)) +\n  facet_wrap(vars(basin), scales=\"free_y\") +\n  labs(\n    x=\"\", y=\"number of facilities\",\n    fill=\"capacity range (PE)\",\n    title = \"Temporal evolution of the number of WWTP\",\n    subtitle = \"By basin and by capacity range\",\n    caption = Source\n  )\n\n\n\n\n\n\n\nThere are big discontinuities in the total capacity evolution. It is probably due to the fact that some big WWTP “appear” when they are etended. For instance the big spike for Seine-Normandie in 2006 is probably the Seine-Aval WWTP, even though it exists since 1940.\n\n\nCode\nggplot(temp %&gt;% filter(basin!=\"Overseas and others\")) + \n  geom_area(aes(Year, capacity/10^6, fill=PE_bin)) +\n  facet_wrap(vars(basin), scales=\"free_y\") +\n  labs(\n    x=\"\", y=\"million of population equivalent\",\n    fill=\"capacity range (PE)\",\n    title = \"Temporal evolution of total capacity\",\n    subtitle = \"By basin and by capacity range\",\n    caption = Source\n  )\n\n\n\n\n\n\n\nFor these reasons we focus on the years starting 2007, when the whole is smoother.\n\n\nCode\nBDERU &lt;- BDERU %&gt;% filter(Year&gt;2006)\n\n\nWe leave empty values for sludge data before 2014 (the first year officially reported on the sanitation portal).\n\n\nCode\nBDERU$sludge_production[BDERU$Year&lt;2014] &lt;- NA\nBDERU$sludge_spread[BDERU$Year&lt;2014] &lt;- NA\nBDERU$sludge_compost[BDERU$Year&lt;2014] &lt;- NA\nBDERU$sludge_landfill[BDERU$Year&lt;2014] &lt;- NA\nBDERU$sludge_incinerated[BDERU$Year&lt;2014] &lt;- NA\nBDERU$sludge_to_other_WWTP[BDERU$Year&lt;2014] &lt;- NA\nBDERU$sludge_industrial_valorisation[BDERU$Year&lt;2014] &lt;- NA\nBDERU$sludge_reagent_consumption[BDERU$Year&lt;2014] &lt;- NA\n\n\n\n\nCode\n#harmonize denomination (i.e;\"Oui\" before 2016 and \"oui\" after)\nBDERU &lt;- BDERU %&gt;%\n  mutate(\n    N_sens = case_when(\n      N_sens == \"Oui\" ~ \"oui\",\n      N_sens == \"Non\" ~ \"non\",\n      T~N_sens\n    ),\n    P_sens = case_when(\n      P_sens == \"Oui\" ~ \"oui\",\n      P_sens == \"Non\" ~ \"non\",\n      T~P_sens\n    )\n  )\n\n\n\n\n\n\n\n\n\n\nCapacities\n\nReportingLarge categoriesHistogramCumulative distributionBy basin\n\n\n\n\nCode\ntemp &lt;- BDERU %&gt;% group_by(Year) %&gt;%\n  summarise(capacity = sum(capacity)/10^6, nb_WWTP = n()) \n\ncoef &lt;- max(temp$capacity)/max(temp$nb_WWTP)\n\nggplot(temp) +\n  geom_line(aes(Year, nb_WWTP, color = \"number of reported facilities (left)\")) + \n  geom_line(aes(Year, capacity/coef, color = \"total reported capacity (right)\")) + \n  scale_y_continuous(\n    limits = c(0, NA),\n    sec.axis = sec_axis(trans=~.*coef, name=\"million Population Equivalent\")) +\n  labs(\n    title = \"Temporal evolution of the reporting in the database\",\n    subtitle = \"in terms of number of facilities reported and total reported capacity\",\n    y=\"\", x=\"\", color=\"\", caption =\"\"\n  ) +\n  theme(\n    legend.position = c(0.5, 0.5)\n  )\n\n\n\n\n\n\n\nThe order of July 2015 requires waste water treatment plants to report some self monitoring information regarding their operational data. The level of precision of this reporting is dependant on categories related to the facility capacity, expressed in kgDBO5 per day. When converting this in population equivalent (1 PE = 0.06 kgDBO5/d), this gives the categories of our database, reported in the following graph.\nAlso note that these categories are used for the minimum performance requirements when the facility is in a nitrogen or phosphorus sensible zone.\nFacilities smaller than 200 Population Equivalent (PE) represent 35% of the facilities, and the ones smaller than 2 000 PE represent about 3/4 of the facilities. Plants larger than 10 000 population equivalent make up less thant 10% of the facilities.\nYet in terms of total capacity, Plants &lt; 2 000 PE make only 10% of the total, ant the ones &gt; 10 000 PE represent 70%.\nThis reflects the highly skewed distribution of the facilities capacities, presented in the 2 following tabs (“Histogramm” and “Cumulative distribution”), which use a finer scale than the 5 catgories presented here.\n\n\nCode\ntemp &lt;- BDERU %&gt;%\n  filter(is.na(capacity)==F) %&gt;%\n  select(Year, capacity, PE_bin) %&gt;%\n  group_by(Year, PE_bin) %&gt;%\n  summarise(\n    `capacity (million PE)` = sum(capacity)/10^6,\n    `number of stations` = n()\n  ) %&gt;% \n  gather(key=capacity_or_n, value = value, `capacity (million PE)`, `number of stations`)\n\n\n\nAbsoluteRelative\n\n\n\n\nCode\nggplot(temp) + \n  geom_area(aes(Year, value, fill=PE_bin), alpha=.8) + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  viridis::scale_fill_viridis(discrete = T) +\n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"For each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) + \n  geom_area(aes(Year, value, fill=PE_bin), position = \"fill\", alpha=.8) + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  viridis::scale_fill_viridis(discrete = T) +\n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"Proportion of each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\n\nHere we present the distribution at a finer resolution than the previous 5 administrative categories. As in the “Large categories” tab, we present both the distribution of the number of facilities and the distribution of the total capacity.\n\n\nCode\n#mieux si on arrive à faire un double axe ?\ntemp &lt;- BDERU %&gt;% filter(Year==Year_analysis)\nggplot(temp) + \n  geom_histogram(aes(capacity, fill = \"Nb of facilities\"), n=100, alpha=.4, stat=\"density\") +\n  geom_histogram(aes(capacity, weight = capacity, fill=\"Nb of facilities weighted by capacity\"), n=100, alpha=.4, stat=\"density\") +\n  theme(\n    legend.position = c(0.7,0.8),\n  ) +\n  labs(\n    x=\"Waste Water Treatment Plant Capacity \\n(Population Equivalent)\",\n    y=\"Distribution density\",\n    fill=\"Distribution of\",\n    title = paste(\"WWTP capacities distribution,\", as.character(Year_analysis)),\n    subtitle = \"raw or weighted by capacity\",\n    caption = Source\n  ) +\n  scale_x_log10(labels = scales::label_number(drop0trailing = TRUE))\n\n\n\n\n\n\n\nThe capacity distribution of waste water treatment plants is extremely skewed, as shown in the graph below.\n\nAbout 0.1% of the waste water treatment plants (20 facilities) represent 20% of the total installed capacity\nAbout 1% of the waste water treatment plants (200 facilities) represent 50% of the total installed capacity\nAbout 2% of the waste water treatment plants represent 66% of the total installed capacity\nAbout 10% of the waste water treatment plants represent 85% of the total installed capacity\n\nTo help visualize this skewed distribution, we also present the same graph in a log-log scale (tab “Nb of WWTP vs Capacity (log scale).\nFinally a focus is made on Zipf’s law, which is well known for the size distribution of cities and might be applied to waste water treatment plants capacities.\n\n\nCode\ntemp &lt;- BDERU %&gt;% filter(Year==Year_analysis) %&gt;% \n  select(code_WWTP, name_WWTP, capacity) %&gt;%\n  arrange(desc(capacity)) %&gt;%\n  mutate( \n    cumulative_capacity = cumsum(capacity)/10^6,\n    rank_STEU = rank(-capacity, ties.method = \"first\"),\n    percent_cumulative_capacity = round(cumulative_capacity/sum(capacity/10^6)*100, digits = 1),\n    percent_rank = round(rank_STEU/n()*100, digits = 1)\n    ) \n\nf_save_csv_files(\n  temp %&gt;% mutate(basin = \"national\"),\n  \"output_data/zipf_law/\",\n  \"zipf_law_sanitation_portal.csv\"\n)\n\ncoef &lt;- max(temp$rank_STEU)/100\ncoef2 &lt;- max(temp$cumulative_capacity)/100\n\n\n\nNb of WWTP vs Capacity (linear scale)Nb of WWTP vs Capacity (log scale)Zipf law\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(x = percent_rank, y = percent_cumulative_capacity)\n    ) + \n  scale_x_continuous(\n    breaks = seq(0, 100, by=10),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, \n        name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    breaks = seq(0, 100, by=10),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions PE)\",\n        breaks = seq(0, 100, by=20)\n        ),\n    ) + \n  theme(legend.position = \"none\") +\n  labs(\n    title = paste(\"Cumulative distribution,\", Year_analysis),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) \n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(aes(x = percent_rank, y = percent_cumulative_capacity)) + \n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE),\n    sec.axis = sec_axis(trans=~.*coef, name=\"nb of WWTP\",\n                        labels = scales::label_number(drop0trailing = TRUE))) + \n  scale_y_continuous(\n    breaks = seq(0, 100, by=10),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions Population Equivalent)\",\n        breaks = seq(0, 100, by=20)\n        )\n    ) + \n    theme(legend.position = \"none\") +\n  labs(\n    title = paste(\"Cumulative distribution,\", Year_analysis),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) \n\n\n\n\n\n\n\nHere is a defintion of Zipf law applied to cities :\nIt is a rank/size distribution rule applied to cities, which consists in ranking them according to their population rank. The relationship between the population of each city and its rank would be a constant: thus, the first city is more populated than the second, as is the relationship between the second and the third, etc. In a double logarithmic scale, in x and y, the curve of the set of points representing the population and the rank of the cities follows a straight line of adjustment.\nIt can also be applied to toher instances, such as word frequencies in a large text. One limitation of its application to cities is that it is dependant on the administrative limits, which are arbitrary and not necessary representative of the continuity of a metropolitan area. One may expect that it would be more accurate for distribution of Waste Water Treatment Plant, which is linked to the distribution of cities but is less prone to “administrative” limitations and more “physical”.\nIn our case, it might be possible to see a Zipf law for the first 10 000 waste water treatment plants, which represent about 50% of the total number of facilities (and 98% of the national capacity). However, it must be kept in mind that the Zipf law should be used with caution.\n\n\nCode\nggplot(temp) +\n  geom_point(aes(x = rank_STEU, y = capacity)) + \n  labs(\n    x=\"Waste Water Treatment Plant \\n(ranked by capacity)\",\n    y=\" Waste Water Treatment Plant capacity\\n(Population Equivalent)\",\n    title = paste(\"WWTP capacity vs rank,\", Year_analysis),\n    subtitle = \"looking for a Zipf law\",) +\n  scale_x_log10(labels = scales::label_number(drop0trailing = TRUE)) + \n  scale_y_log10(labels = scales::label_number(drop0trailing = TRUE))\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- BDERU %&gt;% \n  filter(basin !=\"Overseas and others\") %&gt;%\n  group_by(\n    Year, basin\n  ) %&gt;%\n  summarise(\n    capacity = sum(capacity, na.rm = T)/10^6,\n    n=n()\n  )\n\n\n\nNominal capacityNumber of stations\n\n\n\n\nCode\nplot_grid(\n  ggplot(temp) + \n    geom_area(aes(Year, capacity, fill=basin), alpha=.8) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", y=\"million population equivalent\",\n      title = \"Total installed nominal capacity\",\n      subtitle = \"Metropolitan France\",\n      caption=\"\\n\"\n    ),\n  ggplot(temp) + \n    geom_area(aes(Year, capacity, fill=basin), alpha=.8) +\n    facet_wrap(vars(basin)) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", y=\"\",\n      title = \"\",\n      subtitle = \"by basin\",\n      caption=Source, \n      fill=\"\"\n    ),\n  rel_widths = c(1/3, 2/3)\n)\n\n\n\n\n\n\n\n\n\nCode\nplot_grid(\n  ggplot(temp) + \n    geom_area(aes(Year, n, fill=basin), alpha=.8) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", y=\"number of stations\",\n      title = \"Number of WWTP\",\n      subtitle = \"Metropolitan France\",\n      caption=\"\\n\"\n    ),\n  ggplot(temp) + \n    geom_area(aes(Year, n, fill=basin), alpha=.8) +\n    facet_wrap(vars(basin)) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", y=\"\",\n      title = \"\",\n      subtitle = \"by basin\",\n      caption=Source, \n      fill=\"\"\n    ),\n  rel_widths = c(1/3, 2/3)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSludge Production\n\nReporting qualityOutliers correctionAfter correction\n\n\nIn the database, the difference between unreported sludge production and no sludge production is not obvious, since they are both indicated as “0”. Yet it probably does not affect the total sludge production in a very significant way.\nAs shown by the graphs below, out of the more than 20 000 waste water treatment plants, more than half report 0 sludge production. However, in terms of capacity, they represent less than 10% of the total capacity of the country, which is about 100 million population equivalent. This reflects the highly skewed distribution of plant size and the fact that the “0” sludge production is mostly due to very small facilities\nIn the following, we will thus consider that total sludge production is rather accurate.\n\n\nCode\ntemp &lt;- BDERU %&gt;% \n  mutate(\n    reported_sludge = \n      case_when(\n        sludge_production == 0 ~ \"=0\",\n        sludge_production &gt; 0 ~ \"&gt;0\"\n        )\n    ) %&gt;%\n  group_by(Year, reported_sludge) %&gt;%\n  summarise(\n    capacity = sum(capacity)/10^6,\n    nb_WWTP = n()\n  )\n#gathering data for plot\ntemp &lt;- temp %&gt;% \n  gather(key = type, value = value, nb_WWTP, capacity)\n\n#plot\nggplot(temp) + \n  geom_area(aes(Year, value, fill = reported_sludge)) + \n  facet_wrap(vars(type), scales = \"free\") + \n  labs(\n    x=\"\", y=\"\", fill=\"Reported sludge production\",\n    title = \"Facilities reporting 0 or positive sludge production\",\n    subtitle = \"in terms of capacity (left) or number of plants (right)\",\n    caption = \n  ) + \n  theme(legend.position = \"top\") +\n  xlim(2014, 2020)\n\n\n\n\n\n\n\n\nProduction per Population EquivalentNational scale outliers: first visualization\n\n\nTo identify outliers, we define thresholds values, estimated through the emprical distribution (below in log and linear scale).\nTypically, about 2/3 are between 5 and 15 kg DM/PE, and 95% are between 0 and 20 kg DM/PE. We define the important outliers threshold as a sludge production of more than 1 ton of DM/PE.\n\nlog scalelinear scale\n\n\n\n\nCode\ntemp &lt;- BDERU %&gt;% filter(basin != \"Overseas and others\") %&gt;%\n  filter(Year &gt;= 2014)\n#log scale\nplot_grid(\n  ggplot(temp) +\n    stat_ecdf(\n      aes(\n        sludge_production/capacity*1000, \n        group=basin, color=basin\n        ), \n      geom = \"point\") +\n    geom_vline(xintercept = 1000, linetype=\"dashed\") +\n    annotate(\n      geom=\"text\", label=\"important\\noutliers\",\n      x=2000, y=0.5\n      ) +\n    scale_x_log10() +\n    theme(\n      legend.position = \"none\"\n    ) +\n    labs(\n      title = \"Sludge production per Population Equivalent, by basin\",\n      subtitle = \"Empirical cumulative distribution\",\n      x=\"\", y=\"cumulative frequency\"\n    ),\n  ggplot(temp) +\n    geom_histogram(\n      aes(\n        sludge_production/capacity*1000, \n        group=basin, fill=basin\n        ), \n      alpha=.8, bins=100) +\n    geom_vline(xintercept = 1000, linetype=\"dashed\") +\n    theme(\n      legend.position = c(0.2, 0.5),\n      legend.title = element_blank()\n    ) +\n    scale_x_log10() +\n    labs(\n      title = \"\",\n      subtitle = \"Histogram\",\n      x=\"sludge production (kgDM/PE/year)\"\n    ),\n  nrow=2, axis = \"tblr\", align = \"hv\"\n)\n\n\n\n\n\n\n\n\n\nCode\n#linear scale\ntemp &lt;- BDERU %&gt;% filter(basin != \"Overseas and others\") %&gt;%\n  filter(Year &gt;= 2014)\nx_min &lt;- 0.01\nx_max &lt;- 30\nplot_grid(\n  ggplot(temp) +\n    stat_ecdf(\n      aes(\n        sludge_production/capacity*1000, \n        group=basin, color=basin\n        ), \n      geom = \"point\") +\n    geom_vline(xintercept = 1000, linetype=\"dashed\") +\n    annotate(\n      geom=\"text\", label=\"important\\noutliers\",\n      x=2000, y=0.5\n      ) +\n    theme(\n      legend.position = \"none\"\n    ) +\n    xlim(x_min, x_max) +\n    labs(\n      title = \"Sludge production per Population Equivalent, by basin\",\n      subtitle = \"Empirical cumulative distribution\",\n      x=\"\", y=\"cumulative frequency\"\n    ),\n  ggplot(temp) +\n    geom_histogram(\n      aes(\n        sludge_production/capacity*1000, \n        group=basin, fill=basin\n        ), \n      alpha=.8, bins=30) +\n    geom_vline(xintercept = 1000, linetype=\"dashed\") +\n    theme(\n      legend.position = c(0.8, 0.5),\n      legend.title = element_blank()\n    ) +\n    xlim(x_min, x_max) +\n    labs(\n      title = \"\",\n      subtitle = \"Histogram\",\n      x=\"sludge production (kgDM/PE/year)\"\n    ),\n  nrow=2, axis = \"tblr\", align = \"hv\"\n)\n\n\n\n\n\n\n\n\n\n\nBlack points represent the outliers with the previously defined threshold. The complete list is below the graph, as well as the manual correction we apply.\n\n\nCode\noutliers &lt;-\n  BDERU %&gt;% \n  filter(Year &gt;= 2014) %&gt;%\n  mutate(\n    sludge_EH = sludge_production/capacity\n    ) %&gt;%\n  filter(\n    sludge_EH&gt;1\n    ) %&gt;%\n  select(\n    code_WWTP, name_WWTP, \n    sludge_production, capacity, \n    sludge_EH, basin, Year)\noutliers_basin &lt;- \n  outliers %&gt;%\n  group_by(\n    Year, basin\n  ) %&gt;%\n  summarise(\n    sludge_production = sum(sludge_production, na.rm = T)/10^6\n  )\n\ntemp &lt;- BDERU %&gt;%\n  filter(Year &gt;= 2014) %&gt;%\n  group_by(\n    Year, basin\n  ) %&gt;%\n  summarise(\n    sludge_production = sum(sludge_production, na.rm = T)/10^6\n  )\n\nplot_grid(\n  ggplot(temp %&gt;% filter(basin != \"Overseas and others\")) +\n    geom_area(\n      aes(\n        Year, sludge_production, \n        fill=basin\n        )\n      ) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", y=\"total sludge production\\n(Mt DM / year)\",\n      subtitle = \"Metropolitan France\",\n      title = \"Sludge production by France WWTPs, before correction\",\n      caption = \"\"\n    ),\n  ggplot(temp %&gt;% filter(basin != \"Overseas and others\")) +\n    geom_area(\n      aes(\n        Year, sludge_production, fill=basin\n        )) +\n    geom_point(\n      data = outliers_basin, \n      aes(Year, sludge_production), color=\"black\"\n      ) +\n    facet_wrap(vars(basin), scales = \"free_y\") +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", y=\"\",\n      subtitle = \"by basin ; dots represent outliers values\", \n      title = \"\", caption = Source),\n  nrow=1, rel_widths = c(1/3, 2/3)\n)\n\n\n\n\n\n\n\nCode\n#to see outliers\noutliers &lt;- outliers %&gt;% select(Year, code_WWTP)\n#getting all the others columns related to outliers\noutliers &lt;- outliers %&gt;% left_join(BDERU, by = c(\"code_WWTP\", \"Year\"))\n\n\nArtois-Picardie, 2018, 2020\n\n2018 : BEAUDIGNIES, 011234300000\n2018 : HON-HERGIES, 011270900000\n2018 : VERTAIN, 011234200000\n2020 : BETTENCOURT-RIVIERE, 010826700000\n2019 : BETTENCOURT-RIVIERE, 010826700000\n2 other small ones\n\nRhin-Meuse, 2018\n\n2018, CHATEAU SALINS, 025713200139\n\nSeine-Normandie, 2014, 2017\n\n2017 : CHAMPIGNY, 038909301000\n2014 : CHEVANNES, 038910201000\n2016 : CHAMPCEVRAIS, 038907201000\n7 others that do not affect the total because of little sludge production\n\nLoire-Bretagne, 2014, 2015, 2019\n\n2015 : POIRE-SUR-VIE la Blélière, 0485178S0005\n2015 : CHAIZE-GIRAUD - chemin des Mottes, 0485045S0001,\n2014 : CELLETTES Route de Seur, 0441031S0001,\n2015 : BEAULIEU-SOUS-LA-ROCHE - la Guissière, 0485016S0002,\n2019 : VALENCAY, 0436228S0003,\n2019 : STEU DE: PLOUGUIN (GARO), 0429196S0001\n9 others that do not affect the total because of little sludge production\n\nAdour-Garonne, 2018,\n\n2018 : BEYCHAC ET CAILLAU 2, 0533433V007\n1 other that does not affect the total because of little sludge production\n\nRhône-Méditerranée, 2018, 2019, 2020\n\n2018 : BOURG ST ANDEOL, 060907042001,\n2021 : ANNOT2, 060904008001,\n2021 : BARLES, 060904020001,\n2020 : BARLES, 060904020001,\n2019 : BARLES, 060904020001,\n2019 : CORBIÈRES/VILLAGE, 060904063002\n2019 : ENTREVAUX VILLAGE, 060904076001\n2019 : LA BRILLANE, 060904034001\n2019 : THUILES (LES)/VILLAGE, 060904220001\n2019 : PUIMOISSON/VILLAGE, 060904157001\nstill many in 2019\n\nWe change these outliers values, probably reported as kgDM instead of tDM, by dividing them by 1 000.\n\n\nCode\n#Artois-Picardie\nBDERU$sludge_production[BDERU$code_WWTP == \"011234300000\" & BDERU$Year == 2018] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"011234300000\" & BDERU$Year == 2018]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"011270900000\" & BDERU$Year == 2018] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"011270900000\" & BDERU$Year == 2018]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"011234200000\" & BDERU$Year == 2018] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"011234200000\" & BDERU$Year == 2018]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"010826700000\" & BDERU$Year == 2020] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"010826700000\" & BDERU$Year == 2020]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"010826700000\" & BDERU$Year == 2019] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"010826700000\" & BDERU$Year == 2019]/10^3\n\n#Rhin-Meuse\nBDERU$sludge_production[BDERU$code_WWTP == \"025713200139\" & BDERU$Year == 2018] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"025713200139\" & BDERU$Year == 2018]/10^3\n\n#Seine-Normandue\nBDERU$sludge_production[BDERU$code_WWTP == \"038909301000\" & BDERU$Year == 2017] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"038909301000\" & BDERU$Year == 2017]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"038910201000\" & BDERU$Year == 2014] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"038910201000\" & BDERU$Year == 2014]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"038907201000\" & BDERU$Year == 2016] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"038907201000\" & BDERU$Year == 2016]/10^3\n\n#Loire-Bretagne\nBDERU$sludge_production[BDERU$code_WWTP == \"0485178S0005\" & BDERU$Year == 2015] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"0485178S0005\" & BDERU$Year == 2015]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"0485045S0001\" & BDERU$Year == 2015] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"0485045S0001\" & BDERU$Year == 2015]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"0441031S0001\" & BDERU$Year == 2014] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"0441031S0001\" & BDERU$Year == 2014]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"0485016S0002\" & BDERU$Year == 2015] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"0485016S0002\" & BDERU$Year == 2015]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"0436228S0003\" & BDERU$Year == 2019] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"0436228S0003\" & BDERU$Year == 2019]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"0429196S0001\" & BDERU$Year == 2019] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"0429196S0001\" & BDERU$Year == 2019]/10^3\n\n#Adour-Garonne\nBDERU$sludge_production[BDERU$code_WWTP == \"0533433V007\" & BDERU$Year == 2018] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"0533433V007\" & BDERU$Year == 2018]/10^3\n\n#Rhone-Mediterranee\nBDERU$sludge_production[BDERU$code_WWTP == \"060907042001\" & BDERU$Year == 2018] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"060907042001\" & BDERU$Year == 2018]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"060904008001\" & BDERU$Year == 2021] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"060904008001\" & BDERU$Year == 2021]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"060904020001\" & BDERU$Year == 2021] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"060904020001\" & BDERU$Year == 2021]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"060904020001\" & BDERU$Year == 2020] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"060904020001\" & BDERU$Year == 2020]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"060904020001\" & BDERU$Year == 2019] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"060904020001\" & BDERU$Year == 2019]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"060904063002\" & BDERU$Year == 2019] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"060904063002\" & BDERU$Year == 2019]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"060904076001\" & BDERU$Year == 2019] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"060904076001\" & BDERU$Year == 2019]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"060904034001\" & BDERU$Year == 2019] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"060904034001\" & BDERU$Year == 2019]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"060904220001\" & BDERU$Year == 2019] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"060904220001\" & BDERU$Year == 2019]/10^3\nBDERU$sludge_production[BDERU$code_WWTP == \"060904157001\" & BDERU$Year == 2019] &lt;- \n  BDERU$sludge_production[BDERU$code_WWTP == \"060904157001\" & BDERU$Year == 2019]/10^3\n\n\n\n\n\n\n\nAfter the biggest outliers correction, the main source of variability at the metropolitan scale remains the drop in Seine-Normandie in 2016. The general order of magnitude for sludge production is about 1-1.1 Mt of Dry Matter per year.\n\n\nCode\ntemp &lt;- BDERU %&gt;%\n  filter(Year&gt;=2014) %&gt;%\n  group_by(\n    Year, basin\n  ) %&gt;%\n  summarise(\n    sludge_production = sum(sludge_production, na.rm = T)/10^6\n  )\n\nplot_grid(\n  ggplot(temp %&gt;% filter(basin != \"Overseas and others\")) +\n    geom_area(\n      aes(\n        Year, sludge_production, \n        fill=basin\n        )\n      ) +\n    theme(legend.position = \"none\") +\n    ylim(0, 1.2) +\n    labs(\n      x=\"\", y=\"total sludge production\\n(Mt DM / year)\",\n      subtitle = \"Metropolitan France\",\n      title = \"Sludge production by France WWTP\",\n      caption = \"\"\n    ),\n  ggplot(temp %&gt;% filter(basin != \"Overseas and others\")) +\n    geom_area(\n      aes(\n        Year, sludge_production, fill=basin\n        )\n      ) +\n    facet_wrap(vars(basin), scales = \"free_y\") +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", y=\"\",\n      subtitle = \"by basin\", \n      title = \"\", caption = Source),\n  nrow=1, rel_widths = c(1/3, 2/3)\n)\n\n\n\n\n\n\n\n\n\n\nSludge destination\n\nReporting issuesOutliers correctionAfter correctionDestination repartition\n\n\nOnce the sludge is produced, it can be used in different ways, as reported by the data base :\n\nagricultural spreading\ncomposting\nincineration\nlandfilled\nindustrial valorization\nsent to another treatment plant\n\nThere are some serious reporting issues. Before 2017, sludge destination is virtually not reported. In 2017, the sum of all the destinations represents only half of the total reported production. Only starting 2018 the total is more coherent, with still a mismatch on the order of 10%. This is why the global repartition of produced sludge should be seen as an indicative order of magnitude, valid only at the large scale.\n\n\nCode\n#sludge production at the national scale 2014-2020\ntemp &lt;- BDERU %&gt;% group_by(Year) %&gt;% \n  summarise(\n    sludge_production = sum(sludge_production/10^6, na.rm = T)\n    )\n\n#sludge destination at the national scale\ntemp2 &lt;- BDERU %&gt;% group_by(Year) %&gt;% \n  summarise(\n    across(\n      c(\n        sludge_spread, sludge_incinerated, \n        sludge_compost, sludge_landfill, \n        sludge_industrial_valorisation,\n        sludge_to_other_WWTP,\n        ), \n      ~sum(.x, na.rm=T)/10^6\n      )\n    ) %&gt;%\n  rename(\n    spread = sludge_spread, \n    incinerated = sludge_incinerated, \n    composted = sludge_compost, \n    landfilled = sludge_landfill, \n    `industrial valorisation` = sludge_industrial_valorisation,\n    `to other WWTP` = sludge_to_other_WWTP\n  ) %&gt;%\n  gather(\n    key = destination, \n    value = tDM, \n    spread:`to other WWTP`\n    )\ntemp2$destination &lt;- \n  factor(\n    temp2$destination, \n    levels = \n      c(\"to other WWTP\",\n        \"industrial valorisation\",\n        \"landfilled\",\n        \"incinerated\",\n        \"spread\",\n        \"composted\"\n        )\n      )\n  \n#synthesis graph\nggplot(temp2) + \n  geom_area(aes(Year, tDM, fill = destination)) + \n  geom_line(data = temp, aes(Year, sludge_production)) +\n  ylim(0, NA) +\n  xlim(2016, 2021) +\n  labs(\n    x=\"\", y = \"Mt od dry matter\",\n    fill = \"sludge destination\",\n    caption = Source,\n    subtitle = \"in France, as reported on the sanitation poral\", \n    title= \"Comparison of produced sludge and its destination\"\n  )\n\n\n\n\n\n\n\nWe identify the biggest outliers. We filter the WWTP when the absolute difference between the sum of destinations and the reported produced sludge is higher than 10 000 t per year (so higher than 1% of the total 1 Mt produced per year).\n\n\nCode\noutliers &lt;- BDERU %&gt;%\n  filter(Year&gt;2016) %&gt;%\n  select(\n    Year, name_WWTP, code_WWTP, capacity,\n    sludge_production,\n    sludge_spread, sludge_incinerated, \n    sludge_compost, sludge_landfill, \n    sludge_industrial_valorisation,\n    sludge_to_other_WWTP\n    ) %&gt;%\n  mutate(\n    sum_destination = \n      sludge_spread + sludge_incinerated +\n      sludge_compost + sludge_landfill +\n      sludge_industrial_valorisation +\n      sludge_to_other_WWTP,\n    ratio = round(sum_destination/sludge_production, 1),\n    abs_difference = round(abs(sum_destination-sludge_production), 0)\n  ) %&gt;%\n  filter(\n    abs_difference &gt; 10000\n  ) %&gt;%\n  #reorder columns\n  select(\n    Year, code_WWTP, name_WWTP, abs_difference,\n    sludge_production, sum_destination, ratio, capacity,\n    sludge_spread, sludge_incinerated, \n    sludge_compost, sludge_landfill, \n    sludge_industrial_valorisation,\n    sludge_to_other_WWTP\n  )\n\n\nThis yields 42 observations on 2017-2021 (an absolute difference threshold of 1 000 tons yields 400 results). We order them by decreasing order of the absolute difference. Here are the corrections we apply :\n\n060911353002, VAL DE CESSE (INTERCOMMUNALE), in 2018, absolute difference 393438 tons.\n060913100002, SAINT-REMY DE PROVENCE, in 2017, absolute difference 273990 tons.\n020819000808, GIVET, in 2019, absolute difference 110337 tons.\n060906157005, VENCE-MALVAN 2, in 2019, absolute difference 70043 tons.\n060983115001, SAINTE-MAXIME LA NARTELLE, in 2018, absolute difference 47255 tons.\n060934069001, CAZOULS LES BEZIERS, in 2019, absolute difference 41579 tons.\n028836700498, RAMBERVILLERS, in 2021, absolute difference 28403 tons.\n060930212002, REMOULINS, in 2017, absolute difference 27475 tons.\n\nFor the following we do not apply any change (large absolute difference mainly due to large production quantities) :\n\n037800501000, PARIS SEINE AVAL, in 2017, 2018, 2020 and 2021\n039407401000, PARIS SEINE-Amont in 2017, 2018 and 2019\n060913055001 Marseille in 2017, 2018 and 2020\n\n\n\nCode\n#VAL DE CESSE (INTERCOMMUNALE)\nBDERU$sludge_compost[BDERU$Year==2018 & BDERU$code_WWTP==\"060911353002\"] &lt;- NA\n#SAINT-REMY DE PROVENCE\nBDERU$sludge_compost[BDERU$Year==2017 & BDERU$code_WWTP==\"060913100002\"] &lt;- NA\n#GIVET\nBDERU$sludge_spread[BDERU$Year==2019 & BDERU$code_WWTP==\"020819000808\"] &lt;- NA\n#VENCE-MALVAN 2\nBDERU$sludge_compost[BDERU$Year==2019 & BDERU$code_WWTP==\"060906157005\"] &lt;- NA\n#SAINTE-MAXIME LA NARTELLE\nBDERU$sludge_compost[BDERU$Year==2018 & BDERU$code_WWTP==\"060983115001\"] &lt;- NA\n#CAZOULS LES BEZIERS\nBDERU$sludge_compost[BDERU$Year==2019 & BDERU$code_WWTP==\"060934069001\"] &lt;- NA\n#RAMBERVILLERS\nBDERU$sludge_spread[BDERU$Year==2021 & BDERU$code_WWTP==\"028836700498\"] &lt;- NA\n#REMOULINS\nBDERU$sludge_compost[BDERU$Year==2017 & BDERU$code_WWTP==\"060930212002\"] &lt;- NA\nBDERU$sludge_[BDERU$Year==20 & BDERU$code_WWTP==\"\"] &lt;- NA\nBDERU$sludge_[BDERU$Year==20 & BDERU$code_WWTP==\"\"] &lt;- NA\nBDERU$sludge_[BDERU$Year==20 & BDERU$code_WWTP==\"\"] &lt;- NA\nBDERU$sludge_[BDERU$Year==20 & BDERU$code_WWTP==\"\"] &lt;- NA\nBDERU$sludge_[BDERU$Year==20 & BDERU$code_WWTP==\"\"] &lt;- NA\nBDERU$sludge_[BDERU$Year==20 & BDERU$code_WWTP==\"\"] &lt;- NA\nBDERU$sludge_[BDERU$Year==20 & BDERU$code_WWTP==\"\"] &lt;- NA\nBDERU$sludge_[BDERU$Year==20 & BDERU$code_WWTP==\"\"] &lt;- NA\nBDERU$sludge_[BDERU$Year==20 & BDERU$code_WWTP==\"\"] &lt;- NA\nBDERU$sludge_[BDERU$Year==20 & BDERU$code_WWTP==\"\"] &lt;- NA\n\n\n\n\nAfter this correction we obtain the following graph. The orders of magnitude are consistent starting 2018.\n\n\nCode\n#NATIONAL SCALE DATA\n#sludge production at the national scale 2014-2020\ntemp &lt;- BDERU %&gt;% filter(basin != \"Overseas and others\") %&gt;%\n  group_by(Year) %&gt;% \n  summarise(\n    sludge_production = sum(sludge_production/10^6, na.rm = T)\n    )\n#sludge destination at the national scale\ntemp2 &lt;- BDERU %&gt;% filter(basin != \"Overseas and others\") %&gt;%\n  group_by(Year) %&gt;% \n  summarise(\n    across(\n      c(sludge_spread, sludge_incinerated, sludge_compost, sludge_landfill, \n        sludge_industrial_valorisation,sludge_to_other_WWTP), \n      ~sum(.x, na.rm=T)/10^6\n      )\n    ) %&gt;%\n  rename(\n    spread = sludge_spread, \n    incinerated = sludge_incinerated, \n    composted = sludge_compost, \n    landfilled = sludge_landfill, \n    `industrial valorisation` = sludge_industrial_valorisation,\n    `to other WWTP` = sludge_to_other_WWTP\n  ) %&gt;%\n  gather(\n    key = destination, value = tDM, spread:`to other WWTP`\n    )\ntemp2$destination &lt;- \n  factor(\n    temp2$destination, \n    levels = \n      c(\"to other WWTP\",\n        \"industrial valorisation\",\n        \"landfilled\",\n        \"incinerated\",\n        \"spread\",\n        \"composted\"\n        )\n      )\n\n#BASIN SCALES DATA\n#sludge production at the national scale 2014-2020\ntemp3 &lt;- BDERU %&gt;% filter(basin != \"Overseas and others\") %&gt;%\n  group_by(Year, basin) %&gt;% \n  summarise(\n    sludge_production = sum(sludge_production/10^6, na.rm = T)\n    )\n#sludge destination at the national scale\ntemp4 &lt;- BDERU %&gt;% filter(basin != \"Overseas and others\") %&gt;%\n  group_by(Year, basin) %&gt;% \n  summarise(\n    across(\n      c(sludge_spread, sludge_incinerated, sludge_compost, sludge_landfill, \n        sludge_industrial_valorisation,sludge_to_other_WWTP), \n      ~sum(.x, na.rm=T)/10^6\n      )\n    ) %&gt;%\n  rename(\n    spread = sludge_spread, \n    incinerated = sludge_incinerated, \n    composted = sludge_compost, \n    landfilled = sludge_landfill, \n    `industrial valorisation` = sludge_industrial_valorisation,\n    `to other WWTP` = sludge_to_other_WWTP\n  ) %&gt;%\n  gather(\n    key = destination, value = tDM, spread:`to other WWTP`\n    )\ntemp4$destination &lt;- \n  factor(\n    temp4$destination, \n    levels = \n      c(\"to other WWTP\",\n        \"industrial valorisation\",\n        \"landfilled\",\n        \"incinerated\",\n        \"spread\",\n        \"composted\"\n        )\n      )\n\ng1 &lt;- ggplot(temp2) + \n    geom_area(aes(Year, tDM, fill = destination)) + \n    geom_line(data = temp, aes(Year, sludge_production)) +\n    ylim(0, NA) +\n    xlim(2014, 2021) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", y = \"Mt od dry matter\",\n      fill = \"sludge destination\",\n      caption = \"\\n\",\n      subtitle = \"Metropolitan France\", \n      title= \"Comparison of reported produced sludge (line) and destination (colors)\"\n    )\n\ng2 &lt;- ggplot(temp4) + \n  geom_area(aes(Year, tDM, fill = destination)) + \n  geom_line(data = temp3, aes(Year, sludge_production)) +\n  ylim(0, NA) +\n  xlim(2014, 2021) +\n  theme(legend.position = \"bottom\") +\n  labs(\n    x=\"\", y = \"\",\n    caption = Source,\n    subtitle = \"by basin\", \n    title= \"\", fill=\"sludge destination\"\n  ) +\n  facet_wrap(vars(basin), scales = \"free_y\")\n\n#synthesis graph\ng1 + g2 +\n  plot_layout(guides = \"collect\", widths = c(1/4, 3/4)) & theme(legend.position = 'bottom')\n\n\n\n\n\nCode\nrm(temp, temp2, temp3, temp4, g1, g2, g)\n\n\n\n\n\nLast 4 years2019-2021 meanFinal values\n\n\nThis gives the following relative proportions for the sludge destination.\n\n\nCode\n#NATIONAL SCALE\npercent_national &lt;- BDERU %&gt;% filter(basin != \"Overseas and others\") %&gt;%\n  filter(Year&gt;2017) %&gt;%\n  select(\n    Year, \n    sludge_spread, sludge_incinerated, \n    sludge_compost, sludge_landfill, \n    sludge_industrial_valorisation,\n    sludge_to_other_WWTP\n    ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      across(\n        c(\n          sludge_spread, sludge_incinerated, \n          sludge_compost, sludge_landfill, \n          sludge_industrial_valorisation,\n          sludge_to_other_WWTP\n        ),~round(sum(.x, na.rm=T)/10^6, 2)\n      )\n    ) %&gt;%\n  mutate(\n    sum_destination = \n      sludge_spread + sludge_incinerated +\n      sludge_compost + sludge_landfill +\n      sludge_industrial_valorisation +\n      sludge_to_other_WWTP,\n    across(\n      c(\n        sludge_spread, sludge_incinerated, \n        sludge_compost, sludge_landfill, \n        sludge_industrial_valorisation,\n        sludge_to_other_WWTP\n        ),~round(.x/sum_destination, 2), .names = \"perc_{.col}\"\n      )\n  )\npercent_national &lt;- percent_national %&gt;%\n  select(\n    -c(\n      sludge_spread, sludge_incinerated, \n      sludge_compost, sludge_landfill, \n      sludge_industrial_valorisation,\n      sludge_to_other_WWTP\n      )\n  ) %&gt;%\n  rename(\n    spread = perc_sludge_spread, \n    incinerated = perc_sludge_incinerated, \n    composted = perc_sludge_compost, \n    landfilled = perc_sludge_landfill, \n    `industrial valorisation` = perc_sludge_industrial_valorisation,\n    `to other WWTP` = perc_sludge_to_other_WWTP\n  ) %&gt;%\n  gather(\n    destination, percent, spread:`to other WWTP`\n    )\npercent_national$destination &lt;- \n  factor(\n    percent_national$destination, \n    levels = \n      c(\"to other WWTP\",\n        \"industrial valorisation\",\n        \"landfilled\",\n        \"incinerated\",\n        \"spread\",\n        \"composted\"\n        )\n      )\n\n#BASIN SCALE\npercent_basins &lt;- BDERU %&gt;% filter(basin != \"Overseas and others\") %&gt;%\n  filter(Year&gt;2017) %&gt;%\n  select(\n    Year, basin, sludge_spread, sludge_incinerated, sludge_compost, \n    sludge_landfill, sludge_industrial_valorisation, sludge_to_other_WWTP\n    ) %&gt;%\n  group_by(Year, basin) %&gt;%\n  summarise(\n    across(\n      c(\n        sludge_spread, sludge_incinerated, \n        sludge_compost, sludge_landfill, \n        sludge_industrial_valorisation,\n        sludge_to_other_WWTP\n        ),~round(sum(.x, na.rm=T)/10^6, 2)\n      )\n    ) %&gt;%\n  mutate(\n    sum_destination = \n      sludge_spread + sludge_incinerated +\n      sludge_compost + sludge_landfill +\n      sludge_industrial_valorisation +\n      sludge_to_other_WWTP,\n    across(\n      c(\n        sludge_spread, sludge_incinerated, \n        sludge_compost, sludge_landfill, \n        sludge_industrial_valorisation,\n        sludge_to_other_WWTP\n        ),~round(.x/sum_destination, 2), .names = \"perc_{.col}\"\n      )\n  )\npercent_basins &lt;- percent_basins %&gt;%\n  select(\n    -c(\n      sludge_spread, sludge_incinerated, \n      sludge_compost, sludge_landfill, \n      sludge_industrial_valorisation,\n      sludge_to_other_WWTP\n      )\n  ) %&gt;%\n  rename(\n    spread = perc_sludge_spread, \n    incinerated = perc_sludge_incinerated, \n    composted = perc_sludge_compost, \n    landfilled = perc_sludge_landfill, \n    `industrial valorisation` = perc_sludge_industrial_valorisation,\n    `to other WWTP` = perc_sludge_to_other_WWTP\n  ) %&gt;%\n  gather(\n    destination, percent, spread:`to other WWTP`\n    )\npercent_basins$destination &lt;- \n  factor(\n    percent_basins$destination, \n    levels = \n      c(\"to other WWTP\",\n        \"industrial valorisation\",\n        \"landfilled\",\n        \"incinerated\",\n        \"spread\",\n        \"composted\"\n        )\n      )\n\n\nggplot(percent_national) +\n  geom_col(aes(Year, percent*100, fill=destination)) +\n  labs(\n    x=\"\", y=\"%\", \n    caption = Source,\n    title = \"Destination of produced sludge in France\",\n    subtitle = \"reported, not nessarily actual ; see as order of magnitude\"\n  )\n\n\n\n\n\nCode\nggplot(percent_basins) +\n  geom_col(aes(Year, percent*100, fill=destination)) +\n  labs(\n    x=\"\", y=\"%\", \n    caption = Source,\n    title = \"Destination of produced sludge in France\",\n    subtitle = \"reported, not nessarily actual ; see as order of magnitude\"\n  ) +\n  facet_wrap(vars(basin))\n\n\n\n\n\n\n\nwe use the mean of 2019-2021 to determine our final rate\n\n\nCode\npercent_national &lt;- percent_national %&gt;%\n  filter(Year&gt;2018) %&gt;%\n  group_by(destination) %&gt;%\n  summarise(percent = round(mean(percent), 2)) %&gt;%\n  mutate(\n    recycled = case_when(\n      destination %in% c(\"composted\", \"spread\") ~ \"recycled\",\n      T ~ \"not recyled\"\n      ),\n    Year = \"2019-2021 mean\"\n    ) \n\npercent_basins &lt;- percent_basins %&gt;%\n  filter(Year&gt;2018) %&gt;%\n  group_by(basin, destination) %&gt;%\n  summarise(percent = round(mean(percent), 2)) %&gt;%\n  mutate(\n    recycled = case_when(\n      destination %in% c(\"composted\", \"spread\") ~ \"recycled\",\n      T ~ \"not recyled\"\n      ),\n    Year = \"2019-2021 mean\"\n    ) \n\nplot_grid(\n  ggplot(percent_national) + \n    geom_col(aes(recycled, percent*100, fill=destination)) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", y=\"%\",\n      title = \"reported destination of WWTP sludge, 2019-2021\",\n      subtitle = \"Metropolitan France\",\n      caption = \"\\n\"\n    ),\n  ggplot(percent_basins) + \n    geom_col(aes(recycled, percent*100, fill=destination)) +\n    labs(\n      x=\"\", y=\"\",\n      title = \"\",\n      subtitle = \"by basin\",\n      caption = Source\n    ) +\n    facet_wrap(vars(basin)),\n  rel_widths = c(1/4, 3/4)\n)\n\n\n\n\n\n\n\nWe save these final values\n\n\nCode\ntemp &lt;- percent_national %&gt;%\n  mutate(basin = \"Metropolitan France\") %&gt;%\n  select(basin, destination, percent) %&gt;%\n  spread(destination, percent)\ntemp2 &lt;- percent_basins %&gt;%\n  select(basin = basin, destination, percent) %&gt;%\n  spread(destination, percent)\ntemp &lt;- bind_rows(\n  temp, temp2\n)\n\nknitr::kable(\n  temp %&gt;%mutate_if(is.numeric, function(x){x * 100}), \n  caption =\"Destination of sludge (%), in metropolitan France and by basin\"\n  ) %&gt;%\n  kableExtra::kable_styling(full_width = F)\n\n\n\nDestination of sludge (%), in metropolitan France and by basin\n\n\nbasin\nto other WWTP\nindustrial valorisation\nlandfilled\nincinerated\nspread\ncomposted\n\n\n\n\nMetropolitan France\n2\n1\n1\n18\n34\n43\n\n\nArtois-Picardie\n0\n0\n0\n4\n65\n31\n\n\nRhin-Meuse\n0\n0\n0\n17\n42\n41\n\n\nSeine-Normandie\n1\n4\n0\n29\n34\n32\n\n\nLoire-Bretagne\n3\n0\n0\n8\n54\n35\n\n\nAdour-Garonne\n0\n0\n0\n11\n15\n74\n\n\nRhône-Méditerranée\n2\n0\n0\n26\n14\n57\n\n\n\n\n\n\n\nCode\npath_output &lt;- \"output_data/sludge_destination/\"\nf_save_csv_files(\n  temp,\n  path_output,\n  \"sludge_destination.csv\"\n)\n\n\n\n\n\n\n\n\n\n\nSensitive Areas\nIn the data base, there is information on whether the WWTP is in a N or P sensitive area or not. For more info on N and P sensitive areas, see the page First Synthesis -&gt; Sensitive area.\nThere are some isolated WWTP with a seemingly erroneous “non sensitive” reporting. This usually concerns very small facilities (&lt; 200 population equivalent).\n\n\nCode\n#loading data to draw French water agencies basins\nbasins &lt;- sf::st_read(\"source_data/maps/water_agencies/simplified_CircAdminBassin2021/CircAdminBassin2021.shp\")\n\nbasins_metropole &lt;- basins %&gt;%\n  filter(\n    NumCircAdm %in% c(\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"12\")\n  ) %&gt;%\n  select(\n    basin_name = NomCircAdm, \n    basin_num = NumCircAdm\n  ) %&gt;%\n  mutate(\n    basin_name = case_when(\n      basin_name == \"ADOUR-GARONNE\" ~ \"Adour-Garonne\",\n      basin_name == \"ARTOIS-PICARDIE\" ~ \"Artois-Picardie\",\n      basin_name == \"LOIRE-BRETAGNE\" ~ \"Loire-Bretagne\",\n      basin_name == \"RHIN-MEUSE\" ~ \"Rhin-Meuse\",\n      basin_name == \"RHONE-MEDITERRANEE\" ~ \"Rhone-Méditerranée\",\n      basin_name == \"SEINE-NORMANDIE\" ~ \"Seine-Normandie\",\n      basin_name == \"CORSE\" ~ \"Rhone-Méditerranée\"\n    )\n  )\ndraw_map_sensitive &lt;- \n  function(map_sf, dataset){\n  p &lt;- ggplot(map_sf) + \n    geom_point(data = dataset, aes(long_STEU, lat_STEU, color=sensitivity), size=0.3) +\n    geom_sf(fill = NA, color = \"black\", size = 0.3, alpha=.8) + \n    coord_sf(datum = NA, expand = FALSE) + #remove coordinates\n    theme(panel.background = element_blank()) +\n    labs(\n      x=\"\", y=\"\",\n    )\n  return(p)\n}\n\n\n#P sensitive WWTPs graph\np1 &lt;- draw_map_sensitive(\n  basins_metropole, \n  BDERU %&gt;% \n    filter(Year==2020, basin !=\"Overseas and others\") %&gt;%\n    mutate(\n      sensitivity = \n        case_when(\n          sensitivity %in% c(\"Only P sensible\", \"N and P sensible\") ~ \"Yes\",\n          T ~ \"No\"\n        )\n    )\n  ) +\n  labs(\n    title = \"Sensitivity classification of France WWTP\",\n    subtitle = \"P sensitive\",\n    caption = \"\\n\",\n    color = \"Sensitive\"\n  ) +\n  theme(legend.position = \"right\")  + \n  #biggest points on the legend\n  guides(color = guide_legend(override.aes = list(size=5)))\n\n#N sensitive WWTPs graph\np2 &lt;- draw_map_sensitive(\n  basins_metropole, \n  BDERU %&gt;% \n    filter(Year==2020, basin !=\"Overseas and others\") %&gt;%\n    mutate(\n      sensitivity = \n        case_when(\n          sensitivity %in% c(\"N and P sensible\") ~ \"Yes\",\n          T ~ \"No\"\n        )\n    )\n  ) +\n  theme(legend.position = \"none\") +\n  labs(\n    title = \"\",\n    subtitle = \"N sensitive\",\n    caption = Source\n  )\n\np1 + p2\n\n\n\n\n\n\n\nExport data\nSave the data at summarized at the basins and metropolitan scales\n\n\nCode\n#info summarized at the basin scales\nBDERU_basin &lt;- BDERU %&gt;% \n  filter(basin != \"Overseas and others\") %&gt;%\n  group_by(Year, basin) %&gt;%\n  summarise(\n    across(\n      c(\n        sludge_production, sludge_spread, sludge_compost, sludge_landfill, sludge_incinerated, sludge_to_other_WWTP, sludge_industrial_valorisation,\n        capacity\n      ), ~ sum(.x, na.rm = T)/10^6 #convert in Mt\n    ),\n    nb_WWTP= n()\n  )\n\n#summarised at the national metropolitan scale\ntemp &lt;- BDERU %&gt;% \n  filter(basin != \"Overseas and others\") %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    across(\n      c(\n        sludge_production, sludge_spread, sludge_compost, sludge_landfill, sludge_incinerated, sludge_to_other_WWTP, sludge_industrial_valorisation,\n        capacity\n      ), ~ sum(.x, na.rm = T)/10^6 #convert in Mt\n    ),\n    nb_WWTP= n()\n  ) %&gt;%\n  mutate(\n    basin=\"Metropolitan France\"\n  )\n\n#merge basins and national summarized infos\nBDERU_basin &lt;- bind_rows(BDERU_basin, temp)\n\n#remove sludge data before 2015\nBDERU_basin$sludge_production[BDERU_basin$Year&lt;2015] &lt;- NA\nBDERU_basin$sludge_spread[BDERU_basin$Year&lt;2015] &lt;- NA\nBDERU_basin$sludge_compost[BDERU_basin$Year&lt;2015] &lt;- NA\nBDERU_basin$sludge_landfill[BDERU_basin$Year&lt;2015] &lt;- NA\nBDERU_basin$sludge_incinerated[BDERU_basin$Year&lt;2015] &lt;- NA\nBDERU_basin$sludge_to_other_WWTP[BDERU_basin$Year&lt;2015] &lt;- NA\nBDERU_basin$sludge_industrial_valorisation[BDERU_basin$Year&lt;2015] &lt;- NA\n\n#save data\nf_save_csv_files(\n  BDERU_basin,\n  \"output_data/basins/\",\n  \"basin_sanitation_portal.csv\"\n)\n\n\nSame but also including capacities categories.\n\n\nCode\n#info summarized at the basin x capacity category scales\nBDERU_PE_basin &lt;- BDERU %&gt;% \n  filter(basin != \"Overseas and others\") %&gt;%\n  group_by(Year, basin, PE_bin) %&gt;%\n  summarise(\n    across(\n      c(\n        sludge_production, sludge_spread, sludge_compost, sludge_landfill, sludge_incinerated, sludge_to_other_WWTP, sludge_industrial_valorisation,\n        capacity\n      ), ~ sum(.x, na.rm = T)/10^6 #convert in Mt\n    ),\n    nb_WWTP= n()\n  ) \n\n#summarised at the national metropolitan x capacity category scale\ntemp &lt;- BDERU %&gt;% \n  filter(basin != \"Overseas and others\") %&gt;%\n  group_by(Year, PE_bin) %&gt;%\n  summarise(\n    across(\n      c(\n        sludge_production, sludge_spread, sludge_compost, sludge_landfill, sludge_incinerated, sludge_to_other_WWTP, sludge_industrial_valorisation,\n        capacity\n      ), ~ sum(.x, na.rm = T)/10^6 #convert in Mt\n    ),\n    nb_WWTP= n()\n  ) %&gt;%\n  mutate(\n    basin=\"Metropolitan France\"\n  )\n\n#merge basins and national summarized infos\nBDERU_PE_basin &lt;- bind_rows(BDERU_PE_basin, temp)\n\n#remove sludge data before 2015\nBDERU_PE_basin$sludge_production[BDERU_PE_basin$Year&lt;2015] &lt;- NA\nBDERU_PE_basin$sludge_spread[BDERU_PE_basin$Year&lt;2015] &lt;- NA\nBDERU_PE_basin$sludge_compost[BDERU_PE_basin$Year&lt;2015] &lt;- NA\nBDERU_PE_basin$sludge_landfill[BDERU_PE_basin$Year&lt;2015] &lt;- NA\nBDERU_PE_basin$sludge_incinerated[BDERU_PE_basin$Year&lt;2015] &lt;- NA\nBDERU_PE_basin$sludge_to_other_WWTP[BDERU_PE_basin$Year&lt;2015] &lt;- NA\nBDERU_PE_basin$sludge_industrial_valorisation[BDERU_PE_basin$Year&lt;2015] &lt;- NA\n\n#save data\nf_save_csv_files(\n  BDERU_PE_basin, \n  \"output_data/basins_PE/\",\n  \"basin_PE_sanitation_portal.csv\"\n)\n\n\nSave individual WWTP data on capacity, sludge production and many more\n\n\nCode\ntemp &lt;- BDERU %&gt;%\n  select(\n    Year, code_WWTP, name_WWTP, basin, capacity, PE_bin, \n    sludge_production, sludge_spread, sludge_compost, sludge_landfill, sludge_incinerated, sludge_industrial_valorisation, sludge_to_other_WWTP,\n    N_sens, P_sens, sensitivity,\n    flow_m3_d, percent_direct_discharge_dry_weather, \n    treatment, sludge_treatment, bio_treatment, N_treatment, P_treatment, \n    lat_STEU, long_STEU, lat_discharge, long_discharge, \n    INSEE_dep, INSEE_com, \n  )\n\nf_save_csv_files(\n  temp, \n  \"output_data/all_WWTP/\",\n  \"all_WWTP_sanitation_portal.csv\"\n)\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "01_artois_picardie.html",
    "href": "01_artois_picardie.html",
    "title": "Artois-Picardie",
    "section": "",
    "text": "CAREFUL: for now, for Artois-Picardie basin, we do not have NGL outflow after 2008. We extrapolate at the basin scale from NO out and a constant ratio. We will update with better data in the future.\n\n\nCode\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n#loading additional relevant packages\nlibrary(cowplot) #for plot_grid()\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(plot.title = element_text(face=\"bold\"))\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\nSource &lt;- \"Agence de l'Eau Artois-Picardie\\nComputation by Thomas Starck\"\n\npath_source &lt;- \"source_data/01_artois_picardie/\"\n\nYear_analysis &lt;- 2018\n\n# Load the function file\nsource(\"functions.R\")\n\n\n\nData quality and description\n\nSource and DescriptionBasin descriptionLoading the dataUnderstand the data\n\n\nData source can be downloaded on Artois-Picardie Water Agency website, here (in Données sur les usages de l’eau -&gt; Assainissement). This gives the data for 1992-2018\nIn the excel file, the table STATIONS D’EPURATION URBAINE describes the waste water treatment plant characteristics: capacity in population equivalent, N and P treatment, treatment type, nominal NK and P inflow….\nThe table PERFORMANCES also reports the plant capacity and adds incoming and outgoing reduced and oxidized nitrogen (NR and NO) flows and phosphorus (P) flows. It also reports DBO5, DCO and MES. Starting in 2008, NO is not reported anymore. DBO5 and DCO are only reported starting 2008.\n\n\nInformation about the basin ca be found in the “Etat des lieux 2019” (status report).\nThere are 4.7 million inhabitants in the basin. 720 000 inhabitants are not connected to sewers and use Individual Autonomous Systems (IAS).\nInformation about the basin can also be found in the “Guide de l’eau” (water guide), here and here.\n\n\nWe load the PERFORMANCES and STATIONS D’EPURATION URBAINE sheets and merge them. We compute the yields for each WWTP.\n\n\nCode\n#main file\nfile_artois_picardie &lt;- readxl::read_excel(paste(path_source, \"stations_depuration_urbaine.xls\", sep=\"\"), sheet = \"PERFORMANCES\")\n\n#select and rename columns of interest\nN_P_artois_picardie &lt;- file_artois_picardie %&gt;%\n  select(\n    code_WWTP = `Code SANDRE station`,\n    name_WWTP = `Nom de la station d'épuration urbaine`,\n    Year = `Année d'activité`,\n    capacity = `Capacité de la station d'épuration urbaine (en Eh)`,\n    #MES\n    MES_in_reported = `Assiette entrante en MeS (en kg/j)`,\n    MES_out = `Assiette sortante en MeS (en kg/j)`,\n    MES_removed = `Assiette enlevée en MeS (en kg/j)`,\n    #DBO5\n    DBO5_in_reported = `Assiette entrante en DBO5 (en kg/j)`,\n    DBO5_out = `Assiette sortante en DBO5 (en kg/j)`,\n    DBO5_removed = `Assiette enlevée en DBO5 (en kg/j)`,\n    #DCO\n    DCO_in_reported = `Assiette entrante en DCO (en kg/j)`,\n    DCO_out = `Assiette sortante en DCO (en kg/j)`,\n    DCO_removed = `Assiette enlevée en DCO (en kg/j)`,\n    #Pt\n    Pt_in_reported = `Assiette entrante en P (en kg/j)`,\n    Pt_out = `Assiette sortante en P (en kg/j)`,\n    Pt_removed = `Assiette enlevée en P (en kg/j)`,\n    #NTK\n    NTK_in_reported = `Assiette entrante en NR (en kg/j)`,\n    NTK_out = `Assiette sortante en NR (en kg/j)`,\n    NTK_removed = `Assiette enlevée en NR (en kg/j)`,\n    #NO\n    NO_in_reported = `Assiette entrante en NO (en kg/j)`,\n    NO_out = `Assiette sortante en NO (en kg/j)`,\n    NO_removed = `Assiette enlevée en NO (en kg/j)`\n  )\n\n# Some reported flows are negative or null. We replace them with empty values.\n#Pt\nN_P_artois_picardie$Pt_in_reported[N_P_artois_picardie$Pt_in_reported &lt;= 0] &lt;- NA\nN_P_artois_picardie$Pt_out[N_P_artois_picardie$Pt_out &lt;= 0] &lt;- NA\nN_P_artois_picardie$Pt_removed[N_P_artois_picardie$Pt_removed &lt;= 0] &lt;- NA\n#DBO5\nN_P_artois_picardie$DBO5_in_reported[N_P_artois_picardie$DBO5_in_reported &lt;= 0] &lt;- NA\nN_P_artois_picardie$DBO5_out[N_P_artois_picardie$DBO5_out &lt;= 0] &lt;- NA\nN_P_artois_picardie$DBO5_removed[N_P_artois_picardie$DBO5_removed &lt;= 0] &lt;- NA\n#DCO\nN_P_artois_picardie$DCO_in_reported[N_P_artois_picardie$DCO_in_reported &lt;= 0] &lt;- NA\nN_P_artois_picardie$DCO_out[N_P_artois_picardie$DCO_out &lt;= 0] &lt;- NA\nN_P_artois_picardie$DCO_removed[N_P_artois_picardie$DCO_removed &lt;= 0] &lt;- NA\n#MES\nN_P_artois_picardie$MES_in_reported[N_P_artois_picardie$MES_in_reported &lt;= 0] &lt;- NA\nN_P_artois_picardie$MES_out[N_P_artois_picardie$MES_out &lt;= 0] &lt;- NA\nN_P_artois_picardie$MES_removed[N_P_artois_picardie$MES_removed &lt;= 0] &lt;- NA\n#NTK\nN_P_artois_picardie$NTK_in_reported[N_P_artois_picardie$NTK_in_reported &lt;= 0] &lt;- NA\nN_P_artois_picardie$NTK_out[N_P_artois_picardie$NTK_out &lt;= 0] &lt;- NA\nN_P_artois_picardie$NTK_removed[N_P_artois_picardie$NTK_removed &lt;= 0] &lt;- NA\n#NO\nN_P_artois_picardie$NO_in_reported[N_P_artois_picardie$NO_in_reported &lt;= 0] &lt;- NA\nN_P_artois_picardie$NO_out[N_P_artois_picardie$NO_out &lt;= 0] &lt;- NA\n#for NO we cannot apply it to removed flow car NO can be created through nitrification, thus a &lt;0 \"removed\" flow is possible\n\n#estimation of NGL ; incoming nutrient flows ; nutrient yields\nN_P_artois_picardie &lt;- N_P_artois_picardie %&gt;%\n  rowwise() %&gt;% #rowise to be able to remove empty values\n  mutate(\n    #NGL\n    NGL_in_reported = NTK_in_reported, # we approximate NGL_in by NTK_in\n    #we compute NGL outflow only if both NTK and NO are reported\n    NGL_out = sum(NO_out + NTK_out, na.rm=!((is.na(NTK_out)|is.na(NO_out)))),\n    #computed inflow (not possible to compute NO_in because NO output \"created\" during treatment)\n    Pt_in = Pt_out + Pt_removed,\n    NTK_in = NTK_out + NTK_removed,\n    NGL_in = NTK_in,\n    DCO_in = DCO_out + DCO_removed,\n    DBO5_in = DBO5_out + DBO5_removed,\n    MES_in = MES_out + MES_removed,\n    #WWTP yield\n    Pt_yield = (1-Pt_out/Pt_in)*100,\n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    DCO_yield = (1-DCO_out/DCO_in)*100,\n    DBO5_yield = (1-DBO5_out/DBO5_in)*100,\n    MES_yield = (1-MES_out/MES_in)*100\n  )\n  \n#Careful : starting 2008, NO is not reported anymore\n\n#Loading the infos related to WWTP characteristics\nfile_WWTP &lt;- readxl::read_excel(paste(path_source, \"stations_depuration_urbaine.xls\", sep=\"\"), sheet = \"STATIONS D'EPURATION URBAINE\")\nWWTP &lt;- file_WWTP %&gt;% \n  select(\n    code_WWTP = `Code SANDRE station`,\n    name_commune = `Nom commune`,\n    treatment_type = `Type de station`,\n    N_treatment = `Traitement azote ?`,\n    P_treatment = `Traitement phosphore ?`,\n    capacity_bis = `Capacité STEU (en EH)`,\n    NTK_nominal_flow = `Flux nominal journalier en NK (en kg/j)`,\n    P_nominal_flow = `Flux nominal journalier en P (en kg/j)`,\n    INSEE_COM = `Code INSEE commune`,\n    lat_WWTP = `Lambert93 X`,\n    long_WWTP = `Lambert93 Y`\n  )\n\n#merging the 2 files\nN_P_artois_picardie &lt;- left_join(\n  N_P_artois_picardie, WWTP, by = \"code_WWTP\"\n)\n\n#1991 is poorly reported, we do not keep it in the analysis\nN_P_artois_picardie &lt;- N_P_artois_picardie %&gt;%\n  filter(Year&gt;1991)\n\n#no double reporting (check that the file is empty) =&gt; ok\nN_P_artois_picardie %&gt;%\n  select(Year, code_WWTP) %&gt;%\n  count(Year, code_WWTP) %&gt;%\n  filter(n !=1)\n\n# check there is no unreported capacity : OK (returns empty table)\nN_P_artois_picardie %&gt;% filter(is.na(capacity)|capacity&lt;=0)\n\n\nWe create the capacity categories in terms of population equivalent.\n\n\nCode\n#function to create capacity categories\nf_PE_bin_categories &lt;- function(dataset){\n  #Creating size categories\n  dataset &lt;- \n    dataset %&gt;%\n    mutate(\n      PE_bin = case_when(\n        capacity &lt; 200 ~ \"0 - 200 PE\",\n        (capacity &gt;= 200) & (capacity &lt;2000) ~ \"200 - 2 000 PE\",\n        (capacity &gt;= 2000) & (capacity &lt;10000) ~ \"2 000 - 10 000 PE\",\n        (capacity &gt;= 10000) & (capacity &lt;100000) ~ \"10 000 - 100 000 PE\",\n        capacity &gt;= 100000 ~ \"&gt; 100 000 PE\"\n      )\n    )\n  \n  #reorders treatment by their share of total capacity\n  dataset$PE_bin &lt;- \n    factor(\n      dataset$PE_bin, \n      levels = \n        c(\"0 - 200 PE\", \n          \"200 - 2 000 PE\", \n          \"2 000 - 10 000 PE\",\n          \"10 000 - 100 000 PE\", \n          \"&gt; 100 000 PE\"\n          )\n        )\n  return(dataset)\n}\nN_P_artois_picardie &lt;- f_PE_bin_categories(N_P_artois_picardie)\n\n\nWe create the file with aggregated flows at the basin scale, and also by capacity categories.\n\n\nCode\nf_basin_flows &lt;- function(dataset){\n  basin &lt;- dataset %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      across(\n        c(\n          NGL_in, NTK_in, Pt_in, DBO5_in, DCO_in, MES_in,\n          NGL_out, NTK_out, Pt_out, DBO5_out, DCO_out, MES_out, NO_out,\n          NGL_in_reported, NTK_in_reported, Pt_in_reported, DBO5_in_reported, DCO_in_reported, MES_in_reported, NO_in_reported,\n          NTK_removed, Pt_removed, DBO5_removed, DCO_removed, MES_removed, NO_removed\n        ),\n        ~signif(sum(.x, na.rm = T)*365/10^6, digits=3)\n      ),\n    #nb of waste water treatment plant\n    nb_WWTP = n(),\n    #capacity converted in million Population Equivalent\n    capacity = signif(sum(capacity, na.rm = T)/10^6, digits=3),\n    )\n  return(basin)\n}\nbasin_N_P_artois_picardie &lt;- f_basin_flows(N_P_artois_picardie)\n\nf_basin_PE_flows &lt;- function(dataset){\n  basin &lt;- dataset %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      across(\n        c(\n          NGL_in, NTK_in, Pt_in, DBO5_in, DCO_in, MES_in,\n          NGL_out, NTK_out, Pt_out, DBO5_out, DCO_out, MES_out, NO_out,\n          NGL_in_reported, NTK_in_reported, Pt_in_reported, DBO5_in_reported, DCO_in_reported, MES_in_reported, NO_in_reported,\n          NTK_removed, Pt_removed, DBO5_removed, DCO_removed, MES_removed, NO_removed\n        ),\n        ~signif(sum(.x, na.rm = T)*365/10^6, digits=3)\n      ),\n    #nb of waste water treatment plant\n    nb_WWTP = n(),\n    #capacity converted in million Population Equivalent\n    capacity = signif(sum(capacity, na.rm = T)/10^6, digits=3),\n    )\n  return(basin)\n}\nbasin_PE_N_P_artois_picardie &lt;- f_basin_PE_flows(N_P_artois_picardie)\n\n\nWe compute the nutrient ratios at the basin scale, and also by capacity categories.\n\n\nCode\n#have to do this in case 1 nutrient is more reported than the other, which would create a bia if we took the ratio of the already aggregated flows\nf_nutrient_ratio_basin &lt;- function(basin, dataset, nutrient1, nutrient2){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrient1))==F & is.na(!!as.symbol(nutrient2))==F\n      ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      nutrient_1 = sum(!!as.symbol(nutrient1), na.rm=T),\n      nutrient_2 = sum(!!as.symbol(nutrient2), na.rm=T),\n      ratio = signif(nutrient_1/nutrient_2, digits=3)\n    ) %&gt;%\n    select(-nutrient_1, -nutrient_2)\n  basin &lt;- left_join(\n    basin, temp, by=\"Year\"\n  )\n  return(basin)\n}\n\nf_nutrient_ratio_basin_PE &lt;- function(basin_PE, dataset, nutrient1, nutrient2){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrient1))==F & is.na(!!as.symbol(nutrient2))==F\n      ) %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      nutrient_1 = sum(!!as.symbol(nutrient1), na.rm=T),\n      nutrient_2 = sum(!!as.symbol(nutrient2), na.rm=T),\n      ratio = signif(nutrient_1/nutrient_2, digits=3)\n    ) %&gt;%\n    select(-nutrient_1, -nutrient_2)\n  basin_PE &lt;- left_join(\n    basin_PE, temp, by=c(\"Year\", \"PE_bin\")\n  )\n  return(basin_PE)\n}\n\nf_all_nutrient_ratios_basin &lt;- function(basin, dataset){\n  basin &lt;- basin %&gt;%\n    \n    #nutrient ratios\n    #N_P in\n    f_nutrient_ratio_basin(dataset, \"NGL_in\", \"Pt_in\") %&gt;%\n    rename(N_P_ratio_in = ratio) %&gt;%\n    #N_P out\n    f_nutrient_ratio_basin(dataset, \"NGL_out\", \"Pt_out\") %&gt;%\n    rename(N_P_ratio_out = ratio) %&gt;%\n    #DCO_DBO5 in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"DBO5_in\") %&gt;%\n    rename(DCO_DBO5_ratio_in = ratio) %&gt;%\n    #DCO_DBO5 out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"DBO5_out\") %&gt;%\n    rename(DCO_DBO5_ratio_out = ratio) %&gt;%\n    #DBO5_N in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"NGL_in\") %&gt;%\n    rename(DBO5_N_ratio_in = ratio) %&gt;%\n    #DBO5_N out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"NGL_out\") %&gt;%\n    rename(DBO5_N_ratio_out = ratio) %&gt;%\n    #DBO5_P in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"Pt_in\") %&gt;%\n    rename(DBO5_P_ratio_in = ratio) %&gt;%\n    #DBO5_P out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"Pt_out\") %&gt;%\n    rename(DBO5_P_ratio_out = ratio) %&gt;%\n    #DCO_N in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"NGL_in\") %&gt;%\n    rename(DCO_N_ratio_in = ratio) %&gt;%\n    #DCO_N out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"NGL_out\") %&gt;%\n    rename(DCO_N_ratio_out = ratio) %&gt;%\n    #DCO_P in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"Pt_in\") %&gt;%\n    rename(DCO_P_ratio_in = ratio) %&gt;%\n    #DCO_P out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"Pt_out\") %&gt;%\n    rename(DCO_P_ratio_out = ratio) %&gt;%\n    \n    #capacity ratios\n    #Pt_PE_in\n    f_nutrient_ratio_basin(dataset, \"Pt_in\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_in = ratio) %&gt;%\n    #Pt_PE_out\n    f_nutrient_ratio_basin(dataset, \"Pt_out\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_out = ratio) %&gt;%\n    #NGL_PE_in\n    f_nutrient_ratio_basin(dataset, \"NGL_in\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_in = ratio) %&gt;%\n    #NGL_PE_out\n    f_nutrient_ratio_basin(dataset, \"NGL_out\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_out = ratio) %&gt;%\n    #DBO5_PE_in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_in = ratio) %&gt;%\n    #DBO5_PE_out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_out = ratio) %&gt;%\n    #DCO_PE_in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_in = ratio) %&gt;%\n    #DCO_PE_out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_out = ratio) %&gt;%\n    #MES_PE_in\n    f_nutrient_ratio_basin(dataset, \"MES_in\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_in = ratio) %&gt;%\n    #MES_PE_out\n    f_nutrient_ratio_basin(dataset, \"MES_out\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_out = ratio) %&gt;%\n    \n    #convert from kg per PE per day to g per PE per day\n    mutate(\n      across(\n        c(\n          Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, DBO5_PE_ratio_in, DBO5_PE_ratio_out,\n          DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n        ), ~.x*1000 \n      )\n    )\n  return(basin)\n}\n\nf_all_nutrient_ratios_basin_PE &lt;- function(basin_PE, dataset){\n  basin_PE &lt;- basin_PE %&gt;%\n    \n    #nutrient ratios\n    #N_P in\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_in\", \"Pt_in\") %&gt;%\n    rename(N_P_ratio_in = ratio) %&gt;%\n    #N_P out\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_out\", \"Pt_out\") %&gt;%\n    rename(N_P_ratio_out = ratio) %&gt;%\n    #DCO_DBO5 in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"DBO5_in\") %&gt;%\n    rename(DCO_DBO5_ratio_in = ratio) %&gt;%\n    #DCO_DBO5 out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"DBO5_out\") %&gt;%\n    rename(DCO_DBO5_ratio_out = ratio) %&gt;%\n    #DBO5_N in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"NGL_in\") %&gt;%\n    rename(DBO5_N_ratio_in = ratio) %&gt;%\n    #DBO5_N out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"NGL_out\") %&gt;%\n    rename(DBO5_N_ratio_out = ratio) %&gt;%\n    #DBO5_P in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"Pt_in\") %&gt;%\n    rename(DBO5_P_ratio_in = ratio) %&gt;%\n    #DBO5_P out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"Pt_out\") %&gt;%\n    rename(DBO5_P_ratio_out = ratio) %&gt;%\n    #DCO_N in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"NGL_in\") %&gt;%\n    rename(DCO_N_ratio_in = ratio) %&gt;%\n    #DCO_N out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"NGL_out\") %&gt;%\n    rename(DCO_N_ratio_out = ratio) %&gt;%\n    #DCO_P in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"Pt_in\") %&gt;%\n    rename(DCO_P_ratio_in = ratio) %&gt;%\n    #DCO_P out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"Pt_out\") %&gt;%\n    rename(DCO_P_ratio_out = ratio) %&gt;%\n    \n    #capacity ratios\n    #Pt_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"Pt_in\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_in = ratio) %&gt;%\n    #Pt_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"Pt_out\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_out = ratio) %&gt;%\n    #NGL_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_in\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_in = ratio) %&gt;%\n    #NGL_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_out\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_out = ratio) %&gt;%\n    #DBO5_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_in = ratio) %&gt;%\n    #DBO5_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_out = ratio) %&gt;%\n    #DCO_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_in = ratio) %&gt;%\n    #DCO_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_out = ratio) %&gt;%\n    #MES_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"MES_in\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_in = ratio) %&gt;%\n    #MES_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"MES_out\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_out = ratio) %&gt;%\n    \n    #convert from kg per PE per day to g per PE per day\n    mutate(\n      across(\n        c(\n          Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, DBO5_PE_ratio_in, DBO5_PE_ratio_out,\n          DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n        ), ~.x*1000 \n      )\n    )\n  return(basin_PE)\n}\n\nbasin_N_P_artois_picardie &lt;- f_all_nutrient_ratios_basin(basin_N_P_artois_picardie, N_P_artois_picardie)\n\nbasin_PE_N_P_artois_picardie &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_artois_picardie, N_P_artois_picardie)\n\n\nWe compute the yields at the basin scale, and also by capacity categories.\n\n\nCode\n#have to do this in case inflow or outflow is more reported than the other one, which would create a bias if we took the ratio of the already aggregated flows\nf_yield_basin &lt;- function(basin, dataset, nutrientIN, nutrientOUT){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrientIN))==F & is.na(!!as.symbol(nutrientOUT))==F\n      ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      nutrient_in = sum(!!as.symbol(nutrientIN), na.rm=T),\n      nutrient_out = sum(!!as.symbol(nutrientOUT), na.rm=T),\n      yield = round((1-nutrient_out/nutrient_in)*100, digits = 0)\n    ) %&gt;%\n    select(-nutrient_in, -nutrient_out)\n  basin &lt;- left_join(\n    basin, temp, by=\"Year\"\n  )\n  return(basin)\n}\n\nf_yield_basin_PE &lt;- function(basin_PE, dataset, nutrientIN, nutrientOUT){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrientIN))==F & is.na(!!as.symbol(nutrientOUT))==F\n      ) %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      nutrient_in = sum(!!as.symbol(nutrientIN), na.rm=T),\n      nutrient_out = sum(!!as.symbol(nutrientOUT), na.rm=T),\n      yield = round((1-nutrient_out/nutrient_in)*100, digits = 0)\n    ) %&gt;%\n    select(-nutrient_in, -nutrient_out)\n  basin_PE &lt;- left_join(\n    basin_PE, temp, by=c(\"Year\", \"PE_bin\")\n  )\n  return(basin_PE)\n}\n\nf_all_yields_basin &lt;- function(basin, dataset){\n  basin &lt;- basin %&gt;%\n    #NGL yield\n    f_yield_basin(dataset, \"NGL_in\", \"NGL_out\") %&gt;%\n    rename(NGL_yield = yield) %&gt;%\n    #Pt yield\n    f_yield_basin(dataset, \"Pt_in\", \"Pt_out\") %&gt;%\n    rename(Pt_yield = yield) %&gt;%\n    #DBO5 yield\n    f_yield_basin(dataset, \"DBO5_in\", \"DBO5_out\") %&gt;%\n    rename(DBO5_yield = yield) %&gt;%\n    #DCO yield\n    f_yield_basin(dataset, \"DCO_in\", \"DCO_out\") %&gt;%\n    rename(DCO_yield = yield) %&gt;%\n    #MES yield\n    f_yield_basin(dataset, \"MES_in\", \"MES_out\") %&gt;%\n    rename(MES_yield = yield) \n  return(basin)\n}\n\nf_all_yields_basin_PE &lt;- function(basin_PE, dataset){\n  basin_PE &lt;- basin_PE %&gt;%\n    #NGL yield\n    f_yield_basin_PE(dataset, \"NGL_in\", \"NGL_out\") %&gt;%\n    rename(NGL_yield = yield) %&gt;%\n    #Pt yield\n    f_yield_basin_PE(dataset, \"Pt_in\", \"Pt_out\") %&gt;%\n    rename(Pt_yield = yield) %&gt;%\n    #DBO5 yield\n    f_yield_basin_PE(dataset, \"DBO5_in\", \"DBO5_out\") %&gt;%\n    rename(DBO5_yield = yield) %&gt;%\n    #DCO yield\n    f_yield_basin_PE(dataset, \"DCO_in\", \"DCO_out\") %&gt;%\n    rename(DCO_yield = yield) %&gt;%\n    #MES yield\n    f_yield_basin_PE(dataset, \"MES_in\", \"MES_out\") %&gt;%\n    rename(MES_yield = yield) \n  return(basin_PE)\n}\n\nbasin_N_P_artois_picardie &lt;- f_all_yields_basin(basin_N_P_artois_picardie, N_P_artois_picardie)\n\nbasin_PE_N_P_artois_picardie &lt;- f_all_yields_basin_PE(basin_PE_N_P_artois_picardie, N_P_artois_picardie)\n\n\nWe create the years categories (every 5 years).\n\n\nCode\n#function to create years categories\nf_year_categories &lt;- function(dataset){\n  dataset &lt;- dataset %&gt;%\n    mutate(\n      Year_category = case_when(\n        Year %in% c(1991, 1992, 1993, 1994, 1995) ~ \"1991-1995\",\n        Year %in% c(1996, 1997, 1998, 1999, 2000) ~ \"1996-2000\",\n        Year %in% c(2001, 2002, 2003, 2004, 2005) ~ \"2001-2005\",\n        Year %in% c(2006, 2007, 2008, 2009, 2010) ~ \"2006-2010\",\n        Year %in% c(2011, 2012, 2013, 2014, 2015) ~ \"2011-2015\",\n        Year %in% c(2016, 2017, 2018, 2019, 2020) ~ \"2016-2020\",\n      )\n    )\n  return(dataset)\n}\nN_P_artois_picardie &lt;- f_year_categories(N_P_artois_picardie)\nbasin_N_P_artois_picardie &lt;- f_year_categories(basin_N_P_artois_picardie)\nbasin_PE_N_P_artois_picardie &lt;- f_year_categories(basin_PE_N_P_artois_picardie)\n\n\n\n\nThere is a reporting discontinuity in 2008. Before this date, DCO and DBO5 are not reported. On the contrary, starting 2008, NO is no more reported.\nMoreover before 2008 the reported nutrient inflows do not match the relation Inflow = Outflow + Removed. We recomputed the inflows based on this relation, and obtained a consistent continuity for the transition in 2008, and after 2008. For the following we will thus use or computed quantity.\nNGL is not reported, so we compute it. For the whole period, incoming NGL is approximated by incoming NTK (since NO is negligible for incoming flows). For outgoing NGL, we can compute NGL = NTK + NO only for before 2008 ; since NO is not reported after 2007 we cannot compute outgoing NGL this way after this date. The approximation used is detailed in the tab NGL out after 2007.\n\n\nCode\nf_graph_nutrient &lt;- function(dataset, nutrient_in, nutrient_out, nutrient_removed, nutrient_in_computed, label){\n  p &lt;- ggplot(dataset) + \n    #nutrient outflow\n    geom_ribbon(\n      aes(\n        Year, ymin=0, \n        ymax = !!as.symbol(nutrient_out), \n        fill = nutrient_out\n        ),\n      alpha=.8\n      ) +\n    #nutrient removed\n    geom_ribbon(\n      aes(\n        Year, ymin=!!as.symbol(nutrient_out), \n        ymax =  !!as.symbol(nutrient_out) + !!as.symbol(nutrient_removed), \n        fill = nutrient_removed\n        ),\n      alpha=.8\n      ) +\n    #nutrient inflow computed\n    geom_line(\n      aes(\n        Year, \n        !!as.symbol(nutrient_in), \n        linetype=\"inflow reported\"\n        )\n      ) + \n    #nutrient inflow reported\n    geom_line(\n      aes(\n        Year, \n        !!as.symbol(nutrient_in_computed), \n        linetype=\"inflow computed\"\n        )\n      ) + \n    ylim(0, NA) +\n    theme(\n      legend.title = element_blank()\n      ) +\n    labs(\n      x=\"\", y=paste(\"kt of\", label) , \n      title = paste(\"Reported\", label, \"flows in Artois-Picardie WWTPs\") ,\n      subtitle = \"reported, not necessarily actual ; here before data cleaning\", \n      caption = Source\n      )\n  return(p)\n}\n\n\n\nPtNTKDCODBO5MESNO, NTK and NGLNGL out after 2007Keeping computed values\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_artois_picardie, \"Pt_in_reported\", \"Pt_out\", \"Pt_removed\",\"Pt_in\", \"Pt\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_artois_picardie, \"NTK_in_reported\", \"NTK_out\", \"NTK_removed\",\"NTK_in\", \"NTK\")\n\n\n\n\n\n\n\nDCO is not reported before 2008.\n\n\nCode\nf_graph_nutrient(basin_N_P_artois_picardie, \"DCO_in_reported\", \"DCO_out\", \"DCO_removed\",\"DCO_in\", \"DCO\")\n\n\n\n\n\nCode\n#remove 0 values of DCO before 2008\nbasin_N_P_artois_picardie$DCO_in[basin_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nbasin_N_P_artois_picardie$DCO_out[basin_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nbasin_PE_N_P_artois_picardie$DCO_in[basin_PE_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nbasin_PE_N_P_artois_picardie$DCO_out[basin_PE_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nN_P_artois_picardie$DCO_in[N_P_artois_picardie$Year&lt;2008] &lt;- NA\nN_P_artois_picardie$DCO_out[N_P_artois_picardie$Year&lt;2008] &lt;- NA\n\n\n\n\nDBO5 is not reported before 2008\n\n\nCode\nf_graph_nutrient(basin_N_P_artois_picardie, \"DBO5_in_reported\", \"DBO5_out\", \"DBO5_removed\",\"DBO5_in\", \"DBO5\")\n\n\n\n\n\nCode\n#remove 0 values of DBO5 before 2008\nbasin_N_P_artois_picardie$DBO5_out[basin_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nbasin_N_P_artois_picardie$DBO5_in[basin_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nbasin_PE_N_P_artois_picardie$DBO5_out[basin_PE_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nbasin_PE_N_P_artois_picardie$DBO5_in[basin_PE_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nN_P_artois_picardie$DBO5_out[N_P_artois_picardie$Year&lt;2008] &lt;- NA\nN_P_artois_picardie$DBO5_in[N_P_artois_picardie$Year&lt;2008] &lt;- NA\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_artois_picardie, \"MES_in_reported\", \"MES_out\", \"MES_removed\",\"MES_in\", \"MES\")\n\n\n\n\n\n\n\nAs we said, before 2008, incoming flows are unreliable and overestimated. But for NO, contrary to the other flows, we cannot compute NO in = NO out + NO removed, because NO is “created” during the treatment through nitrification.\n\ninflowoutflow\n\n\nFor NGL, which is equal to NO + NTK, we can see that incoming NO is negligible compared to NTK, so we approximate incoming NGL by incoming NTK.\n\n\nCode\nggplot(basin_N_P_artois_picardie) +\n  geom_ribbon(aes(Year, ymin=0, ymax = NTK_in, fill=\"NTK in computed\")) +\n  geom_ribbon(aes(Year, ymin=NTK_in, ymax = NTK_in + NO_in_reported, fill=\"NO in reported\")) +\n  geom_line(aes(Year, NGL_in), linetype=\"dashed\") +\n  annotate(geom=\"text\", x=1997, y=15, label=\"NGL in ~ NTK in\") +\n  theme(\n    legend.title = element_blank()\n  ) +\n  labs(\n    x=\"\", y=\"ktN\", caption=Source,\n    title= \"N inflows in Artois-Picardie basin WWTPs\"\n  )\n\n\n\n\n\n\n\nWe can compute NGL out = NTK out + NO out before 2008, when NO is reported. For 2000-2008 the relations holds true at the basin scale. Before that, stations sometimes only report NTK out or NO out, and in that case we do not compute NGL out, explaining the apparent discrepancy.\nAfter that date, it is not possible to assess NGL (contrary to incoming flows, here NO is not negligible).\n\n\nCode\n#we remove th 0 values of NGL out starting 2008\nbasin_N_P_artois_picardie$NGL_out[basin_N_P_artois_picardie$Year&gt;2007] &lt;- NA\nN_P_artois_picardie$NGL_out[N_P_artois_picardie$Year&gt;2007] &lt;- NA\n# basin_N_P_artois_picardie$NGL_out[basin_N_P_artois_picardie$Year==1991] &lt;- NA\n# N_P_artois_picardie$NGL_out[N_P_artois_picardie$Year==1991] &lt;- NA\n\n#idem for NGL yield\nbasin_N_P_artois_picardie$NGL_yield[basin_N_P_artois_picardie$Year&gt;2007] &lt;- NA\nN_P_artois_picardie$NGL_yield[N_P_artois_picardie$Year&gt;2007] &lt;- NA\n\n\n\n\nCode\nggplot(basin_N_P_artois_picardie) +\n  geom_ribbon(aes(Year, ymin=0, ymax = NTK_out, fill=\"NTK out\")) +\n  geom_ribbon(aes(Year, ymin=NTK_out, ymax = NTK_out+NO_out, fill=\"NO out\")) +\n  annotate(geom=\"text\", x=2000, y=8, label=\"NGL out = NTK out + NO out\", hjust=0) +\n  geom_line(aes(Year, NGL_out), linetype=\"dashed\")+\n  theme(\n    legend.title = element_blank()\n  ) +\n  labs(\n    x=\"\", y=\"ktN\", caption=Source,\n    title= \"N outflow in Artois-Picardie basin WWTPs\"\n  )\n\n\n\n\n\n\n\n\n\n\nWe try to extrapolate outgoing NO after 2007 at the basin scale, by looking for a constant ratio on the period 1990-2007. NO out / NGL_in roughly meets this criteria, even though the NGL yield drastically changed over the period (see Yields section).\nThe ratio seems to begin to be roughly consistent over the different capacities starting 2004. We use this ratio averaged over 2004-2007 to compute outgoing NO for 2008-2020, and thus outgoing NGL as a first approximation.\nWith this we compute, at the basin scale, the NGL yield starting 2008 as well as the nutrient ratios involving NGL. We will imrove this in the future.\n\n\nCode\n#compute NO/NGL out at the basin scale\ntemp &lt;- N_P_artois_picardie %&gt;% \n  filter(\n    Year&lt;2008,\n    is.na(NO_out)==F & is.na(NGL_in)==F #only when both are reported\n    ) %&gt;%\n  group_by(Year, PE_bin) %&gt;%\n  summarise(\n    NO_out = sum(NO_out, na.rm=T),\n    NGL_in = sum(NGL_in, na.rm=T),\n    ratio = NO_out/NGL_in\n  ) \n\nggplot(temp) +\n  geom_line(aes(Year, ratio, color = PE_bin)) +\n  labs(\n    x=\"\", y=\"\",\n    title = \"Ratio at the basin scale\",\n    subtitle = \"Outgoing NO / Incoming NGL\",\n    caption = Source,\n    color = \"WWTP capacity\"\n  ) +\n  ylim(0, 0.2)\n\n\n\n\n\nCode\nratio_NOout_NGLin &lt;- mean(temp %&gt;% filter(Year&gt;=2004) %&gt;% pull(ratio))\n\n\nWe recompute the yields and ratios at the WWTP scale and the basin values based on these modifications.\n\n\nCode\n#Compute NO out and NGL out\nN_P_artois_picardie &lt;- N_P_artois_picardie %&gt;%\n  mutate(\n    NO_out = \n      case_when(\n        Year&gt;2007 ~ NGL_in*ratio_NOout_NGLin,\n        T~ NO_out\n        ),\n    NGL_out = NO_out + NTK_out\n  )\n\n#recompute basin values (flows, yields, ratios..)\nbasin_N_P_artois_picardie &lt;- f_basin_flows(N_P_artois_picardie)\nbasin_N_P_artois_picardie &lt;- f_all_nutrient_ratios_basin(basin_N_P_artois_picardie, N_P_artois_picardie)\nbasin_N_P_artois_picardie &lt;- f_all_yields_basin(basin_N_P_artois_picardie, N_P_artois_picardie)\nbasin_N_P_artois_picardie &lt;- f_year_categories(basin_N_P_artois_picardie)\n\n#recompute basin x PE values (flows, yields, ratios..)\nbasin_PE_N_P_artois_picardie &lt;- f_basin_PE_flows(N_P_artois_picardie)\nbasin_PE_N_P_artois_picardie &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_artois_picardie, N_P_artois_picardie)\nbasin_PE_N_P_artois_picardie &lt;- f_all_yields_basin_PE(basin_PE_N_P_artois_picardie, N_P_artois_picardie)\nbasin_PE_N_P_artois_picardie &lt;- f_year_categories(basin_PE_N_P_artois_picardie)\n\n#computes WWTP ratios and NGL yield\nN_P_artois_picardie &lt;- N_P_artois_picardie %&gt;%\n  mutate(\n    #yield\n    NGL_yield = (1-NGL_out/NGL_in),\n    #ratios\n    N_P_ratio_in = NGL_in/Pt_in,\n    N_P_ratio_out = NGL_in/Pt_out,\n    DCO_DBO5_ratio_in = DCO_in/DBO5_in,\n    DCO_DBO5_ratio_out = DCO_out/DBO5_out,\n    DBO5_NGL_ratio_in = DBO5_in/NGL_in,\n    DBO5_NGL_ratio_out = DBO5_out/NGL_out,\n    DBO5_Pt_ratio_in = DBO5_in/Pt_in,\n    DBO5_Pt_ratio_out = DBO5_out/Pt_out\n  )\n\n#we replace 0 by empty values for basin file whe not reported (before 2008)\nbasin_N_P_artois_picardie$DBO5_in[basin_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nbasin_N_P_artois_picardie$DBO5_out[basin_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nbasin_N_P_artois_picardie$DCO_in[basin_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nbasin_N_P_artois_picardie$DCO_out[basin_N_P_artois_picardie$Year&lt;2008] &lt;- NA\n\n#we replace 0 by empty values for basin x PEfile whe not reported (before 2008)\nbasin_PE_N_P_artois_picardie$DBO5_in[basin_PE_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nbasin_PE_N_P_artois_picardie$DBO5_out[basin_PE_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nbasin_PE_N_P_artois_picardie$DCO_in[basin_PE_N_P_artois_picardie$Year&lt;2008] &lt;- NA\nbasin_PE_N_P_artois_picardie$DCO_out[basin_PE_N_P_artois_picardie$Year&lt;2008] &lt;- NA\n\n\n\n\nWe only keep the consistent computed values in our file, so we remove the reported inflows.\n\n\nCode\nN_P_artois_picardie &lt;- N_P_artois_picardie %&gt;%\n  select(\n    #remove inconsistent reported values\n    -MES_in_reported, -DBO5_in_reported, -DCO_in_reported, -NGL_in_reported, -Pt_in_reported, -NO_in_reported, -NTK_in_reported,\n    #remove redundant \"removed\" values (can easily be computed)\n    -MES_removed, -DBO5_removed, -DCO_removed, -Pt_removed, -NO_removed, -NTK_removed\n    )\n\nbasin_N_P_artois_picardie &lt;- basin_N_P_artois_picardie %&gt;%\n  select(\n    #remove inconsistent reported values\n    -MES_in_reported, -DBO5_in_reported, -DCO_in_reported, -NGL_in_reported, -Pt_in_reported, -NO_in_reported, -NTK_in_reported,\n    #remove redundant \"removed\" values (can easily be computed)\n    -MES_removed, -DBO5_removed, -DCO_removed, -Pt_removed, -NO_removed, -NTK_removed\n    )\n\nbasin_PE_N_P_artois_picardie &lt;- basin_PE_N_P_artois_picardie %&gt;%\n  select(\n    #remove inconsistent reported values\n    -MES_in_reported, -DBO5_in_reported, -DCO_in_reported, -NGL_in_reported, -Pt_in_reported, -NO_in_reported, -NTK_in_reported,\n    #remove redundant \"removed\" values (can easily be computed)\n    -MES_removed, -DBO5_removed, -DCO_removed, -Pt_removed, -NO_removed, -NTK_removed\n    )\n\n\n\n\n\n\n\n\n\n\nData cleaning\n\nOutliers: first visualization\n\n\n\n\nCode\nf_graph_nutrient &lt;- function(dataset, nutrient_in, nutrient_out, label, legend_x, legend_y){\n  p &lt;- ggplot(dataset) + \n    #nutrient inflow\n    geom_line(\n      aes(\n        Year, \n        !!as.symbol(nutrient_in), \n        color=nutrient_in\n        )\n      ) + \n    #nutrient outflow\n    geom_line(\n      aes(\n        Year,\n        !!as.symbol(nutrient_out), \n        color = nutrient_out\n        )\n      ) +\n    ylim(0, NA) +\n    theme(\n      legend.position = c(legend_x, legend_y), \n      legend.title = element_blank()\n      ) +\n    labs(\n      x=\"\", y=paste(\"kt of\", label) , \n      title = paste(\"Reported\", label, \"flows in Artois-Picardie WWTPs\") ,\n      subtitle = \"reported, not necessarily actual ; here before data cleaning\", \n      caption = Source\n      )\n  return(p)\n}\n\n\nWe plot the flows at the basin scale to try to see important outliers. For now we do not spot any obvious outlier, so there is no need for correction.\n\nNGLNTKPtDBO5DCOMES\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_artois_picardie, \"NGL_in\", \"NGL_out\", \"NGL\", 0.7, 0.5) +\n  labs(subtitle = \"After 2007, NGL out is only approximate !\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_artois_picardie, \"NTK_in\", \"NTK_out\", \"NTK\", 0.7, 0.5) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_artois_picardie, \"Pt_in\", \"Pt_out\", \"Pt\", 0.4, 0.5) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_artois_picardie, \"DBO5_in\", \"DBO5_out\", \"DBO5\", 0.4, 0.5)  \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_artois_picardie, \"DCO_in\", \"DCO_out\", \"DCO\", 0.4, 0.5)  \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_artois_picardie, \"MES_in\", \"MES_out\", \"MES\", 0.4, 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCapacities distribution\n\nReporting EvolutionLarge categoriesHistogramCumulative distribution\n\n\n\n\nCode\n#file for graph\ntemp &lt;- N_P_artois_picardie %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    capacity = sum(capacity, na.rm = T)/10^6, #capacity in million PE\n    nb_WWTP = n()\n  )\n\nyear_min &lt;- min(temp$Year)\nyear_max &lt;- max(temp$Year)\nn_min &lt;- first(temp$nb_WWTP)\nn_max &lt;- last(temp$nb_WWTP)\ncapacity_min &lt;- round(first(temp$capacity), digits=1)\ncapacity_max &lt;- round(last(temp$capacity), digits=1)\n\n\nEven though the number of listed plants in the data base increases from 330 to 560 (a 70% increase) between 1992 and 2018, the total capacity only increases by 10% from 5.8 to 6.4 million Population Equivalent.\nThis highlights the fact that unreported plants are mostly small and that the plant size distribution is highly skewed, which is discussed in the following 3 tabs.\n\n\nCode\ncoef &lt;- max(temp$capacity)/max(temp$nb_WWTP)\nggplot(temp) +\n  geom_line(\n    aes(\n      Year, nb_WWTP, \n      color = \"number of reported facilities (left)\"\n      )\n    ) + \n  geom_line(\n    aes(\n      Year, capacity/coef, \n      color = \"total reported capacity (right)\"\n      )\n    ) + \n  scale_y_continuous(\n    limits = c(0, NA),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, \n        name=\"million Population Equivalent\"\n        )\n    ) +\n  labs(\n    title = \"Evolution of the reporting in the database\",\n    subtitle = \"in terms of number of WWTP reported and total reported capacity\",\n    y=\"\", x=\"\", \n    color=\"\", caption =Source\n  ) +\n  theme(\n    legend.position = c(0.7, 0.5)\n  )\n\n\n\n\n\n\n\nAbout half of the total capacity is from WWTP larger than 100 000 population equivalent. About 80-90% is due to WWTP larger than 10 000 population equivalent.\n\n\nCode\ntemp &lt;- N_P_artois_picardie %&gt;%\n  filter(is.na(capacity)==F) %&gt;%\n  select(Year, capacity, PE_bin) %&gt;%\n  group_by(Year, PE_bin) %&gt;%\n  summarise(\n    `capacity (million PE)` = sum(capacity)/10^6,\n    `number of stations` = n()\n  ) %&gt;% \n  gather(key=capacity_or_n, value = value, `capacity (million PE)`, `number of stations`)\n\n\n\nAbsoluteRelative\n\n\n\n\nCode\nggplot(temp) + \n  geom_area(aes(Year, value, fill=PE_bin), alpha=.8) + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"For each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) + \n  geom_area(aes(Year, value, fill=PE_bin), position = \"fill\", alpha=.8) + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"Proportion of each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_artois_picardie %&gt;% filter(Year==Year_analysis)\nggplot(temp) + \n  geom_histogram(\n    aes(\n      capacity, \n      fill = \"Nb of facilities\"\n      ), \n    n=100, alpha=.4, stat=\"density\"\n    ) +\n  geom_histogram(\n    aes(\n      capacity, weight = capacity, \n      fill=\"Nb of facilities weighted by capacity\"\n      ), \n    n=100, alpha=.4, stat=\"density\"\n    ) +\n  theme(\n    legend.position = c(0.7,0.8),\n  ) +\n  labs(\n    x=\"Waste Water Treatment Plant Capacity \\n(Population Equivalent)\",\n    y=\"Distribution density\",\n    fill=\"Distribution of\",\n    title = paste(\"WWTP capacities distribution\", as.character(Year_analysis)),\n    subtitle = \"raw or weighted by capacity\"\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    )\n\n\n\n\n\n\n\nAbout 1% of the WWTP represent 25% of the total capacity ; 4% represent 50% of the capacity ; 10% represent 75%\n\n\nCode\ntemp &lt;- N_P_artois_picardie %&gt;% \n  ungroup() %&gt;%\n  filter(Year==Year_analysis) %&gt;% \n  select(code_WWTP, name_WWTP, capacity) %&gt;%\n  filter(is.na(capacity) == F) %&gt;%\n  arrange(desc(capacity)) %&gt;%\n  mutate( \n    cumulative_capacity = cumsum(capacity)/10^6,\n    rank_STEU = rank(-capacity, ties.method = \"first\"),\n    percent_cumulative_capacity = round(cumulative_capacity/sum(capacity/10^6)*100, digits = 1),\n    percent_rank = round(rank_STEU/n()*100, digits = 1)\n    ) \n\nf_save_csv_files(\n  temp %&gt;% mutate(basin = \"Artois-Picardie\"), \n  \"output_data/zipf_law/\",\n  \"zipf_law_01_artois_picardie.csv\"\n)\n\ncoef &lt;- max(temp$rank_STEU)/100\ncoef2 &lt;- max(temp$cumulative_capacity)/100\n\n\n\nNb of WWTPs vs Capacity (linear scale)Nb of WWTPs vs Capacity (log scale)Zipf law\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(\n      x = percent_rank, y = percent_cumulative_capacity\n      )\n    ) + \n  labs(\n    title = paste(\"Cumulative distribution,\", Year_analysis),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) +\n  scale_x_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions PE)\"\n        )\n    ) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(\n      x = percent_rank, y = percent_cumulative_capacity\n      )\n    ) + \n  labs(\n    title = paste(\"Cumulative distribution,\", Year_analysis),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, \n        name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions Population Equivalent)\"\n        )\n    ) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_point(\n    aes(\n      x = rank_STEU, y = capacity\n      )\n    ) + \n  labs(\n    title = paste(\"WWTP capacity vs rank,\", Year_analysis),\n    subtitle = \"looking for a Zipf law\",\n    x=\"Waste Water Treatment Plant \\n(ranked by capacity)\",\n    y=\" Waste Water Treatment Plant capacity\\n(Population Equivalent)\"\n    ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    ) + \n  scale_y_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\nPollution flows\n\nData Quality : reporting ratesBasin scaleReal flow extrapolation\n\n\nNavigate through tabs below to see details for each pollutant. For each pollutant, we present reporting for incoming (left) and outgoing (right) pollution, in terms of number of WWTP reporting the data (bottom) or in terms of installed capacity (top).\nPollution reporting is excellent for NTK, Pt, MES. Starting 2008, DBO5 and DCO are also reported very well. By construction incoming NGL is equal to incoming NTK, so it is equally reported. See how is constructed NGL in the first paragraph #Data quality and description*.\nBesides reporting of specific pollutants, one must keep in mind that the number of reported WWTP increases over time, which might create a bias in total quantities reported. However, most of the newly reported facilities are small one, as shown by the rather constant capacity starting 2000.\n\n\nCode\n#function for plots : to be finished\nf_graph_reporting_nutrients &lt;- function(pollution_in, pollution_out){\n  temp &lt;- N_P_artois_picardie %&gt;%\n    select(\n      Year, capacity, \n      !!as.symbol(pollution_in), !!as.symbol(pollution_out)\n      ) %&gt;%\n    mutate(\n      nutrient_in = is.na(!!as.symbol(pollution_in))==F,\n      nutrient_out = is.na(!!as.symbol(pollution_out))==F\n      ) %&gt;%\n    gather(\n      key=in_out_flow, \n      value = `reported pollution`, \n      nutrient_in, nutrient_out\n      ) %&gt;%\n    group_by(\n      Year, in_out_flow, `reported pollution`\n      ) %&gt;%\n    summarise(\n      `number of WWTP`=n(), \n      `capacity (million PE)` = sum(capacity, na.rm=T)/10^6\n      ) %&gt;%\n    gather(\n      key=n_or_capacity, \n      value = value, \n      `number of WWTP`, `capacity (million PE)`\n      ) %&gt;%\n    #renaming labels\n    mutate(\n      in_out_flow = case_when(\n        in_out_flow == \"nutrient_in\" ~ pollution_in,\n        in_out_flow == \"nutrient_out\" ~ pollution_out,\n      )\n    )\n\n  g &lt;- ggplot(temp) +\n    geom_area(aes(Year, value, fill=`reported pollution`)) +\n    facet_grid(\n      n_or_capacity~in_out_flow, \n      scales=\"free_y\", switch = \"y\") +\n    labs(\n      y=\"\", x=\"\",\n      title = \"Reporting of nutrient inflows (left) and outflows (right)\",\n      subtitle = \"In terms of total capacity (top) and nb of WWTP (bottom)\",\n      caption = Source\n      ) \n\n  return(g)\n}\n\n\n\nPtNTKNGLDBO5DCOMES\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"Pt_in\", \"Pt_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NTK_in\", \"NTK_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NGL_in\", \"NGL_out\") +\n  labs(subtitle = \"after 2007, NGL out is actually extrpolated from NGL in and NTK out!\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"DBO5_in\", \"DBO5_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"DCO_in\", \"DCO_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"MES_in\", \"MES_out\")\n\n\n\n\n\n\n\n\n\n\nThe same as in Data cleaning -&gt; Outliers: first visualization because we did not have to correct major outliers in the Artois-Picardie basin.\n\n\nWe extrapolate the flows at the basin scale for the plants not reporting them. For that, we use a coefficient proportionate to the unreported capacity of the given nutrient flow (see data quality tab).\n\nCoefficient calculationPtNGLDBO5DCOMES\n\n\nWe compute in terms of installed capacity the reported and unreported flows for NGL, Pt, DBO5, DCO and MES. We do this for each year and for each capacity category.\n\n\nCode\n#create file of reported \ntemp &lt;- N_P_artois_picardie %&gt;%\n  select(\n    Year, PE_bin, capacity, \n    Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    ) %&gt;%\n  #spots unreported values for each nutrient flow\n  mutate(\n    across(\n      c(Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out),\n      ~ is.na(.x)==F\n      )\n    ) %&gt;%\n  #gather to be able to then group by flow and count capacity\n  gather(\n    key=nutrient_flow, \n    value = reported_pollution, \n    Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    )  %&gt;%\n  #count reported capacity and unreported capacity for each (Year, capacity category, nutrient flow)\n  group_by(\n    Year, PE_bin, nutrient_flow, reported_pollution\n    ) %&gt;%\n  summarise(\n    capacity = sum(capacity, na.rm=T)/10^6\n    ) %&gt;%\n  #creates reported/unreported names for each nutrient flow and spreads into columns\n  mutate(\n    nutrient_flow = case_when(\n      reported_pollution == T ~ paste0(nutrient_flow, \"_reported\"),\n      reported_pollution == F ~ paste0(nutrient_flow, \"_unreported\")\n    )\n  ) %&gt;%\n  select(-reported_pollution) %&gt;%\n  spread(nutrient_flow, capacity)\n\n# NA values replaced by 0 for futur coeff computation\ntemp[is.na(temp)] &lt;- 0\n\n\nFrom this we compute proportionate coefficient to extrapolate real flows.\n\n\nCode\ntemp &lt;- temp %&gt;%\n  mutate(\n    #Pt\n    Pt_in_coeff = (Pt_in_reported + Pt_in_unreported)/Pt_in_reported,\n    Pt_out_coeff = (Pt_out_reported + Pt_out_unreported)/Pt_out_reported,\n    #NGL\n    NGL_in_coeff = (NGL_in_reported + NGL_in_unreported)/NGL_in_reported,\n    NGL_out_coeff = (NGL_out_reported + NGL_out_unreported)/NGL_out_reported,\n    #DBO5\n    DBO5_in_coeff = (DBO5_in_reported + DBO5_in_unreported)/DBO5_in_reported,\n    DBO5_out_coeff = (DBO5_out_reported + DBO5_out_unreported)/DBO5_out_reported,\n    #DCO\n    DCO_in_coeff = (DCO_in_reported + DCO_in_unreported)/DCO_in_reported,\n    DCO_out_coeff = (DCO_out_reported + DCO_out_unreported)/DCO_out_reported,\n    #MES\n    MES_in_coeff = (MES_in_reported + MES_in_unreported)/MES_in_reported,\n    MES_out_coeff = (MES_out_reported + MES_out_unreported)/MES_out_reported,\n  ) %&gt;%\n  select(\n    -c(\n      Pt_in_reported, Pt_in_unreported,\n      Pt_out_reported, Pt_out_unreported,\n      NGL_in_reported, NGL_in_unreported,\n      NGL_out_reported, NGL_out_unreported,\n      DBO5_in_reported, DBO5_in_unreported,\n      DBO5_out_reported, DBO5_out_unreported,\n      DCO_in_reported, DCO_in_unreported, \n      DCO_out_reported, DCO_out_unreported, \n      MES_in_reported, MES_in_unreported, \n      MES_out_reported, MES_out_unreported\n      )\n    )\n\n#replace Inf values by 1 (check if it does not create problems)\ntemp[temp == Inf] &lt;- 1\n\n\nWith these coefficients we compute the adjusted flows\n\n\nCode\n#file with reported flows and adjustment coefficient\ntemp2 &lt;- left_join(\n  basin_PE_N_P_artois_picardie %&gt;%\n    #selects only flows and not yields or ratios\n    select(\n      Year, PE_bin, \n      Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    ),\n  temp, by=c(\"Year\", \"PE_bin\")\n)\n\n#computes adjusted flows\ntemp2 &lt;- temp2 %&gt;%\n  mutate(\n    #Pt\n    Pt_in_adj = round(Pt_in_coeff*Pt_in, 5),\n    Pt_out_adj = round(Pt_out_coeff*Pt_out, 5),\n    #NGL\n    NGL_in_adj = round(NGL_in_coeff*NGL_in, 5),\n    NGL_out_adj = round(NGL_out_coeff*NGL_out, 5),\n    #DBO5\n    DBO5_in_adj = round(DBO5_in_coeff*DBO5_in, 5),\n    DBO5_out_adj = round(DBO5_out_coeff*DBO5_out, 5),\n    #DCO\n    DCO_in_adj = round(DCO_in_coeff*DCO_in, 5),\n    DCO_out_adj = round(DCO_out_coeff*DCO_out, 5),\n    #MES\n    MES_in_adj = round(MES_in_coeff*MES_in, 5),\n    MES_out_adj = round(MES_out_coeff*MES_out, 5)\n  ) %&gt;%\n  #we remove coefficients and unajusted flows\n  select(\n    -c(\n      Pt_in, Pt_in_coeff, Pt_out, Pt_out_coeff,\n      NGL_in, NGL_in_coeff, NGL_out, NGL_out_coeff,\n      DBO5_in, DBO5_in_coeff, DBO5_out, DBO5_out_coeff,\n      DCO_in, DCO_in_coeff, DCO_out, DCO_out_coeff, \n      MES_in, MES_in_coeff, MES_out, MES_out_coeff\n    )\n  )\n\n\nWe add these adjusted flows to the main files reporting flows at the basin scale\n\n\nCode\n#adding adjusted flows to the basin x capacity files\nbasin_PE_N_P_artois_picardie &lt;- left_join(\n  basin_PE_N_P_artois_picardie, temp2, by=c(\"Year\", \"PE_bin\")\n)\n\n#aggregating adjusted flows at the basin scale without the capacity categories\ntemp &lt;- temp2 %&gt;%\n  select(-PE_bin) %&gt;%\n  group_by(Year) %&gt;%\n  summarise_all(~signif(sum(.x), 3))\n\n#adding adjusted flows to the basin files\nbasin_N_P_artois_picardie &lt;- left_join(\n  basin_N_P_artois_picardie, temp, by=\"Year\"\n)\n\n\nWe plot the comparison reported / adjusted in the following graphs. For the Artois-Picardie basin, the difference is very marginal.\n\n\nCode\nf_graph_adjusted &lt;- function(basin_file, basin_PE_file, nutrient_adjusted, nutrient_reported, nutrient_label){\n  g &lt;- plot_grid(\n    ggplot(basin_PE_file) +\n      geom_line(\n        data = basin_file,\n        aes(Year, !!as.symbol(nutrient_adjusted)), \n        color=\"black\", size=1\n        ) + \n      geom_area(\n        aes(Year, !!as.symbol(nutrient_reported), fill=PE_bin), \n        alpha=.7\n        ) + \n      theme(legend.position = \"none\") +\n      labs(\n        x=\"\", y=\"kt per year\",\n        caption = \"\\n\",\n        title = paste(\"Adjusted\", nutrient_label, \"flows\")\n    ),\n    ggplot(basin_PE_file) +\n      geom_line(\n        aes(Year, !!as.symbol(nutrient_adjusted), color=PE_bin), \n        size=1\n        ) + \n      geom_area(\n        aes(Year, !!as.symbol(nutrient_reported), fill=PE_bin), \n        alpha=.7\n        ) + \n      theme(legend.position = \"none\") +\n      facet_wrap(vars(PE_bin), scales=\"free\") +\n      labs(\n        x=\"\", y=\"\",\n        caption = Source,\n        title = \"\",\n        subtitle = \"line: adjusted flow ; area: reported flow\"\n      ),\n    rel_widths = c(0.3, 0.7)\n  )\n  return(g)\n}\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_artois_picardie, \n  basin_PE_N_P_artois_picardie,\n  \"Pt_in_adj\", \"Pt_in\", \"incoming Pt\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_artois_picardie, \n  basin_PE_N_P_artois_picardie,\n  \"Pt_out_adj\", \"Pt_out\", \"discharged Pt\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_artois_picardie, \n  basin_PE_N_P_artois_picardie,\n  \"NGL_in_adj\", \"NGL_in\", \"incoming NGL\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_artois_picardie, \n  basin_PE_N_P_artois_picardie,\n  \"NGL_out_adj\", \"NGL_out\", \"discharged NGL\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_artois_picardie, \n  basin_PE_N_P_artois_picardie,\n  \"DBO5_in_adj\", \"DBO5_in\", \"incoming DBO5\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_artois_picardie, \n  basin_PE_N_P_artois_picardie,\n  \"DBO5_out_adj\", \"DBO5_out\", \"discharged DBO5\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_artois_picardie, \n  basin_PE_N_P_artois_picardie,\n  \"DCO_in_adj\", \"DCO_in\", \"incoming DCO\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_artois_picardie, \n  basin_PE_N_P_artois_picardie,\n  \"DCO_out_adj\", \"DCO_out\", \"discharged DCO\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_artois_picardie, \n  basin_PE_N_P_artois_picardie,\n  \"MES_in_adj\", \"MES_in\", \"incoming MES\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_artois_picardie, \n  basin_PE_N_P_artois_picardie,\n  \"MES_out_adj\", \"MES_out\", \"discharged MES\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRatios\n\nBasin scale\n\n\n\nN:PDCO:DBO5DBO5:N vs DBO5:P\n\n\n\n\nCode\n#temporal P/N ratio\nggplot(basin_N_P_artois_picardie) + \n  geom_line(aes(Year, N_P_ratio_in, color=\"N:P in\")) + \n  geom_line(aes(Year, N_P_ratio_out, color = \"N:P out\")) + \n  ylim(0, NA) +\n  theme(\n    legend.position = c(0.7, 0.6)\n  ) +\n  labs(\n    x=\"\", y=\"N:P ratio\",\n    title = \"N:P ratio in Artois-Picardie basin\",\n    subtitle = \"Careful ! After 2007, N outflow is approximate !\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_artois_picardie) + \n  geom_line(aes(Year, DCO_DBO5_ratio_in, color=\"DCO:DBO5 in\")) + \n  geom_line(aes(Year, DCO_DBO5_ratio_out, color = \"DCO:DBO5 out\")) + \n  ylim(0, NA) +\n  theme(\n    legend.position = c(0.7, 0.6)\n  ) +\n  labs(\n    x=\"\", y=\"DCO:DBO5 ratio\",\n    title = \"DCO:DBO5 ratio in Artois-Picardie basin\",\n    subtitle = \"decrease in outflow shows biodegradation\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_artois_picardie) +\n  geom_point(\n    aes(\n      DBO5_N_ratio_in, DBO5_P_ratio_in,\n      color=Year_category\n      )\n    ) +\n  geom_point(\n    aes(\n      DBO5_N_ratio_out, DBO5_P_ratio_out,\n      color=Year_category\n        )\n    ) +\n  ylim(0, NA) +\n  annotate(\n    geom=\"text\", label =\"inflow\",\n    x=4, y=25\n  ) +\n  annotate(\n    geom=\"text\", label =\"outflow\",\n    x=1.3, y=8\n  ) +\n  labs(\n    x=\"DBO5:Pt ratio\", y=\"DBO5:NGL ratio\",\n    title = \"DBO5:NGL vs DBO5:Pt ratio in Artois-Picardie basin WWTPs\",\n    subtitle = \"Careful ! After 2007, NGL out is only approximate\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nBasin yield\n\nBasinBasin x Capacity\n\n\n\n\nCode\nggplot(basin_N_P_artois_picardie) + \n  geom_line(aes(Year, Pt_yield, color=\"P\")) + \n  geom_line(aes(Year, NGL_yield, color = \"N\")) + \n  geom_line(aes(Year, DBO5_yield, color = \"DBO5\")) +\n  geom_line(aes(Year, DCO_yield, color = \"DCO\")) +\n  geom_line(aes(Year, MES_yield, color = \"MES\")) +\n  ylim(0,100) +\n  theme(legend.position = c(0.7, 0.3)) +\n  labs(\n    title = \"Global abatement rate of Artois-Picardie WWTPs\", \n    x=\"\", y=\"Yield (%)\", color=\"\",\n    caption = Source\n    )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE &lt;- function(dataset, nutrient_yield, nutrient_label){\n  g &lt;- ggplot(dataset) + \n    geom_line(aes(Year, !!as.symbol(nutrient_yield), color=PE_bin)) + \n    ylim(0,100) +\n    theme(legend.position = c(0.7, 0.3)) +\n    labs(\n      title = paste(\"Global\", nutrient_label, \"yield of Artois-Picardie basin\"), \n      subtitle = \"by capacity (population equivalent)\",\n      x=\"\", y=\"Yield (%)\", color=\"\",\n      caption = Source\n      )\n  return(g)\n}\n\n\n\nPtNGLDBO5DCOMES\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_artois_picardie %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"Pt_yield\", \"Pt\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_artois_picardie %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"NGL_yield\", \"NGL\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_artois_picardie %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"DBO5_yield\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_artois_picardie %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"DCO_yield\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_artois_picardie %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"MES_yield\", \"MES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave data\nWe artificially extend the data in 2019 and 2020 from 2018 value to compare to the other basins on this period.\n\n\nCode\ntemp &lt;- N_P_artois_picardie %&gt;% \n  filter(Year==2018)\nN_P_artois_picardie &lt;- bind_rows(\n  N_P_artois_picardie, \n  temp %&gt;% mutate(Year=2019), \n  temp %&gt;% mutate(Year=2020) \n)\n\ntemp &lt;- basin_N_P_artois_picardie %&gt;% \n  filter(Year==2018)\nbasin_N_P_artois_picardie &lt;- bind_rows(\n  basin_N_P_artois_picardie, \n  temp %&gt;% mutate(Year=2019), \n  temp %&gt;% mutate(Year=2020) \n)\n\ntemp &lt;- basin_PE_N_P_artois_picardie %&gt;% \n  filter(Year==2018)\nbasin_PE_N_P_artois_picardie &lt;- bind_rows(\n  basin_PE_N_P_artois_picardie, \n  temp %&gt;% mutate(Year=2019), \n  temp %&gt;% mutate(Year=2020) \n)\n\n\nWe save the file for our analysis at the national scale combining all different basins. We do not save data for individual WWTP NGL yield and NO and NGL outflows, since they are approximations valid only at the basin level.\n\n\nCode\n#all WWTP file\npath_output &lt;- \"output_data/all_WWTP/\"\ntemp &lt;- N_P_artois_picardie %&gt;%\n  select(\n    code_WWTP, name_WWTP, Year, capacity, name_commune, INSEE_COM, lat_WWTP, long_WWTP, PE_bin,\n    DBO5_in, DCO_in, MES_in, NGL_in, NTK_in, Pt_in,\n    DBO5_out, DCO_out, MES_out, NTK_out, Pt_out,\n    DBO5_yield, DCO_yield, MES_yield, Pt_yield,\n  )\n\nf_save_csv_files(\n  temp,\n  path_output,\n  \"all_WWTP_01_artois_picardie.csv\"\n)\n\n#basin agregated file\npath_output &lt;- \"output_data/basins/\"\ntemp &lt;- basin_N_P_artois_picardie %&gt;%\n  select(\n    Year, capacity, nb_WWTP,\n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_01_artois_picardie.csv\"\n)\n\n#basin x PE agregated file\npath_output &lt;- \"output_data/basins_PE/\"\ntemp &lt;- basin_PE_N_P_artois_picardie %&gt;%\n  select(\n    Year, capacity, nb_WWTP, PE_bin, \n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_PE_01_artois_picardie.csv\"\n)\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "03_seine_normandie_SIAAP.html",
    "href": "03_seine_normandie_SIAAP.html",
    "title": "Seine-Normandie and SIAAP",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#loading additional relevant packages\nlibrary(cowplot) #for plot_grid()\nlibrary(readxl) #to read excel file\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(\n      plot.title = element_text(face=\"bold\")\n      )\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\nSource &lt;- \"SIAAP and Seine-Normandie Water Agency\\nComputation by Thomas Starck\"\n\nYear_analysis &lt;- 2015\n\n# Load the function file\nsource(\"functions.R\")\n\n\n\nSources and data\n\nBasin DescriptionSourcesLoad basin dataLoad SIAAP data\n\n\nBasin description in Seine-Normandie Etat des lieux for 2019 and 2013. There are 18.7 million inhabitants, and in 2019 1.2 are not connected to sewers.\nMore description in the “Guide de l’eau” (water guide) here et here\n\n\nFor this basin, we only have complete data of all WWTP for some particuliar years (2014, 2015, 2016, 2018 and 2020), provided by mail. 2015 is from Etat des lieux report, and have more extensive WWTP description and pollution description. The other data are exctractions from the water agencies following our demand and are less detailed.\nWe also have data for the 6 SIAAP (Syndicat Interdépartemental pour l’Assainissement de l’Agglomération Parisienne) WWTPs during 2001-2020, which handle half fo the basin flows (also provided by mail).\n\n\nFor 2015, where NO2 and NO3 are also reported, we use the following approximation when NGL is not reported :\n\nfor incoming flow, if NTK is reported, we use it in lieu of NGL\nfor outgoing flow, if NTK and NO3 are reported, we use their sum in lieu of NGL\n\nFor 2016, only NTK is reported and not NGL. For incoming low, we approximate NGL by NTK. The approximation does not hold for outgoing flow.\nWe load the data from all the years\n\n\nCode\npath_source &lt;- \"source_data/03_seine_normandie/\"\nfile_seine_normandie_2015 &lt;- read_excel(\n  paste0(path_source, \"pression macropolluants_STEU collectivités_2015.xlsx\"), sheet =\"flux et rdts \"\n) %&gt;%\n  mutate(\n    Year = 2015\n  )\nfile_seine_normandie_2015 &lt;- file_seine_normandie_2015 %&gt;%\n  select(\n    code_WWTP = `code STEU`,\n    name_WWTP = `nom STEU`,\n    name_commune = `nom de la commune d'implantion`,\n    capacity = `capacité nominale steu (EH)`,\n    Pt_in = `Ptot entrée (kg/an)`,\n    NGL_in = `NGL entrée (kg/an)`,\n    NTK_in = `NR entrée (kg/an)`,\n    NO2_in = `NNO2 entrée (kg/an)`,\n    NO3_in = `NNO3 entrée(kg/an)`,\n    DBO5_in = `DBO5 entrée (kg/an)`,\n    DCO_in = `DCO entrée (kg/an)`,\n    MES_in = `MES entrée (kg/an)`,\n    Pt_out = `Ptot sortie (kg/an)`,\n    NGL_out = `NGL sortie (kg/an)`,\n    NTK_out = `NR sortie (kg/an)`,\n    NO2_out = `NNO2 sortie (kg/an)`,\n    NO3_out = `NNO3 sortie (kg/an)`,\n    DBO5_out = `DBO5 sortie (kg/an)`,\n    DCO_out = `DCO sortie (kg/an)`,\n    MES_out = `MES sortie (kg/an)`,\n    treatment_type = `Filière eau principale (ROSEAU)`,\n    N_treatment = `traitement en N poussé (ROSEAU)`,\n    P_treatment = `traitement en P poussé (ROSEAU)`,\n    flow_in = `débit entrant (ROSEAU)  (m3/j)`,\n    flow_nominal = `débit de référence (ROSEAU) (m3/j)`\n  ) %&gt;%\n  mutate(Year=2015) %&gt;%\n  #transform flows from kg/year to kg/day\n  mutate(\n    across(\n      c(NGL_in, NTK_in, NO2_in, NO3_in, Pt_in, DBO5_in, DCO_in, MES_in,\n        NGL_out, NTK_out, NO2_in, NO3_in, Pt_out, DBO5_out, DCO_out, MES_out), \n      ~signif(.x/365, 3)\n      )\n  ) %&gt;%\n  ungroup() %&gt;%\n  # we need to be \"row wise\" to use \"sum(., na.rm=T) : \n  # just summing the columns A+B would return NA when at least 1 columns as NA in the row\n  rowwise() %&gt;%\n  mutate(\n    NGL_in = \n      case_when(\n        #when NGL in is not reported, if NTK_in reported we accept to not consider unreported NO2_in and NO2_in as 0 (because NO in negligible)\n        #if NTK_in unreported, NGL_in is unreported\n        is.na(NGL_in) ~ sum(NTK_in, NO2_in, NO3_in, na.rm=!is.na(NTK_in)),\n        T ~ NGL_in\n    ),\n    NGL_out = \n      case_when(\n        #when NGL out is not reported, NO3 and NTK must be reported, and we accept to neglect NO2 when it is unreported.\n        is.na(NGL_out) ~ sum(NTK_out, NO2_out, NO3_out, na.rm=!((is.na(NTK_out)|is.na(NO3_out)))),\n        T ~ NGL_out\n      )\n    )\n\n\nfile_seine_normandie_2014 &lt;- read_excel(\n  paste0(path_source, \"DonnéesSTEU2014-2020.xlsx\"), sheet =\"données2014\", \n  col_types = c(\"text\", \"text\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\")\n) %&gt;% \n  select(\n    code_WWTP = CODE_SANDRE,\n    name_WWTP = `Nom step`,\n    capacity = `Capacité Nominale\\r\\n(EH)`,\n    MES_in = `FLUX ENTRANT\\r\\nKg/an\\r\\n(MES )` ,\n    MES_out = `FLUX SORTANT\\r\\nKg/an\\r\\n(MES )`,\n    DBO5_in = `FLUX\\r\\nENTRANT\\r\\nKg/an\\r\\n(DBO5)`,\n    DBO5_out = `FLUX\\r\\nSORTANT\\r\\nKg/an\\r\\n(DBO5)`,\n    DCO_in = `FLUX\\r\\nENTRANT\\r\\nKg/an\\r\\n(DCO)`,\n    DCO_out = `FLUX\\r\\nSORTANT\\r\\nKg/an\\r\\n(DCO)`,\n    NTK_in = `FLUX\\r\\nENTRANT\\r\\nKg/an\\r\\n(NTK)`,\n    NTK_out = `FLUX\\r\\nSORTANT\\r\\nKg/an\\r\\n(NTK)`,\n    Pt_in = `FLUX\\r\\nENTRANT\\r\\nKg/an\\r\\n(PT)`,\n    Pt_out = `FLUX\\r\\nSORTANT\\r\\nKg/an\\r\\n(PT)`,\n    NGL_in = `FLUX\\r\\nENTRANT\\r\\nKg/an\\r\\n(NGL)`,\n    NGL_out = `FLUX\\r\\nSORTANT\\r\\nKg/an\\r\\n(NGL)`,\n    DBO5_yield = `Rdt DBO5`,\n    DCO_yield = `Rdt DCO`,\n    MES_yield = `Rdt MES`,\n    NTK_yield = `Rdt NTK`,\n    Pt_yield = `Rdt PT`,\n    NGL_yield = `Rdt NGL`\n  ) %&gt;%\n  mutate(\n    Year = 2014\n  ) %&gt;%\n  #transform flows from kg/year to kg/day\n  mutate(\n    across(\n      c(NGL_in, NTK_in, Pt_in, DBO5_in, DCO_in, MES_in,\n        NGL_out, NTK_out, Pt_out, DBO5_out, DCO_out, MES_out), \n      ~signif(.x/365, 3)\n      )\n  ) \n\nfile_seine_normandie_2016 &lt;- read_excel(\n  paste0(path_source, \"DonnéesSTEU2014-2020.xlsx\"), sheet =\"données2016\"\n)  %&gt;%\n  rename(\n    code_WWTP = `code steu` ,\n    name_WWTP = `nom de la steu`\n  ) %&gt;%\n  mutate(\n    Year = 2016,\n    NGL_in = NTK_in\n  )  %&gt;%\n  #transform flows from kg/year to kg/day\n  mutate(\n    across(\n      c(NGL_in, NTK_in, Pt_in, DBO5_in, DCO_in, MES_in,\n        NTK_out, Pt_out, DBO5_out, DCO_out, MES_out), \n      ~signif(.x/365, 3)\n      )\n  ) \n\nfile_seine_normandie_2018 &lt;- read_excel(\n  paste0(path_source, \"DonnéesSTEU2014-2020.xlsx\"), sheet =\"données2018\"\n)  %&gt;%\n  select(\n    code_WWTP = `Code Sandre STEU` ,\n    name_WWTP = `Nom STEU`  ,\n    capacity = `Capacité STEU ROSEAU (EH)`,\n    DBO5_in = `Entrée DBO5 (kg/an)` ,\n    DBO5_out = `Sortie DBO5 (kg/an)`,\n    DCO_in = `Entrée DCO (kg/an)` ,\n    DCO_out = `Sortie DCO (kg/an)`,\n    MES_in = `Entrée MES (kg/an)` ,\n    MES_out = `Sortie MES (kg/an)`,\n    NGL_in = `Entrée NGL (kg/an)` ,\n    NGL_out = `Sortie NGL (kg/an)`,\n    NH4_in = `Entrée NH4 (kg/an)` ,\n    NH4_out = `Sortie NH4 (kg/an)`,\n    NTK_in = `Entrée NTK (kg/an)` ,\n    NTK_out = `Sortie NTK (kg/an)`,\n    Pt_in = `Entrée PT (kg/an)` ,\n    Pt_out = `Sortie PT (kg/an)`,\n    flow_in = `Volume entrée (m3/an)`,\n    flow_out = `Volume sortie (m3/an)`  \n  ) %&gt;%\n  mutate(\n    Year = 2018\n  )  %&gt;%\n  #transform flows from kg/year to kg/day\n  mutate(\n    across(\n      c(NGL_in, NH4_in, NTK_in, Pt_in, DBO5_in, DCO_in, MES_in,\n        NGL_out, NH4_out, NTK_out, Pt_out, DBO5_out, DCO_out, MES_out), \n      ~signif(.x/365, 3)\n      )\n  ) \n\nfile_seine_normandie_2020 &lt;- read_excel(\n  paste0(path_source, \"DonnéesSTEU2014-2020.xlsx\"), sheet =\"données2020\"\n)  %&gt;%\n  select(\n    code_WWTP = `Code Sandre STEU` ,\n    name_WWTP = `Nom STEU`  ,\n    capacity = `Capacité STEU ROSEAU (EH)`,\n    DBO5_in = `Entrée DBO5 (kg/an)` ,\n    DBO5_out = `Sortie DBO5 (kg/an)`,\n    DCO_in = `Entrée DCO (kg/an)` ,\n    DCO_out = `Sortie DCO (kg/an)`,\n    MES_in = `Entrée MES (kg/an)` ,\n    MES_out = `Sortie MES (kg/an)`,\n    NGL_in = `Entrée NGL (kg/an)` ,\n    NGL_out = `Sortie NGL (kg/an)`,\n    NH4_in = `Entrée NH4 (kg/an)` ,\n    NH4_out = `Sortie NH4 (kg/an)`,\n    NTK_in = `Entrée NTK (kg/an)` ,\n    NTK_out = `Sortie NTK (kg/an)`,\n    Pt_in = `Entrée PT (kg/an)` ,\n    Pt_out = `Sortie PT (kg/an)`,\n    flow_in = `Volume entrée (m3/an)`,\n    flow_out = `Volume sortie (m3/an)`  \n  ) %&gt;%\n  mutate(\n    Year = 2020\n  )  %&gt;%\n  #transform flows from kg/year to kg/day\n  mutate(\n    across(\n      c(NGL_in, NH4_in, NTK_in, Pt_in, DBO5_in, DCO_in, MES_in,\n        NGL_out, NH4_out, NTK_out, Pt_out, DBO5_out, DCO_out, MES_out), \n      ~signif(.x/365, 3)\n      )\n  ) \n\n\n#2016 dose not have WWTP capacity, we add it from the other files\nfile_seine_normandie_2016 &lt;- left_join(\n  file_seine_normandie_2016,\n  file_seine_normandie_2015 %&gt;% select(code_WWTP, capacity),\n  by = \"code_WWTP\"\n)\n#some WWTP still have no capactiy reporting\ntemp &lt;- file_seine_normandie_2016 %&gt;% filter(is.na(capacity)) #to see them (just 6)\n#we remove these WWTPs\nfile_seine_normandie_2016 &lt;- file_seine_normandie_2016 %&gt;%\n  filter(is.na(capacity)==F)\n\nN_P_seine_normandie &lt;- bind_rows(\n  file_seine_normandie_2014,\n  file_seine_normandie_2015,\n  file_seine_normandie_2016,\n  file_seine_normandie_2018,\n  file_seine_normandie_2020\n)\nrm(file_seine_normandie_2014, file_seine_normandie_2015, file_seine_normandie_2016, file_seine_normandie_2018, file_seine_normandie_2020)\n\n\nWe create the WWTP capacity categories in terms of population equivalent.\n\n\nCode\n#function to create capacity categories\nf_PE_bin_categories &lt;- function(dataset){\n  #Creating size categories\n  dataset &lt;- \n    dataset %&gt;%\n    mutate(\n      PE_bin = case_when(\n        capacity &lt; 200 ~ \"0 - 200 PE\",\n        (capacity &gt;= 200) & (capacity &lt;2000) ~ \"200 - 2 000 PE\",\n        (capacity &gt;= 2000) & (capacity &lt;10000) ~ \"2 000 - 10 000 PE\",\n        (capacity &gt;= 10000) & (capacity &lt;100000) ~ \"10 000 - 100 000 PE\",\n        capacity &gt;= 100000 ~ \"&gt; 100 000 PE\"\n      )\n    )\n  \n  #reorders treatment by their share of total capacity\n  dataset$PE_bin &lt;- \n    factor(\n      dataset$PE_bin, \n      levels = \n        c(\"0 - 200 PE\", \n          \"200 - 2 000 PE\", \n          \"2 000 - 10 000 PE\",\n          \"10 000 - 100 000 PE\", \n          \"&gt; 100 000 PE\"\n          )\n        )\n  return(dataset)\n}\nN_P_seine_normandie &lt;- f_PE_bin_categories(N_P_seine_normandie)\n\n\nWe create the file with aggregated flows at the basin scale, and also by capacity categories.\n\n\nCode\nf_basin_flows &lt;- function(dataset){\n  basin &lt;- dataset %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      across(\n        c(\n          #incoming_flow\n          NGL_in, NTK_in, NO2_in, NO3_in,\n          Pt_in, DBO5_in, DCO_in, MES_in,\n          #outgoing_flow\n          NGL_out, NTK_out, NO2_out, NO3_out,\n          Pt_out, DBO5_out, DCO_out, MES_out\n        ),\n        ~round(sum(.x, na.rm = T)*365/10^6, digits=1)\n      ),\n    #nb of waste water treatment plant\n    nb_WWTP = n(),\n    #capacity converted in million Population Equivalent\n    capacity = round(sum(capacity, na.rm = T)/10^6, digits=3)\n    )\n  return(basin)\n}\nbasin_N_P_seine_normandie &lt;- f_basin_flows(N_P_seine_normandie)\n\n\nf_basin_PE_flows &lt;- function(dataset){\n  basin &lt;- dataset %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      across(\n        c(\n          #incoming_flow\n          NGL_in, NTK_in, NO2_in, NO3_in,\n          Pt_in, DBO5_in, DCO_in, MES_in,\n          #outgoing_flow\n          NGL_out, NTK_out, NO2_out, NO3_out,\n          Pt_out, DBO5_out, DCO_out, MES_out\n        ),\n        ~signif(sum(.x, na.rm = T)*365/10^6, digits=3)\n      ),\n    #nb of waste water treatment plant\n    nb_WWTP = n(),\n    #capacity converted in million Population Equivalent\n    capacity = signif(sum(capacity, na.rm = T)/10^6, digits=3),\n    )\n  return(basin)\n}\nbasin_PE_N_P_seine_normandie &lt;- f_basin_PE_flows(N_P_seine_normandie)\n\n\nWe compute the nutrient ratios at the basin scale, and also by capacity categories.\n\n\nCode\n#have to do this in case 1 nutrient is more reported than the other, which would create a bia if we took the ratio of the already aggregated flows\nf_nutrient_ratio_basin &lt;- function(basin, dataset, nutrient1, nutrient2){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrient1))==F & is.na(!!as.symbol(nutrient2))==F\n      ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      nutrient_1 = sum(!!as.symbol(nutrient1), na.rm=T),\n      nutrient_2 = sum(!!as.symbol(nutrient2), na.rm=T),\n      ratio = signif(nutrient_1/nutrient_2, digits=3)\n    ) %&gt;%\n    select(-nutrient_1, -nutrient_2)\n  basin &lt;- left_join(\n    basin, temp, by=\"Year\"\n  )\n  return(basin)\n}\n\nf_nutrient_ratio_basin_PE &lt;- function(basin_PE, dataset, nutrient1, nutrient2){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrient1))==F & is.na(!!as.symbol(nutrient2))==F\n      ) %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      nutrient_1 = sum(!!as.symbol(nutrient1), na.rm=T),\n      nutrient_2 = sum(!!as.symbol(nutrient2), na.rm=T),\n      ratio = signif(nutrient_1/nutrient_2, digits=3)\n    ) %&gt;%\n    select(-nutrient_1, -nutrient_2)\n  basin_PE &lt;- left_join(\n    basin_PE, temp, by=c(\"Year\", \"PE_bin\")\n  )\n  return(basin_PE)\n}\n\nf_all_nutrient_ratios_basin &lt;- function(basin, dataset){\n  basin &lt;- basin %&gt;%\n    \n    #nutrient ratios\n    #N_P in\n    f_nutrient_ratio_basin(dataset, \"NGL_in\", \"Pt_in\") %&gt;%\n    rename(N_P_ratio_in = ratio) %&gt;%\n    #N_P out\n    f_nutrient_ratio_basin(dataset, \"NGL_out\", \"Pt_out\") %&gt;%\n    rename(N_P_ratio_out = ratio) %&gt;%\n    #DCO_DBO5 in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"DBO5_in\") %&gt;%\n    rename(DCO_DBO5_ratio_in = ratio) %&gt;%\n    #DCO_DBO5 out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"DBO5_out\") %&gt;%\n    rename(DCO_DBO5_ratio_out = ratio) %&gt;%\n    #DBO5_N in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"NGL_in\") %&gt;%\n    rename(DBO5_N_ratio_in = ratio) %&gt;%\n    #DBO5_N out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"NGL_out\") %&gt;%\n    rename(DBO5_N_ratio_out = ratio) %&gt;%\n    #DBO5_P in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"Pt_in\") %&gt;%\n    rename(DBO5_P_ratio_in = ratio) %&gt;%\n    #DBO5_P out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"Pt_out\") %&gt;%\n    rename(DBO5_P_ratio_out = ratio) %&gt;%\n    #DCO_N in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"NGL_in\") %&gt;%\n    rename(DCO_N_ratio_in = ratio) %&gt;%\n    #DCO_N out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"NGL_out\") %&gt;%\n    rename(DCO_N_ratio_out = ratio) %&gt;%\n    #DCO_P in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"Pt_in\") %&gt;%\n    rename(DCO_P_ratio_in = ratio) %&gt;%\n    #DCO_P out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"Pt_out\") %&gt;%\n    rename(DCO_P_ratio_out = ratio) %&gt;%\n    \n    #capacity ratios\n    #Pt_PE_in\n    f_nutrient_ratio_basin(dataset, \"Pt_in\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_in = ratio) %&gt;%\n    #Pt_PE_out\n    f_nutrient_ratio_basin(dataset, \"Pt_out\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_out = ratio) %&gt;%\n    #NGL_PE_in\n    f_nutrient_ratio_basin(dataset, \"NGL_in\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_in = ratio) %&gt;%\n    #NGL_PE_out\n    f_nutrient_ratio_basin(dataset, \"NGL_out\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_out = ratio) %&gt;%\n    #DBO5_PE_in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_in = ratio) %&gt;%\n    #DBO5_PE_out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_out = ratio) %&gt;%\n    #DCO_PE_in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_in = ratio) %&gt;%\n    #DCO_PE_out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_out = ratio) %&gt;%\n    #MES_PE_in\n    f_nutrient_ratio_basin(dataset, \"MES_in\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_in = ratio) %&gt;%\n    #MES_PE_out\n    f_nutrient_ratio_basin(dataset, \"MES_out\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_out = ratio) %&gt;%\n    \n    #convert from kg per PE per day to g per PE per day\n    mutate(\n      across(\n        c(\n          Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, DBO5_PE_ratio_in, DBO5_PE_ratio_out,\n          DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n        ), ~.x*1000 \n      )\n    )\n  return(basin)\n}\n\nf_all_nutrient_ratios_basin_PE &lt;- function(basin_PE, dataset){\n  basin_PE &lt;- basin_PE %&gt;%\n    \n    #nutrient ratios\n    #N_P in\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_in\", \"Pt_in\") %&gt;%\n    rename(N_P_ratio_in = ratio) %&gt;%\n    #N_P out\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_out\", \"Pt_out\") %&gt;%\n    rename(N_P_ratio_out = ratio) %&gt;%\n    #DCO_DBO5 in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"DBO5_in\") %&gt;%\n    rename(DCO_DBO5_ratio_in = ratio) %&gt;%\n    #DCO_DBO5 out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"DBO5_out\") %&gt;%\n    rename(DCO_DBO5_ratio_out = ratio) %&gt;%\n    #DBO5_N in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"NGL_in\") %&gt;%\n    rename(DBO5_N_ratio_in = ratio) %&gt;%\n    #DBO5_N out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"NGL_out\") %&gt;%\n    rename(DBO5_N_ratio_out = ratio) %&gt;%\n    #DBO5_P in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"Pt_in\") %&gt;%\n    rename(DBO5_P_ratio_in = ratio) %&gt;%\n    #DBO5_P out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"Pt_out\") %&gt;%\n    rename(DBO5_P_ratio_out = ratio) %&gt;%\n    #DCO_N in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"NGL_in\") %&gt;%\n    rename(DCO_N_ratio_in = ratio) %&gt;%\n    #DCO_N out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"NGL_out\") %&gt;%\n    rename(DCO_N_ratio_out = ratio) %&gt;%\n    #DCO_P in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"Pt_in\") %&gt;%\n    rename(DCO_P_ratio_in = ratio) %&gt;%\n    #DCO_P out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"Pt_out\") %&gt;%\n    rename(DCO_P_ratio_out = ratio) %&gt;%\n    \n    #capacity ratios\n    #Pt_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"Pt_in\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_in = ratio) %&gt;%\n    #Pt_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"Pt_out\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_out = ratio) %&gt;%\n    #NGL_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_in\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_in = ratio) %&gt;%\n    #NGL_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_out\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_out = ratio) %&gt;%\n    #DBO5_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_in = ratio) %&gt;%\n    #DBO5_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_out = ratio) %&gt;%\n    #DCO_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_in = ratio) %&gt;%\n    #DCO_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_out = ratio) %&gt;%\n    #MES_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"MES_in\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_in = ratio) %&gt;%\n    #MES_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"MES_out\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_out = ratio) %&gt;%\n    \n    #convert from kg per PE per day to g per PE per day\n    mutate(\n      across(\n        c(\n          Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, DBO5_PE_ratio_in, DBO5_PE_ratio_out,\n          DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n        ), ~.x*1000 \n      )\n    )\n  return(basin_PE)\n}\n\nbasin_N_P_seine_normandie &lt;- f_all_nutrient_ratios_basin(basin_N_P_seine_normandie, N_P_seine_normandie)\n\nbasin_PE_N_P_seine_normandie &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_seine_normandie, N_P_seine_normandie)\n\n\nWe compute the yields at the basin scale\n\n\nCode\n#have to do this in case inflow or outflow is more reported than the other one, which would create a bias if we took the ratio of the already aggregated flows\nf_yield_basin &lt;- function(basin, dataset, nutrientIN, nutrientOUT){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrientIN))==F & is.na(!!as.symbol(nutrientOUT))==F\n      ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      nutrient_in = sum(!!as.symbol(nutrientIN), na.rm=T),\n      nutrient_out = sum(!!as.symbol(nutrientOUT), na.rm=T),\n      yield = round((1-nutrient_out/nutrient_in)*100, digits = 0)\n    ) %&gt;%\n    select(-nutrient_in, -nutrient_out)\n  basin &lt;- left_join(\n    basin, temp, by=\"Year\"\n  )\n  return(basin)\n}\n\nf_yield_basin_PE &lt;- function(basin_PE, dataset, nutrientIN, nutrientOUT){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrientIN))==F & is.na(!!as.symbol(nutrientOUT))==F\n      ) %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      nutrient_in = sum(!!as.symbol(nutrientIN), na.rm=T),\n      nutrient_out = sum(!!as.symbol(nutrientOUT), na.rm=T),\n      yield = round((1-nutrient_out/nutrient_in)*100, digits = 0)\n    ) %&gt;%\n    select(-nutrient_in, -nutrient_out)\n  basin_PE &lt;- left_join(\n    basin_PE, temp, by=c(\"Year\", \"PE_bin\")\n  )\n  return(basin_PE)\n}\n\nf_all_yields_basin &lt;- function(basin, dataset){\n  basin &lt;- basin %&gt;%\n    #NGL yield\n    f_yield_basin(dataset, \"NGL_in\", \"NGL_out\") %&gt;%\n    rename(NGL_yield = yield) %&gt;%\n    #Pt yield\n    f_yield_basin(dataset, \"Pt_in\", \"Pt_out\") %&gt;%\n    rename(Pt_yield = yield) %&gt;%\n    #DBO5 yield\n    f_yield_basin(dataset, \"DBO5_in\", \"DBO5_out\") %&gt;%\n    rename(DBO5_yield = yield) %&gt;%\n    #DCO yield\n    f_yield_basin(dataset, \"DCO_in\", \"DCO_out\") %&gt;%\n    rename(DCO_yield = yield) %&gt;%\n    #MES yield\n    f_yield_basin(dataset, \"MES_in\", \"MES_out\") %&gt;%\n    rename(MES_yield = yield) \n  return(basin)\n}\n\nf_all_yields_basin_PE &lt;- function(basin_PE, dataset){\n  basin_PE &lt;- basin_PE %&gt;%\n    #NGL yield\n    f_yield_basin_PE(dataset, \"NGL_in\", \"NGL_out\") %&gt;%\n    rename(NGL_yield = yield) %&gt;%\n    #Pt yield\n    f_yield_basin_PE(dataset, \"Pt_in\", \"Pt_out\") %&gt;%\n    rename(Pt_yield = yield) %&gt;%\n    #DBO5 yield\n    f_yield_basin_PE(dataset, \"DBO5_in\", \"DBO5_out\") %&gt;%\n    rename(DBO5_yield = yield) %&gt;%\n    #DCO yield\n    f_yield_basin_PE(dataset, \"DCO_in\", \"DCO_out\") %&gt;%\n    rename(DCO_yield = yield) %&gt;%\n    #MES yield\n    f_yield_basin_PE(dataset, \"MES_in\", \"MES_out\") %&gt;%\n    rename(MES_yield = yield) \n  return(basin_PE)\n}\n\nbasin_N_P_seine_normandie &lt;- f_all_yields_basin(basin_N_P_seine_normandie, N_P_seine_normandie)\n\nbasin_PE_N_P_seine_normandie &lt;- f_all_yields_basin_PE(basin_PE_N_P_seine_normandie, N_P_seine_normandie)\n\n\nWe create the years categories (every 5 years).\n\n\nCode\nf_year_categories &lt;- function(dataset){\n  dataset &lt;- dataset %&gt;%\n    mutate(\n      Year_category = case_when(\n        Year %in% c(1991, 1992, 1993, 1994, 1995) ~ \"1991-1995\",\n        Year %in% c(1996, 1997, 1998, 1999, 2000) ~ \"1996-2000\",\n        Year %in% c(2001, 2002, 2003, 2004, 2005) ~ \"2001-2005\",\n        Year %in% c(2006, 2007, 2008, 2009, 2010) ~ \"2006-2010\",\n        Year %in% c(2011, 2012, 2013, 2014, 2015) ~ \"2011-2015\",\n        Year %in% c(2016, 2017, 2018, 2019, 2020) ~ \"2016-2020\",\n      )\n    )\n  return(dataset)\n}\n\nN_P_seine_normandie &lt;- f_year_categories(N_P_seine_normandie)\nbasin_N_P_seine_normandie &lt;- f_year_categories(basin_N_P_seine_normandie)\nbasin_PE_N_P_seine_normandie &lt;- f_year_categories(basin_PE_N_P_seine_normandie)\n\n#change 0 in empty values for basins files\n\nbasin_N_P_seine_normandie[basin_N_P_seine_normandie == 0] &lt;- NA\nbasin_PE_N_P_seine_normandie[basin_PE_N_P_seine_normandie == 0] &lt;- NA\n\n\nWe compute the yields and ratios for each WWTP.\n\n\nCode\nN_P_seine_normandie &lt;- N_P_seine_normandie %&gt;%\n  mutate(\n    #yields\n    Pt_yield = (1-Pt_out/Pt_in)*100,\n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    DBO5_yield =(1-DBO5_out/DBO5_in)*100, \n    DCO_yield =(1-DCO_out/DCO_in)*100,\n    MES_yield =(1-MES_out/MES_in)*100,\n    #ratios\n    N_P_ratio_in = NGL_in/Pt_in,\n    N_P_ratio_out = NGL_in/Pt_out,\n    DCO_DBO5_ratio_in = DCO_in/DBO5_in,\n    DCO_DBO5_ratio_out = DCO_out/DBO5_out,\n    DBO5_NGL_ratio_in = DBO5_in/NGL_in,\n    DBO5_NGL_ratio_out = DBO5_out/NGL_out,\n    DBO5_Pt_ratio_in = DBO5_in/Pt_in,\n    DBO5_Pt_ratio_out = DBO5_out/Pt_out\n  )\n\n\n\n\nIn the SIAAP files, we do not have the inflows of NO2 and NO3. This is not really important, since the oxidised forms of N are negligible in the sewer network.\nIncoming flows are made of A2 and A3 points, but A2 is generally negligible (~1% of A3). Outgoing flow is the A4 point. More info on this points here.\nBefore 2007, NGL is not reported. We could yet compute the inflow P/N ratio, since in the inflow NGL is almost equal to NTK. This approximation can not be done for the outflow where NO3 and NO2 are not negligible.\nWe load the file with the aggregated values of SIAAP for 2001-2014. Careful, the flows are in tons per day in the original file.\n\n\nCode\npath_source &lt;- \"source_data/03_seine_normandie/SIAAP/\"\nfile_basin_SIAAP_2001_2015 &lt;- readxl::read_excel(paste(path_source, \"SIAAP_bilan_annuel_basin.xlsx\", sep=\"\"))\n#we convert the basin flows from t/d to kt/y\nbasin_N_P_SIAAP_2001_2015 &lt;- file_basin_SIAAP_2001_2015 %&gt;%\n  mutate(\n    #convert into kt per year\n    across(\n      c(NGL_in, NTK_in, Pt_in, DBO5_in, DCO_in, MES_in,\n        NGL_out, NTK_out, Pt_out, DBO5_out, DCO_out, MES_out), \n      ~signif(.x*365/10^3, 3) #now in kt per year\n    ),\n    #when unavailable approximate NGL_in by NTK_in\n    NGL_in = case_when(\n      is.na(NGL_in) ~ NTK_in,\n      T ~ NGL_in\n    )\n  ) %&gt;%\n  #capacity\n  mutate(\n    capacity = case_when(\n      Year&gt;=2018~(7500000 + 3600000 + 1212000 + 900000 + 550000 + 320000)/10^6, #seine grésillons at 1212000\n      Year&lt;2018 & Year &gt;=2014~(7500000 + 3600000 + 371666 + 900000 + 550000 + 320000)/10^6, #seine grésillons at 371666\n      Year&lt;2014 & Year &gt;=2007~(7500000 + 3600000 + 371666 + 900000 + 550000)/10^6, #seine morée does not exist\n      Year &lt;2007~(7500000 + 3600000 + 900000 + 550000)/10^6 #seine morée and seine grésillon do not exist\n      #see here the dates https://www.siaap.fr/former-transmettre/mieux-comprendre-lassainissement/initiation/en-ile-de-france/\n    ),\n    capacity = signif(capacity, 3),\n    nb_WWTP = case_when(\n      Year&gt;=2014~6,\n      Year&lt;2014 & Year &gt;=2007~5, #seine morée does not exist\n      Year &lt;2007~4 #seine morée and seine grésillon do not exist\n    )\n  ) %&gt;%\n  #round yields\n  mutate(\n    across(\n      c(NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield),\n      ~round(.x, 0)\n    )\n  ) %&gt;%\n  mutate(\n    #nutrient ratios\n    N_P_ratio_in = signif(NGL_in/Pt_in, 3),\n    N_P_ratio_out = signif(NGL_out/Pt_out, 3),\n    DCO_DBO5_ratio_in = signif(DCO_in/DBO5_in, 3),\n    DCO_DBO5_ratio_out = signif(DCO_out/DBO5_out, 3),\n    DBO5_N_ratio_in = signif(DBO5_in/NGL_in, 3),\n    DBO5_N_ratio_out = signif(DBO5_out/NGL_out, 3),\n    DBO5_P_ratio_in = signif(DBO5_in/Pt_in, 3),\n    DBO5_P_ratio_out = signif(DBO5_out/Pt_out, 3),\n    DCO_N_ratio_in = signif(DCO_in/NGL_in, 3),\n    DCO_N_ratio_out = signif(DCO_out/NGL_out, 3),\n    DCO_P_ratio_in = signif(DCO_in/Pt_in, 3),\n    DCO_P_ratio_out = signif(DCO_out/Pt_out, 3),\n    #nutrient capacity ratios (converted from kg/y/PE to g/day/PE)\n    Pt_PE_ratio_in = signif(Pt_in/capacity*1000/365, 3),\n    Pt_PE_ratio_out = signif(Pt_out/capacity*1000/365, 3),\n    NGL_PE_ratio_in = signif(NGL_in/capacity*1000/365, 3),\n    NGL_PE_ratio_out = signif(NGL_out/capacity*1000/365, 3),\n    DBO5_PE_ratio_in = signif(DBO5_in/capacity*1000/365, 3),\n    DBO5_PE_ratio_out = signif(DBO5_out/capacity*1000/365, 3),\n    DCO_PE_ratio_in = signif(DCO_in/capacity*1000/365, 3),\n    DCO_PE_ratio_out = signif(DCO_out/capacity*1000/365, 3),\n    MES_PE_ratio_in = signif(MES_in/capacity*1000/365, 3),\n    MES_PE_ratio_out = signif(MES_out/capacity*1000/365, 3)\n  )\n\n\nWe load the file with individual station values for 2015-2021, and agregate the flows at the SIAAP scale.\n\n\nCode\nfile_SIAAP_2015_2021 &lt;- readxl::read_excel(paste(path_source, \"Synthese 2015-2021 copy.xlsx\", sep=\"\"), sheet = \"Exctracted A181 T237\")\nN_P_SIAAP_2015_2021 &lt;- file_SIAAP_2015_2021 %&gt;% \n  select(\n    name_WWTP = STEU,\n    Year = Date, \n    water_flow = `A2+A3.Volume journalier m3/j`,\n    NTK_in = `A2+A3.NTK t/j`,\n    NH4_in = `A2+A3.NH4 t/j`,\n    PO4_in = `A2+A3.PO4 t/j`,\n    Pt_in = `A2+A3.Ptot t/j`,\n    DBO5_in = `A2+A3.DBO5 t/j` ,\n    DCO_in = `A2+A3.DCO t/j`,\n    MES_in = `A2+A3.MES t/j`,\n    NGL_out = `A4.NGL t/j`,\n    NTK_out = `A4.NTK t/j`,\n    NH4_out = `A4.NH4 t/j`,\n    PO4_out = `A4.PO4 t/j`,\n    Pt_out = `A4.Ptot t/j`,\n    NO2_out = `A4.NO2 t/j`,\n    NO3_out = `A4.NO3 t/j`,\n    DBO5_out = `A4.DBO5 t/j`,\n    DCO_out = `A4.DCO t/j`,\n    MES_out = `A4.MES t/j`,\n  ) %&gt;%\n  mutate(\n    #we add the ID code of the WWTP\n    code_WWTP = case_when(\n      name_WWTP == \"SAV\" ~ \"037800501000\", #seine aval\n      name_WWTP == \"SEV\" ~ \"039407401000\", #seine amont \n      name_WWTP == \"SEC\" ~ \"039202501000\", #seine-centre\n      name_WWTP == \"SEG\" ~ \"037862401000\", #seine grésillons\n      name_WWTP == \"MAV\" ~ \"039305101000\", #marne aval\n      name_WWTP == \"SEM\" ~ \"039300701000\" #seine morée\n    ),\n    #we add the capacities\n    capacity = case_when(\n      name_WWTP == \"SAV\" ~ 7500000, #seine aval\n      name_WWTP == \"SEV\" ~ 3600000, #seine amont\n      name_WWTP == \"SEG\" ~ 1212000, #seine grésillons\n      name_WWTP == \"SEC\" ~ 900000, #seine-centre\n      name_WWTP == \"MAV\" ~ 550000, #marne aval\n      name_WWTP == \"SEM\" ~ 320000 #seine morée\n    )\n  ) %&gt;%\n  mutate(\n    #NGL\n    NGL_in = NTK_in, # approximation because NO negligible\n    #yields\n    NGL_yield = round((1-NGL_out/NGL_in)*100, 0),\n    Pt_yield = round((1-Pt_out/Pt_in)*100, 0),\n    DBO5_yield = round((1-DBO5_out/DBO5_in)*100, 0),\n    DCO_yield = round((1-DCO_out/DCO_in)*100, 0),\n    MES_yield = round((1-MES_out/MES_in)*100, 0),\n    #ratios\n    N_P_ratio_in = signif(NGL_in/Pt_in, 3),\n    N_P_ratio_out = signif(NGL_out/Pt_out, 3),\n    DCO_DBO5_ratio_in = signif(DCO_in/DBO5_in, 3),\n    DCO_DBO5_ratio_out = signif(DCO_out/DBO5_out, 3),\n    DBO5_N_ratio_in = signif(DBO5_in/NGL_in, 3),\n    DBO5_N_ratio_out = signif(DBO5_out/NGL_out, 3),\n    DBO5_P_ratio_in = signif(DBO5_in/Pt_in, 3),\n    DBO5_P_ratio_out = signif(DBO5_out/Pt_out, 3),\n    DCO_N_ratio_in = signif(DCO_in/NGL_in, 3),\n    DCO_N_ratio_out = signif(DCO_out/NGL_out, 3),\n    DCO_P_ratio_in = signif(DCO_in/Pt_in, 3),\n    DCO_P_ratio_out = signif(DCO_out/Pt_out, 3),\n    #nutrient capacity ratios\n    Pt_PE_ratio_in = signif(Pt_in/capacity*1000/365, 3),\n    Pt_PE_ratio_out = signif(Pt_out/capacity*1000/365, 3),\n    NGL_PE_ratio_in = signif(NGL_in/capacity*1000/365, 3),\n    NGL_PE_ratio_out = signif(NGL_out/capacity*1000/365, 3),\n    DBO5_PE_ratio_in = signif(DBO5_in/capacity*1000/365, 3),\n    DBO5_PE_ratio_out = signif(DBO5_out/capacity*1000/365, 3),\n    DCO_PE_ratio_in = signif(DCO_in/capacity*1000/365, 3),\n    DCO_PE_ratio_out = signif(DCO_out/capacity*1000/365, 3),\n    MES_PE_ratio_in = signif(MES_in/capacity*1000/365, 3),\n    MES_PE_ratio_out = signif(MES_out/capacity*1000/365, 3)\n  ) %&gt;%\n  #we convert the flows of the WWTP in kg/day, in order to have same format as the other basins\n  mutate(\n    across(\n      c(\n        NGL_in, NTK_in, NH4_in, PO4_in, Pt_in, DBO5_in, DCO_in, MES_in, \n        NGL_out, NTK_out, NH4_out, NO2_out, NO3_out, PO4_out, Pt_out, DBO5_out, DCO_out, MES_out\n      )\n      , ~round(.x*10^3, 0)\n    )\n  )\n\n\nWe merge the 2 files\n\n\nCode\n# summarising the 5 plants, and converting in kt/y\nbasin_N_P_SIAAP_2015_2021 &lt;- N_P_SIAAP_2015_2021 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    across(\n      c(NGL_in, NTK_in, NH4_in, \n        PO4_in, Pt_in, DBO5_in, DCO_in, MES_in,\n        NGL_out, NTK_out, NH4_out, NO2_out, NO3_out, \n        PO4_out, Pt_out, DBO5_out, DCO_out, MES_out), \n      ~ sum(.x, na.rm=T)*365/10^6\n    ),\n    capacity = sum(capacity, na.rm=T)/10^6\n  ) %&gt;%\n  mutate(\n    #yields\n    NGL_yield = round((1-NGL_out/NGL_in)*100, 0),\n    Pt_yield = round((1-Pt_out/Pt_in)*100, 0),\n    DBO5_yield = round((1-DBO5_out/DBO5_in)*100, 0),\n    DCO_yield = round((1-DCO_out/DCO_in)*100, 0),\n    MES_yield = round((1-MES_out/MES_in)*100, 0),\n    #ratios\n    N_P_ratio_in = signif(NGL_in/Pt_in, 3),\n    N_P_ratio_out = signif(NGL_out/Pt_out, 3),\n    DCO_DBO5_ratio_in = signif(DCO_in/DBO5_in, 3),\n    DCO_DBO5_ratio_out = signif(DCO_out/DBO5_out, 3),\n    DBO5_N_ratio_in = signif(DBO5_in/NGL_in, 3),\n    DBO5_N_ratio_out = signif(DBO5_out/NGL_out, 3),\n    DBO5_P_ratio_in = signif(DBO5_in/Pt_in, 3),\n    DBO5_P_ratio_out = signif(DBO5_out/Pt_out, 3),\n    DCO_N_ratio_in = signif(DCO_in/NGL_in, 3),\n    DCO_N_ratio_out = signif(DCO_out/NGL_out, 3),\n    DCO_P_ratio_in = signif(DCO_in/Pt_in, 3),\n    DCO_P_ratio_out = signif(DCO_out/Pt_out, 3),\n    #nutrient capacity ratios\n    Pt_PE_ratio_in = signif(Pt_in/capacity*1000/365, 3),\n    Pt_PE_ratio_out = signif(Pt_out/capacity*1000/365, 3),\n    NGL_PE_ratio_in = signif(NGL_in/capacity*1000/365, 3),\n    NGL_PE_ratio_out = signif(NGL_out/capacity*1000/365, 3),\n    DBO5_PE_ratio_in = signif(DBO5_in/capacity*1000/365, 3),\n    DBO5_PE_ratio_out = signif(DBO5_out/capacity*1000/365, 3),\n    DCO_PE_ratio_in = signif(DCO_in/capacity*1000/365, 3),\n    DCO_PE_ratio_out = signif(DCO_out/capacity*1000/365, 3),\n    MES_PE_ratio_in = signif(MES_in/capacity*1000/365, 3),\n    MES_PE_ratio_out = signif(MES_out/capacity*1000/365, 3)\n  )\n\nbasin_N_P_SIAAP &lt;- \n  bind_rows(\n    basin_N_P_SIAAP_2015_2021, \n    basin_N_P_SIAAP_2001_2015\n    )\nrm(basin_N_P_SIAAP_2001_2015)\nrm(basin_N_P_SIAAP_2015_2021)\nbasin_N_P_SIAAP$NO2_in &lt;- NA\n\n# All SIAAP WWTTP capacity are &gt; 100 000 PE\nbasin_PE_N_P_SIAAP &lt;- basin_N_P_SIAAP %&gt;%\n  mutate(PE_bin = \"&gt; 100 000 PE\")\nN_P_SIAAP_2015_2021$PE_bin &lt;- \"&gt; 100 000 PE\"\n\n\nWe add the years categories\n\n\nCode\nN_P_SIAAP_2015_2021 &lt;- f_year_categories(N_P_SIAAP_2015_2021)\nbasin_N_P_SIAAP &lt;- f_year_categories(basin_N_P_SIAAP)\nbasin_PE_N_P_SIAAP &lt;- f_year_categories(basin_PE_N_P_SIAAP)\n\n\nThe data before 2015 comprises only 5 stations ; after 2015 there are 6. But the unreported station before 2015 is negligible. Before 2015 we only have aggregated flows of the 5 stations.\n\n\nCode\nN_P_SIAAP_2015_2021$name_WWTP &lt;- \n  reorder(N_P_SIAAP_2015_2021$name_WWTP, N_P_SIAAP_2015_2021$DBO5_in)\n\nggplot(N_P_SIAAP_2015_2021) + \n  geom_line(\n    data=basin_N_P_SIAAP, \n    aes(\n      Year, NGL_in\n      ),\n    linetype=\"dashed\"\n    ) +\n  geom_area(\n    aes(\n      Year, NGL_in*365/10^6, fill=name_WWTP\n      ),\n    alpha=.8\n    ) +\n  labs(\n    x=\"\", y=\"incoming NGL (kt per year)\",\n    title = \"Incoming NGL flows for the 6 SIAAP WWTPs\",\n    subtitle = \"before 2015, SEM (Seine-Morée) is not reported\\nbut it is negligible\",\n    caption = Source\n  ) +\n  xlim(2000, 2021)\n\n\n\n\n\n\n\n\n\n\nComparison basin and SIAAP flows\nFor Pt, NGL, NTK, DBO5, DCO and MES we are able to compare the SIAAP data to the punctual Years data of the Seine-Normandie basin. SIAAP typically treats about half of the basin incoming pollution. The 2 datasets are coherent, except on year 2014, which we remove.\n\n\nCode\n#changing the graph function to change the subtitle (before data cleaning =&gt; after data cleaning)\nf_graph_nutrient &lt;- function(dataset, nutrient_in, nutrient_out, label, legend_x, legend_y){\n  p &lt;- ggplot(dataset) + \n    #nutrient inflow\n    geom_line(\n      aes(\n        Year, \n        !!as.symbol(nutrient_in), \n        color=nutrient_in\n        )\n      ) + \n    #nutrient outflow\n    geom_line(\n      aes(\n        Year,\n        !!as.symbol(nutrient_out), \n        color = nutrient_out\n        )\n      ) +\n    ylim(0, NA) +\n    theme(\n      legend.position = c(legend_x, legend_y), \n      legend.title = element_blank()\n      ) +\n    labs(\n      x=\"\", y=paste(\"kt of\", label) , \n      title = paste(\"Reported\", label, \"flows in SIAAP WWTPs\") ,\n      subtitle = \"reported, not necessarily actual ; here after data cleaning\", \n      caption = Source\n      ) \n  return(p)\n}\n\n\n\n\nCode\nN_P_seine_normandie &lt;- N_P_seine_normandie %&gt;%\n  mutate(\n    is_SIAAP = case_when(\n      code_WWTP %in% c(\"037800501000\", \"039407401000\",\"039202501000\", \"037862401000\", \"039305101000\", \"039300701000\") ~ \"SIAAP\",\n      T ~ \"not SIAAP\"\n    )\n  )\n\n\n\n\nCode\nf_graph_comparison &lt;- function(dataset_basin, dataset_SIAAP, nutrient_in, nutrient_out, label_nutrient, y_max){\n  g &lt;- plot_grid(\n    ggplot(dataset_SIAAP) + \n      geom_col(\n        data = dataset_basin, \n        aes(Year, !!as.symbol(nutrient_in)*365/10^6, fill=is_SIAAP),\n        alpha = .8\n        ) +\n      geom_line(aes(Year, !!as.symbol(nutrient_in))) +\n      theme(\n        legend.position = \"none\"\n      ) +\n      ylim(0, y_max) +\n      labs(\n        x=\"\", y=\"kt per year\",\n        title = paste(label_nutrient, \"flows in Seine-Normandie WWTP\"),\n        subtitle = \"comparison of SIAAP data (line) and basin data for 2015\",\n        fill=\"\",\n        caption = \"\"\n      ),\n    ggplot(dataset_SIAAP) + \n      geom_col(\n        data = dataset_basin, \n        aes(Year, !!as.symbol(nutrient_out)*365/10^6, fill=is_SIAAP),\n        alpha = .8\n        ) +\n      geom_line(aes(Year, !!as.symbol(nutrient_out))) +\n      theme(\n        legend.position = c(0.5, 0.8)\n      ) +\n      ylim(0, y_max) +\n      labs(\n        x=\"\", y=\"\",\n        title = \"\",\n        subtitle = \"\",\n        fill=\"\",\n        caption = \"\"\n      )\n  )\n  return(g)\n}\n\n\n\nNGLNTKPtDBO5DCOMESPO4NH4NO2 outNO3 out% NH4 / NTK% PO4 / PtAll NCorrection\n\n\n\n\nCode\nf_graph_comparison(N_P_seine_normandie, basin_N_P_SIAAP, \"NGL_in\", \"NGL_out\", \"NGL\", 80)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(N_P_seine_normandie, basin_N_P_SIAAP, \"NTK_in\", \"NTK_out\", \"NTK\", 80)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(N_P_seine_normandie, basin_N_P_SIAAP, \"Pt_in\", \"Pt_out\", \"Pt\", 10)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(N_P_seine_normandie, basin_N_P_SIAAP, \"DBO5_in\", \"DBO5_out\", \"DBO5\", 350)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(N_P_seine_normandie, basin_N_P_SIAAP, \"DCO_in\", \"DCO_out\", \"DCO\", 800)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_comparison(N_P_seine_normandie, basin_N_P_SIAAP, \"MES_in\", \"MES_out\", \"MES\", 450)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(basin_N_P_SIAAP, \"PO4_in\", \"PO4_out\", \"PO4\", 0.7, 0.5) +\n  xlim(2015, 2020)\n\n\n\n\n\n\n\nNot ravailable before 2015.\n\n\nCode\nf_graph_nutrient(basin_N_P_SIAAP, \"NH4_in\", \"NH4_out\", \"NH4\", 0.7, 0.5) +\n  xlim(2015, 2020)\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_SIAAP) +\n  geom_line(aes(Year, NO2_out)) + \n  ylim(0, NA) +\n  labs(\n    x=\"\", y=\"kt per year\", \n    title = paste(\"Reported outflows in SIAAP WWTPs\") ,\n    subtitle = \"reported, not necessarily actual ; here after data cleaning\", \n    caption = Source\n    ) \n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_SIAAP) +\n  geom_line(aes(Year, NO3_out)) + \n  ylim(0, NA) +\n  labs(\n    x=\"\", y=\"kt per year\", \n    title = paste(\"Reported outflows in SIAAP WWTPs\") ,\n    subtitle = \"reported, not necessarily actual ; here after data cleaning\", \n    caption = Source\n    ) \n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_SIAAP) +\n  geom_line(aes(Year, NH4_in/NTK_in*100, color=\"inflow\")) +\n  geom_line(aes(Year, NH4_out/NTK_out*100, color=\"outflow\")) +\n  xlim(2015, 2020) +\n  ylim(0, 100) +\n  labs(\n    x=\"\", y=\"%\", caption = Source,\n    title = \"% of NH4 in NTK\",\n    color=\"\"\n  ) +\n  theme(\n    legend.position = c(0.8, 0.6)\n  )\n\n\n\n\n\n\n\nvérifier qu’on en garde que ceux qui ont les 2\n\n\nCode\nggplot(basin_N_P_SIAAP) +\n  geom_line(aes(Year, PO4_in/Pt_in*100, color=\"inflow\")) +\n  geom_line(aes(Year, PO4_out/Pt_out*100, color=\"outflow\")) +\n  xlim(2015, 2020) +\n  ylim(0, 100) +\n  labs(\n    x=\"\", y=\"%\", caption = Source,\n    title = \"% of PO4 in Pt\",\n    color=\"\"\n  ) +\n  theme(\n    legend.position = c(0.8, 0.6)\n  )\n\n\n\n\n\n\n\n\n\nCode\n# N in data preparation\ntemp &lt;- basin_N_P_SIAAP %&gt;% select(Year, NTK = NTK_in) %&gt;%\n  mutate(NO2 = 0, NO3 = 0) %&gt;%\n  gather(key = N_type, value = kt, NTK, NO2, NO3)\n# N out preaparation\ntemp2 &lt;- basin_N_P_SIAAP %&gt;% \n  #renaming for the legend\n  select(Year, NTK=NTK_out, NO2=NO2_out, NO3=NO3_out) %&gt;%\n  gather(key = N_type, value = kt, NTK, NO2, NO3)\n\n#graphs\nplot_grid(\n  ggplot(temp) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_SIAAP, \n      aes(\n        Year, NH4_in\n        ),\n      linetype=\"dashed\"\n      ) +\n    geom_line(\n      data = basin_N_P_SIAAP, \n      aes(\n        Year, NGL_in\n        )\n      ) +\n    theme(legend.position = \"none\") +\n    annotate(\"text\", x=2013, y=27, label=\"NH4\") +\n    labs(\n      x=\"\", y=\"kt of N\", \n      title = \"Reported N flows in SIAAP WWTPs\",\n      subtitle = \"Inflows\",\n      caption=\"\"\n    ) +\n    ylim(0, 50),\n  ggplot(temp2) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_SIAAP, \n      aes(\n        Year, NH4_out\n        ),\n      linetype=\"dashed\"\n      ) +\n    geom_line(\n      data = basin_N_P_SIAAP, \n      aes(\n        Year, NGL_out\n        )\n      ) +\n    theme(\n      legend.position = c(0.6, 0.8), \n      legend.title = element_blank()\n      ) +\n    annotate(\n      \"text\", label=\"NH4\", \n      x=2013, y=4\n      ) +\n    labs(\n      x=\"\", y=\"\", \n      title = \"\",\n      subtitle = \"Outflows\",\n      caption=Source\n    ) + \n    ylim(0, 50),\n  align = \"hv\"\n)\n\n\n\n\n\n\n\nWe remove the year 2014.\n\n\nCode\nN_P_seine_normandie &lt;- N_P_seine_normandie %&gt;%\n  filter(Year!=2014)\nbasin_N_P_seine_normandie &lt;- basin_N_P_seine_normandie %&gt;%\n  filter(Year!=2014)\nbasin_PE_N_P_seine_normandie &lt;- basin_PE_N_P_seine_normandie %&gt;%\n  filter(Year!=2014)\n\n\n\n\n\n\n\nCapacity\n\n\nCode\ntest &lt;- N_P_seine_normandie %&gt;%\n  filter(is_SIAAP==\"SIAAP\")\n\n\n\nSIAAP and basin comparisonLarge categoriesHistogramCumulative distribution\n\n\n\n\nCode\nplot_grid(\n  ggplot(basin_N_P_SIAAP) +\n    geom_line(aes(Year, capacity)) +\n    geom_col(data = N_P_seine_normandie, aes(Year, capacity/10^6, fill = is_SIAAP)) +\n    theme(legend.position = c(0.3, 0.8)) +\n    labs(\n      x=\"\", y=\"million PE\",\n      title = \"Comparison of SIAAP and Seine-Normandie\",\n      subtitle = \"capacity. line: SIAAP ; column: whole basin\",\n      caption = \"\\n\",\n      fill=\"\"\n    ),\n  ggplot(basin_N_P_SIAAP) +\n    geom_bar(aes(as.factor(Year))) +\n    geom_bar(data = N_P_seine_normandie, aes(as.factor(Year), fill = is_SIAAP)) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", y=\"number of facilities: only 6 in SIAAP\",\n      title = \"\",\n      subtitle = \"\",\n      caption = Source,\n      fill=\"\"\n    )\n)\n\n\n\n\n\n\n\nAbout half of the total capacity is from WWTP larger than 100 000 population equivalent. About 80-90% is dut to WWTP larger than 10 000 population equivalent.\n\n\nCode\ntemp &lt;- N_P_seine_normandie %&gt;%\n  filter(is.na(capacity)==F) %&gt;%\n  select(Year, capacity, PE_bin) %&gt;%\n  group_by(Year, PE_bin) %&gt;%\n  summarise(\n    `capacity (million PE)` = sum(capacity)/10^6,\n    `number of stations` = n()\n  ) %&gt;% \n  gather(key=capacity_or_n, value = value, `capacity (million PE)`, `number of stations`)\n\n\n\nAbsoluteRelative\n\n\n\n\nCode\nggplot(temp) + \n  geom_col(aes(as.factor(Year), value, fill=PE_bin), alpha=.8) + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"For each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) + \n  geom_col(aes(as.factor(Year), value, fill=PE_bin), position = \"fill\", alpha=.8) + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"Proportion of each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_seine_normandie %&gt;% filter(Year==Year_analysis)\nggplot(temp) + \n  geom_histogram(\n    aes(\n      capacity, \n      fill = \"Nb of facilities\"\n      ), \n    n=100, alpha=.4, stat=\"density\"\n    ) +\n  geom_histogram(\n    aes(\n      capacity, weight = capacity, \n      fill=\"Nb of facilities weighted by capacity\"\n      ), \n    n=100, alpha=.4, stat=\"density\"\n    ) +\n  theme(\n    legend.position = c(0.7,0.8),\n  ) +\n  labs(\n    x=\"Waste Water Treatment Plant Capacity \\n(Population Equivalent)\",\n    y=\"Distribution density\",\n    fill=\"Distribution of\",\n    title = paste(\"WWTP capacities distribution\", as.character(Year_analysis)),\n    subtitle = \"raw or weighted by capacity\"\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    )\n\n\n\n\n\n\n\nAbout 1% of the WWTP represent 25% of the total capacity ; 4% represent 50% of the capacity ; 10% represent 75%%\n\n\nCode\ntemp &lt;- N_P_seine_normandie %&gt;% \n  ungroup() %&gt;%\n  filter(Year==Year_analysis) %&gt;% \n  select(code_WWTP, name_WWTP, capacity) %&gt;%\n  filter(is.na(capacity) == F) %&gt;%\n  arrange(desc(capacity)) %&gt;%\n  mutate( \n    cumulative_capacity = cumsum(capacity)/10^6,\n    rank_STEU = rank(-capacity, ties.method = \"first\"),\n    percent_cumulative_capacity = round(cumulative_capacity/sum(capacity/10^6)*100, digits = 1),\n    percent_rank = round(rank_STEU/n()*100, digits = 1)\n    ) \nf_save_csv_files(\n  temp %&gt;% mutate(basin = \"Seine-Normandie\"),\n  \"output_data/zipf_law/\",\n  \"zipf_law_03_seine_normandie.csv\"\n)\ncoef &lt;- max(temp$rank_STEU)/100\ncoef2 &lt;- max(temp$cumulative_capacity)/100\n\n\n\nNb of WWTPs vs Capacity (linear scale)Nb of WWTPs vs Capacity (log scale)Zipf law\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(\n      x = percent_rank, y = percent_cumulative_capacity\n      )\n    ) + \n  labs(\n    title = paste(\"Cumulative distribution,\", Year_analysis),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) +\n  scale_x_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions PE)\"\n        )\n    ) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(\n      x = percent_rank, y = percent_cumulative_capacity\n      )\n    ) + \n  labs(\n    title = paste(\"Cumulative distribution,\", Year_analysis),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, \n        name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions Population Equivalent)\"\n        )\n    ) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_point(\n    aes(\n      x = rank_STEU, y = capacity\n      )\n    ) + \n  labs(\n    title = paste(\"WWTP capacity vs rank,\", Year_analysis),\n    subtitle = \"looking for a Zipf law\",\n    x=\"Waste Water Treatment Plant \\n(ranked by capacity)\",\n    y=\" Waste Water Treatment Plant capacity\\n(Population Equivalent)\"\n    ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    ) + \n  scale_y_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\nPollution Flows\n\nData Quality : reporting ratesReal flow extrapolation\n\n\n\n\nCode\n#function for plots : to be finished\nf_graph_reporting_nutrients &lt;- function(pollution_in, pollution_out){\n  temp &lt;- N_P_seine_normandie %&gt;%\n    select(\n      Year, capacity, \n      !!as.symbol(pollution_in), !!as.symbol(pollution_out)\n      ) %&gt;%\n    mutate(\n      nutrient_in = is.na(!!as.symbol(pollution_in))==F,\n      nutrient_out = is.na(!!as.symbol(pollution_out))==F\n      ) %&gt;%\n    gather(\n      key=in_out_flow, \n      value = `reported pollution`, \n      nutrient_in, nutrient_out\n      ) %&gt;%\n    group_by(\n      Year, in_out_flow, `reported pollution`\n      ) %&gt;%\n    summarise(\n      `number of WWTP`=n(), \n      `capacity (million PE)` = sum(capacity, na.rm=T)/10^6\n      ) %&gt;%\n    gather(\n      key=n_or_capacity, \n      value = value, \n      `number of WWTP`, `capacity (million PE)`\n      ) %&gt;%\n    #renaming labels\n    mutate(\n      in_out_flow = case_when(\n        in_out_flow == \"nutrient_in\" ~ pollution_in,\n        in_out_flow == \"nutrient_out\" ~ pollution_out,\n      )\n    )\n\n  g &lt;- ggplot(temp) +\n    geom_col(aes(as.factor(Year), value, fill=`reported pollution`)) +\n    facet_grid(\n      n_or_capacity~in_out_flow, \n      scales=\"free_y\", switch = \"y\") +\n    labs(\n      y=\"\", x=\"\",\n      title = \"Reporting of nutrient inflows (left) and outflows (right)\",\n      subtitle = \"In terms of total capacity (top) and nb of WWTP (bottom)\",\n      caption = Source\n      ) \n\n  return(g)\n}\n\n\nPt, NTK, DBO5, DCO and MES pollution are reported for virtually all the capacity Ony NGL is not always reportedin 2015. When NGL in was not reported we approximate it with NTK in, so there is no problem. The only remaining issue is for NGL out, when both NTK out and NO3 out are not reported, which is the case for most WWTP but only for a small portion of the total capacity.\n\nNGLNTKNO2NO3PtDBO5DCOMES\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NGL_in\", \"NGL_out\") \n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NTK_in\", \"NTK_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NO2_in\", \"NO2_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NO3_in\", \"NO3_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"Pt_in\", \"Pt_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"DBO5_in\", \"DBO5_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"DCO_in\", \"DCO_out\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"MES_in\", \"MES_out\")\n\n\n\n\n\n\n\n\n\n\n\nCoefficient calculationNGL out\n\n\nFor Pt, NTK, DBO5, DCO and MES we do not adjust the flows. Same for incoming NGL.\nWe compute in terms of installed capacity the reported and unreported flows for NGL out. We do this for each capacity category.\n\n\nCode\n#create file of reported \ntemp &lt;- N_P_seine_normandie %&gt;%\n  select(\n    Year, PE_bin, capacity, NGL_out\n    ) %&gt;%\n  #spots unreported values for each nutrient flow\n  mutate(NGL_out = is.na(NGL_out)==F) %&gt;%\n  #gather to ba able to then group by flow and count capacity\n  gather(key=nutrient_flow, value = reported_pollution, NGL_out)  %&gt;%\n  #count reported capacity and unreported capacity for each (Year, capacity category, nutrient flow)\n  group_by(Year, PE_bin, nutrient_flow, reported_pollution) %&gt;%\n  summarise(capacity = sum(capacity, na.rm=T)/10^6) %&gt;%\n  #creates reported/unreported names for each nutrient flow and spreads into columns\n  mutate(\n    nutrient_flow = case_when(\n      reported_pollution == T ~ paste0(nutrient_flow, \"_reported\"),\n      reported_pollution == F ~ paste0(nutrient_flow, \"_unreported\")\n    )\n  ) %&gt;%\n  select(-reported_pollution) %&gt;%\n  spread(nutrient_flow, capacity)\n\n# NA values replaced by 0 for future coeff computation\ntemp[is.na(temp)] &lt;- 0\n\n\nFrom this we compute proportionate coefficient to extrapolate real flows.\n\n\nCode\ntemp &lt;- temp %&gt;%\n  mutate(NGL_out_coeff = (NGL_out_reported + NGL_out_unreported)/NGL_out_reported,) %&gt;%\n  select(-c(NGL_out_reported, NGL_out_unreported))\n\n#replace Inf values by 1 (check if it does not create problems)\ntemp[temp == Inf] &lt;- 1\ntemp[is.na(temp)] &lt;- 1\n\n\nWith these coefficients we compute the adjusted flows\n\n\nCode\n#file with reported flows and adjustment coefficient\ntemp2 &lt;- left_join(\n  basin_PE_N_P_seine_normandie %&gt;%\n    #selects only flows and not yields or ratios\n    select(Year, PE_bin, NGL_out),\n  temp, by=c(\"Year\", \"PE_bin\")\n)\n\n#computes adjusted flows\ntemp2 &lt;- temp2 %&gt;%\n  mutate(NGL_out_adj = round(NGL_out_coeff*NGL_out, 5)) %&gt;%\n  #we remove coefficients and unajusted flows\n  select(-c(NGL_out, NGL_out_coeff))\n\n\nWe add these adjusted flows to the main files reporting flows at the basin scale\n\n\nCode\n#adding adjusted flows to the basin x capacity files\nbasin_PE_N_P_seine_normandie &lt;- left_join(\n  basin_PE_N_P_seine_normandie, temp2, by=c(\"Year\", \"PE_bin\")\n)\n\n#aggregating adjusted flows at the basin scale without the capacity categories\ntemp &lt;- temp2 %&gt;%\n  select(-PE_bin) %&gt;%\n  group_by(Year) %&gt;%\n  summarise_all(~signif(sum(.x, na.rm=T), 3))\n\n#adding adjusted flows to the basin files\nbasin_N_P_seine_normandie &lt;- left_join(\n  basin_N_P_seine_normandie, temp, by=\"Year\"\n)\n\n# for all other flows adjusted flows are the same as reported flows.\nbasin_PE_N_P_seine_normandie &lt;- basin_PE_N_P_seine_normandie %&gt;%\n  mutate(\n    Pt_in_adj = Pt_in, \n    Pt_out_adj = Pt_out, \n    NGL_in_adj = NGL_in, \n    DBO5_in_adj = DBO5_in, \n    DBO5_out_adj = DBO5_out, \n    DCO_in_adj = DCO_in, \n    DCO_out_adj = DCO_out, \n    MES_in_adj = MES_in, \n    MES_out_adj = MES_out\n  )\n\nbasin_N_P_seine_normandie &lt;- basin_N_P_seine_normandie %&gt;%\n  mutate(\n    Pt_in_adj = Pt_in, \n    Pt_out_adj = Pt_out, \n    NGL_in_adj = NGL_in, \n    DBO5_in_adj = DBO5_in, \n    DBO5_out_adj = DBO5_out, \n    DCO_in_adj = DCO_in, \n    DCO_out_adj = DCO_out, \n    MES_in_adj = MES_in, \n    MES_out_adj = MES_out\n  )\n\n\nWe plot the comparison reported / adjusted in the following graphs. The difference is marginal, only a few percents.\n\n\nCode\nf_graph_adjusted &lt;- function(basin_file, basin_PE_file, nutrient_adjusted, nutrient_reported, nutrient_label){\n  g &lt;- plot_grid(\n    ggplot(basin_PE_file) +\n      geom_point(\n        data = basin_file,\n        aes(Year, !!as.symbol(nutrient_adjusted)), \n        color=\"black\", size=1\n        ) + \n      geom_col(\n        aes(Year, !!as.symbol(nutrient_reported), fill=PE_bin), \n        alpha=.7\n        ) + \n      theme(legend.position = \"none\") +\n      labs(\n        x=\"\", y=\"kt per year\",\n        caption = \"\\n\",\n        title = paste(\"Adjusted\", nutrient_label, \"flows\")\n    ),\n    ggplot(basin_PE_file) +\n      geom_point(\n        aes(Year, !!as.symbol(nutrient_adjusted), color=PE_bin), \n        size=1\n        ) + \n      geom_col(\n        aes(Year, !!as.symbol(nutrient_reported), fill=PE_bin), \n        alpha=.7\n        ) + \n      theme(legend.position = \"none\") +\n      facet_wrap(vars(PE_bin), scales=\"free\") +\n      labs(\n        x=\"\", y=\"\",\n        caption = Source,\n        title = \"\",\n        subtitle = \"point: adjusted flow ; area: reported flow\"\n      ),\n    rel_widths = c(0.3, 0.7)\n  )\n  return(g)\n}\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_seine_normandie, \n  basin_PE_N_P_seine_normandie,\n  \"NGL_out_adj\", \"NGL_out\", \"discharged NGL\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nRatios\n\nBasin scale\n\n\n\nN:P ratioDCO:DBO5DBO5:N vs DBO5:P\n\n\n\n\nCode\nggplot(basin_N_P_SIAAP) + \n  geom_line(aes(Year, N_P_ratio_in, color=\"N:P in\")) + \n  geom_line(aes(Year, N_P_ratio_out, color = \"N:P out\")) + \n  geom_point(data = basin_N_P_seine_normandie, aes(Year, N_P_ratio_in, color=\"N:P in\")) +\n  geom_point(data = basin_N_P_seine_normandie, aes(Year, N_P_ratio_out, color=\"N:P out\")) +\n  ylim(0, NA) +\n  theme(\n    legend.position = c(0.2, 0.6)\n  ) +\n  labs(\n    x=\"\", y=\"N:P ratio\",\n    title = \"N:P ratio in Seine-Normandie and SIAAP\n    \",\n    subtitle = \"comparison of SIAAP data (line) and basin data (point)\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_SIAAP) + \n  geom_line(aes(Year, DCO_DBO5_ratio_in, color=\"DCO:DBO5 in\")) + \n  geom_line(aes(Year, DCO_DBO5_ratio_out, color = \"DCO:DBO5 out\")) + \n  geom_point(data = basin_N_P_seine_normandie, aes(Year, DCO_DBO5_ratio_in, color=\"DCO:DBO5 in\")) + \n  geom_point(data = basin_N_P_seine_normandie, aes(Year, DCO_DBO5_ratio_out, color = \"DCO:DBO5 out\")) + \n  ylim(0, NA) +\n  theme(\n    legend.position = c(0.7, 0.6)\n  ) +\n  labs(\n    x=\"\", y=\"DCO:DBO5 ratio\",\n    title = \"DCO:DBO5 ratio in Seine-Normandie and SIAAP\",\n    subtitle = \"comparison of SIAAP data (line) and basin data (point)\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_SIAAP) +\n  geom_point(\n    aes(\n      DBO5_N_ratio_in, DBO5_P_ratio_in,\n      color=Year_category\n      )\n    ) +\n  geom_point(\n    aes(\n      DBO5_N_ratio_out, DBO5_P_ratio_out,\n      color=Year_category\n        )\n    ) +\n  ylim(0, NA) +\n  annotate(\n    geom=\"text\", label =\"inflow\",\n    x=4, y=25\n  ) +\n  annotate(\n    geom=\"text\", label =\"outflow\",\n    x=1.3, y=8\n  ) +\n  labs(\n    x=\"DBO5:Pt ratio\", y=\"DBO5:NGL ratio\",\n    title = \"DBO5:NGL vs DBO5:Pt ratio in SIAAP\",\n    subtitle = \"\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nYield\n\nBasin scale\n\n\n\n\nCode\n#temporal yield N and P\nggplot(basin_N_P_SIAAP) + \n  # SIAAP\n  geom_line(aes(Year, Pt_yield, color=\"P\")) + \n  geom_line(aes(Year, NGL_yield, color = \"N\")) + \n  geom_line(aes(Year, DBO5_yield, color = \"DBO5\")) +\n  geom_line(aes(Year, DCO_yield, color = \"DCO\")) +\n  geom_line(aes(Year, MES_yield, color = \"MES\")) +\n  #Seine-Normandie\n  geom_point(data=basin_N_P_seine_normandie, aes(Year, Pt_yield, color=\"P\")) + \n  geom_point(data=basin_N_P_seine_normandie, aes(Year, NGL_yield, color = \"N\")) + \n  geom_point(data=basin_N_P_seine_normandie, aes(Year, DBO5_yield, color = \"DBO5\")) +\n  geom_point(data=basin_N_P_seine_normandie, aes(Year, DCO_yield, color = \"DCO\")) +\n  geom_point(data=basin_N_P_seine_normandie, aes(Year, MES_yield, color = \"MES\")) +\n  ylim(0,100) +\n  theme(legend.position = c(0.7, 0.3)) +\n  labs(\n    title = \"Global abatement rate of SIAAP WWTPs\", \n    x=\"\", y=\"Yield (%)\", color=\"\",\n    subtitle = \"comparison of SIAAP data (line) and basin data for 2015\",\n    caption = Source\n    )\n\n\n\n\n\n\n\n\n\n\nSave data\nWe save the Seine-Normandie basin data (only for 2015, 2016, 2018 and 2020).\n\n\nCode\n#all WWTP file\npath_output &lt;- \"output_data/all_WWTP/\"\ntemp &lt;- N_P_seine_normandie %&gt;%\n  select(\n    code_WWTP, name_WWTP, Year, capacity, name_commune, PE_bin,\n    DBO5_in, DCO_in, MES_in, NGL_in, NTK_in, NO3_in, NO2_in, Pt_in,\n    DBO5_out, DCO_out, MES_out, NGL_out, NTK_out, NO3_out, NO2_out, Pt_out,\n    DBO5_yield, DCO_yield, MES_yield, NGL_yield, Pt_yield,\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"all_WWTP_03_seine_normandie.csv\"\n)\n\n#basin aggregated file\npath_output &lt;- \"output_data/basins/\"\ntemp &lt;- basin_N_P_seine_normandie %&gt;%\n  select(\n    Year, capacity, nb_WWTP,\n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\ntemp[temp==0] &lt;- NA #change 0 in unreported value\n\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_03_seine_normandie.csv\"\n)\n\n#basin x PE agregated file\npath_output &lt;- \"output_data/basins_PE/\"\ntemp &lt;- basin_PE_N_P_seine_normandie %&gt;%\n  select(\n    Year, capacity, nb_WWTP, PE_bin, \n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\ntemp[temp==0] &lt;- NA #change 0 in unreported value\n\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_PE_03_seine_normandie.csv\"\n)\n\n\nWe save the SIAAP data over the 2000-2020 period.\n\n\nCode\n#In this case their is no need to adjust the flows, since all 6 WWTP are reported.\nbasin_N_P_SIAAP &lt;- basin_N_P_SIAAP %&gt;%\n  mutate(\n    Pt_in_adj = Pt_in, \n    Pt_out_adj = Pt_out, \n    NGL_in_adj = NGL_in,\n    NGL_out_adj = NGL_out,\n    DBO5_in_adj = DBO5_in, \n    DBO5_out_adj = DBO5_out, \n    DCO_in_adj = DCO_in, \n    DCO_out_adj = DCO_out, \n    MES_in_adj = MES_in, \n    MES_out_adj = MES_out\n  )\n\nbasin_PE_N_P_SIAAP &lt;- basin_PE_N_P_SIAAP %&gt;%\n  mutate(\n    Pt_in_adj = Pt_in, \n    Pt_out_adj = Pt_out, \n    NGL_in_adj = NGL_in,\n    NGL_out_adj = NGL_out,\n    DBO5_in_adj = DBO5_in, \n    DBO5_out_adj = DBO5_out, \n    DCO_in_adj = DCO_in, \n    DCO_out_adj = DCO_out, \n    MES_in_adj = MES_in, \n    MES_out_adj = MES_out\n  )\n\n#basin aggregated file\npath_output &lt;- \"output_data/basins/\"\ntemp &lt;- basin_N_P_SIAAP %&gt;%\n  select(\n    Year, capacity, nb_WWTP,\n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\n\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_03_SIAAP.csv\"\n)\n\n#basin x PE agregated file\npath_output &lt;- \"output_data/basins_PE/\"\ntemp &lt;- basin_PE_N_P_SIAAP %&gt;%\n  select(\n    Year, capacity, nb_WWTP, PE_bin, \n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\n\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_PE_03_SIAAP.csv\"\n)\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "05_adour_garonne.html",
    "href": "05_adour_garonne.html",
    "title": "Adour-Garonne",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#loading additional relevant packages\nlibrary(cowplot) #for plot_grid()\nlibrary(viridis) #for viridis colors\n\n#path for data \npath_source &lt;- \"source_data/05_adour_garonne/\"\npath_output &lt;- \"output_data/STEU/Adour_Garonne/\"\n\nYear_analysis &lt;- 2020\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(\n      plot.title = element_text(face=\"bold\")\n      )\n  )\n\n#for captions below graphs\nSource &lt;- \"Agence de l'Eau Adour-Garonne\\nComputation by Thomas Starck\"\n\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\n# Load the function file\nsource(\"functions.R\")\n\n\n\nSource and data\n\nBasin presentationSourceDescriptionLoad DataUnmatched discharge pointsUnderstand NGL\n\n\nInformations about the Adour-Garonne basin can be found in the “Etat des lieux” (Status report) in 2019 and 2013.\nIn 2018, the basin had 7.86 M inhabitants “Out of 7M habitants, 30% live in scattered housings”. We consider these people are not connected to sewers and are in Individual Autonomous Systems (IAS).\nMore information in the Guide de l’eau (here and here), and on the basin website, or here.\n\n\nThe data are available on the Système d’Information sur l’Eau du bassin Adour-Garonne.\nTwo kinf of files are downloaded : one concerns pollution discharge and their location for each year (here), the other provides information about the waste water treatment plants characteristics (here).\n\n\nThere are 2 main files for each year (and also pdf files describing the variables). To see more details about the different points (A1, A2…), see here.\nlistObj_YEAR : these files describe the characteristics of the WWTP and networks.\nlistDataIndicateurs : these files describe the different flows, with 2 main variables, “indicator” and “parameter”. It also specified type_rj, whether it is RJ (“Point de rejet du système de traitement”, i.e. discharge by WWTP) or SC (“Système de collecte, direct dans le milieu naturel”, i.e. discharge by sewers)\nindicators :\n\nPORDO “Pollution déversée par le système de collecte représentative d’un jour moyen du mois considéré (issue de l’autosurveillance (Kg/j)”. Only starting 2009. Associated with type_rj=RJ. We assimilate this to the A1 point, i.e. discharge by sewers, and rename it ._collection_discharge.\nPORBP “Pollution by-passée en tête de station représentative d’un jour moyen du mois considéré (issue de l’autosurveillance (Kg/j)”. Associated with type_rj RJ. We assimilate this to the A2 point, i.e. last discharge point before the WWTP, and rename it ._head_by_pass.\nPORMX “Pollution estimée rejetée directement par le système de collecte (si pas de station d’épuration ou pas de mesures sur DO ou By-pass)”. Only before 2015. Associated with type_rj RJ, but before 2007 also associated to SC. This is an estimation of A1+A2 points discharge before 2015, and rename it ._discharge_estimate.\nPOENT “Pollution mesurée entrante en station (Kg/j)”. We assimilate this to the A3 point, i.e. pollution inflow to WWTP.\nPOSOR “Pollution mesurée en sortie de station d’épuration”. We assimilate this to the A4 point, i.e. pollution outflow of WWTP.\nPLUIE “Pluie mesurée (mm)”. Rain in mm. We do not analyse this.\nBOUE “Quantité de boues produite et évacuée”. Quantity of sludge produced, we do not analyse it.\nA2. Not described, but always associated to the parameter NBJDV “nombre de jours de déversement”, not reported before 2018. Associated with type_rj RJ. This is the nb of days (per month) where discharge on A2 point occurs.\nPODMI Not described, but just from 2000 to 2007. Associated with the parameters nutrients (MES, Pt, NGL…) and only with type_rj SC (not RJ). We do not analyse it.\nPOIMI same as PODMI, but also associated with VOL. We do not analyse it.\n\nparameters :\n\nthe nutrients : “NO2” “MES” “NTK” “DBO5” “NGL” “NO3” “PT” “DCO” “NH4”, in kg/day\nvolume “VOL” in m3/day\nrainfall “PLUIE” in mm\n“NBJDV” “Nombre de jours de déversement”. Associated with type_rj RJ. For 2015-2020, associated with the indicator PORDO. Also associated with A2 for 2018-2020.This is the nb of days (per month) where discharge on A1 or A2 point occurs.\nand the sludge production and destination in kg of dry matter per year : production “PROD”, spread “U”, composted (before 2013) “C”, composted normalized “C1”, composted non normalized “C2”, landfilled “S”, in transition “T”, incinerated “I”, to other WWTP, “STEP”. We do not analise it.\n\ntype_rj SC is only associated to PORMX, PODMI and POIMI, from 2000 to 2007.\n\n\nWe load the pollutions in the listDataIndicateurs files, for each year.\n\n\nCode\n#loading all years, for pollutions (by discharge code name)\nfile_adour_garonne &lt;- \n  list.files( \n    #read and merge csv of all years\n    path = path_source,\n    pattern = \"listeDataIndicateurs*\", \n    full.names = T, \n    recursive = T\n    ) %&gt;% \n  lapply(read_delim, delim = \";\") %&gt;% \n  bind_rows\n\n\n\n\nCode\n#Spotting duplicates observation of the quadruplets (code_rj, indicateur, parametre, annee)\ntemp &lt;- file_adour_garonne %&gt;% select(code_rj, annee, indicateur, parametre) #selects quadruplets\ntemp$duplicated &lt;- duplicated(temp) #spots duplicates\ntemp &lt;- temp %&gt;% filter(duplicated == T) #filters duplicates\ntemp &lt;- left_join(temp, file_adour_garonne) #exctract dupplicates informations from main file\nnrow(temp) #number of rows 200 (so 100 unique observations)\nunique(temp$code_rj) #spots the unique code_rj duplicated (only 3)\n\n# We remove SERRES-MORLAAS and ST AULAYE (Bourg)\nfile_adour_garonne &lt;- subset(file_adour_garonne, !(code_rj %in% c(\"0564520V0011\", \"0524376V0021\")))\n# We remove LAVAUR just for 2000\nfile_adour_garonne &lt;- subset(file_adour_garonne, !(code_rj == \"0581140V0041\" & annee == \"2000\"))\n\n\nIn the listDataIndicateurs files, which reports pollution at the discharge points, there are 100 pollution observations (code_rj) that are reported twice, concerning 3 waste water treatment plants.\n\nSERRES-MORLAAS in 2018, 2019 and 2020 (code_rj 0564520V0011), capacity of 850 population equivalent. Negligible, we completely remove it.\nST AULAYE (Bourg) in 2018 (code_rj 0524376V0021), capacity of 1 200 population equivalent. Negligible, we completely remove it.\nLAVAUR in 2000 (code_rj 0581140V0041), capacity of 10 000 population equivalent =&gt; We remove Lavaur just for this year since its a rather big town.\n\nThen we load the WWTP descriptions in the listeObj files, for each year.\n\n\nCode\n#for 2010-2020, the files are reported in multiple folders : we load each file, add the year, and merge them\nf_load_WWTP_2010_2020 &lt;- function (year_min, year_max){\n  path &lt;- \"source_data/05_adour_garonne/donnees_rejets_collectivites_\"\n  #intialization\n  temp &lt;- \n    read_csv2(\n      paste0(path, as.character(year_min), \"/listeObj.csv\"),\n      #we have to specify the columns types, otherwise some problems\n      col_types = cols(\n        debit_nominal_tps_pluie=\"numeric\",\n        insee_commune=\"character\",\n        insee_commune_step=\"character\"\n        )\n      ) %&gt;%\n    #adding the year\n    mutate(annee=year_min)\n  #loop\n  for (i in (year_min+1):year_max){\n    temp2 &lt;- \n      read_csv2(\n        paste0(path, as.character(i), \"/listeObj.csv\"),\n        col_types = \n          #we have to specify the columns types, otherwise some problems\n          cols(\n            debit_nominal_tps_pluie=\"numeric\",\n            insee_commune=\"character\",\n            insee_commune_step=\"character\"\n            )\n        ) %&gt;%\n      #adding the year\n      mutate(annee=i)\n    temp &lt;- bind_rows(temp, temp2)\n  }\n  return(temp)\n}\nfile_WWTP_2010_2020 &lt;- f_load_WWTP_2010_2020(2010, 2020) %&gt;% distinct()\n\n#for 2000-2009, files are reported in one unique folder ; we load each file, add the year, merge them\nf_load_WWTP_2000_2009 &lt;- function (year_min, year_max){\n  path &lt;- \"source_data/05_adour_garonne/donnees_rejets_collectivites_2000_2009/listeObj.csv\"\n  temp &lt;- \n    read_csv2(path) %&gt;%\n    mutate(annee=year_min)\n  for (i in (year_min+1):year_max){\n    temp2 &lt;- \n      read_csv2(path) %&gt;%\n      mutate(annee=i)\n    temp &lt;- bind_rows(temp, temp2)\n  }\n  return(temp)\n}\nfile_WWTP_2000_2009 &lt;- f_load_WWTP_2000_2009(2000, 2009) %&gt;% distinct()\n\n#we merge the files for 2000-2009 and 2010-2020\nfile_WWTP &lt;- bind_rows(\n  file_WWTP_2000_2009, file_WWTP_2010_2020\n)\n\n\n\n\nCode\nWWTP &lt;- file_WWTP %&gt;%\n  select(\n    #we select and rename in standard denomination the variables of interest\n    Year = annee,\n    code_discharge = code_rj,\n    code_WWTP = code_step,\n    name_WWTP = nom_step,\n    INSEE_COM = insee_commune_step, #commune of the WWTP : possible to also have commune of discharge location\n    name_commune = nom_commune_step, #commune of the WWTP : possible to also have commune of discharge location\n    capacity = capacite, # in population equivalent\n    network_type = nature_reseau,\n    treatment_type = traitement_principal,\n    long_WWTP = x_step,\n    lat_WWTP = y_step,\n    long_discharge = x_rj,\n    lat_discharge = y_rj,\n    discharge_location = milieu_recepteur\n    #possible to get : water nominal flow (dry and wet weather)\n    #possible to get : nominal load DBO5, DCO, MES\n    #other variables (type_rj...) not selected because already in file_adour_garonne, merged after\n  )\n\n#transform monthly values into annual values, drops monthly values\nN_P_adour_garonne &lt;-  file_adour_garonne %&gt;% \n  rename(\n    Year = annee,\n    code_discharge = code_rj\n    ) %&gt;%\n  mutate(valeur = rowMeans(.[7:18], na.rm = T)) %&gt;% #annual mean over the 12 months\n  select(!(valeur_01:valeur_12)) #drops monthly values\n\nN_P_adour_garonne &lt;- N_P_adour_garonne %&gt;%\n  #sludge values put with other values\n  mutate(valeur = \n           case_when(\n             is.na(valeur_y) == F ~ valeur_y, \n             T ~ valeur\n             )\n         ) %&gt;%\n  #drops useless columns of sludge\n  select(-valeur_y) %&gt;% \n  #replace NAN (issued from rowMean) into NA\n  mutate_all(~ifelse(is.nan(.), NA, .)) %&gt;%\n  #preparing standard renaming for columns\n  mutate(\n    #rename PT in Pt\n    parametre = case_when(\n      parametre == \"PT\" ~ \"Pt\",\n      T ~ parametre\n    )\n  ) %&gt;%\n  filter(\n    #\"PLUIE\" not selected for now ; PORMX neither (data before 2015)\n    (indicateur %in% c(\"POENT\", \"POSOR\", \"PORDO\", \"PORBP\", \"BOUE\", \"A2\", \"PORMX\")) & \n      (parametre %in% c(\"NGL\", \"NTK\", \"NH4\", \"NO2\", \"NO3\", \"Pt\", \"DBO5\", \"DCO\", \"MES\", \"VOL\",\n                        #for now only sludge production, not destination (U, I, S...)\n                        \"PROD\",\n                        #nb of days of discharge\n                        \"NBJDV\"))\n  ) %&gt;%\n  #rename for concatenation\n  mutate(\n    indicateur = case_when(\n      indicateur == \"POENT\"  ~ \"in\", #A3 point\n      indicateur == \"POSOR\"  ~ \"out\", #A4 point\n      indicateur == \"PORDO\"  ~ \"collection_discharge\", #A1 point\n      indicateur == \"PORBP\"  ~ \"head_by_pass\", #A5 point (and A2 ?)\n      indicateur == \"BOUE\"  ~ \"sludge\", #A6 point\n      indicateur == \"A2\"  ~ \"A2\", #A2 point\n      indicateur == \"PORMX\"  ~ \"discharge_estimate\", #A1 point (and A2 point ?) before 2015 if no measure\n      ),\n    parametre = paste(parametre, indicateur, sep=\"_\")\n    ) %&gt;%\n  select(-indicateur) %&gt;% \n  spread(key = parametre, value = valeur) \n\n\n\n\nCode\n#Spotting duplicates observation of the doublets (code_rj, Year)\ntemp &lt;- WWTP %&gt;% select(code_discharge, Year) #selects quadruplets\ntemp$duplicated &lt;- duplicated(temp) #spots duplicates\ntemp &lt;- temp %&gt;% filter(duplicated == T) #filters duplicates\ntemp &lt;- left_join(temp, WWTP) #exctract dupplicates informations from main file\nunique(temp$code_discharge) #spots the unique code_discharge duplicated (only 7)\n\n\nFor the listObj files, which reports WWTP characteristics, there are 7 discharge codes that are reported twice (under 2 different WWTP codes) :\n\n0531555V0181, TOULOUSE (GINESTOUS G1), 950 000 (or 400 000) population equivalent\n0516345V0011, ST QUENTIN SUR CHARENTE (Barrage Lavaud village), 100 population equivalent\n0581140V0041, LAVAUR, 13 000 (or 8 000) population equivalent\n0587034V0031, CHAMPAGNAC LA RIVIERE (le Bourg ), 230 population equivalent\n0563047V0011, LA BOURBOULE, 30 000 population equivalent\n0524376V0021, ST AULAYE (BOURG), 1350 (or 1200) population equivalent\n0564520V0011, SERRES-MORLAAS, 8500 population equivalent\n\nOn the portail assainissement we check the WWTP code (Code SANDRE) which is unique to decide which one of the 2 to keep. The kept ones are:\n\n\nSee cleaning process\n\n\n0531555V018 for TOULOUSE (GINESTOUS G1), (removed : 0531555V001)\n0516345V001 for ST QUENTIN SUR CHARENTE (Barrage Lavaud village), (removed : 0416345S0001)\n0581140V004 for LAVAUR, (removed : 0581140V001)\n0487034V003 for CHAMPAGNAC LA RIVIERE (le Bourg ), (removed : 0487034S0003)\n0463047S0001 for LA BOURBOULE, (removed : 0563047S0001)\n0524376V004 for ST AULAYE (BOURG) (removed : 0524376V002)\n0564520V002 for SERRES-MORLAAS (removed : 0564520V001). But the reported capacity is inconsistent (8500 instead of 850), so we remove this WWTP.\n\n\n\n\nCode\nWWTP &lt;- subset(WWTP, !(code_WWTP %in% c(\"0531555V001\", \"0416345S0001\", \"0581140V001\", \"0487034S0003\", \"0563047S0001\", \"0524376V002\")))\nWWTP &lt;- subset(WWTP, code_discharge != \"0564520V0011\") #completely remove SERRES-MORLAAS\n\n\nNow we join the 2 files (WWTP description and pollution flows)\n\n\nCode\n#merge with WWTP characteristics\nN_P_adour_garonne &lt;- left_join(N_P_adour_garonne, WWTP, by=c(\"Year\", \"code_discharge\"))\n\n\nFinally, for 2000-2019 (not for 2020), WWTP capacities are over reported by a factor 10. We fix this.\n\n\nCode\nN_P_adour_garonne$capacity[N_P_adour_garonne$Year &lt; 2020] &lt;- N_P_adour_garonne$capacity[N_P_adour_garonne$Year &lt; 2020]/10\n\n\nWhen nutrient flows are negative or null, we replace them by empty values.\n\n\nCode\n# Some reported flows are negative or null. We replace them with empty values.\n#Pt\nN_P_adour_garonne$Pt_in[N_P_adour_garonne$Pt_in &lt;= 0] &lt;- NA\nN_P_adour_garonne$Pt_out[N_P_adour_garonne$Pt_out &lt;= 0] &lt;- NA\nN_P_adour_garonne$Pt_collection_discharge[N_P_adour_garonne$Pt_collection_discharge &lt;= 0] &lt;- NA\nN_P_adour_garonne$Pt_head_by_pass[N_P_adour_garonne$Pt_head_by_pass &lt;= 0] &lt;- NA\n#DBO5\nN_P_adour_garonne$DBO5_in[N_P_adour_garonne$DBO5_in &lt;= 0] &lt;- NA\nN_P_adour_garonne$DBO5_out[N_P_adour_garonne$DBO5_out &lt;= 0] &lt;- NA\nN_P_adour_garonne$DBO5_collection_discharge[N_P_adour_garonne$DBO5_collection_discharge &lt;= 0] &lt;- NA\nN_P_adour_garonne$DBO5_head_by_pass[N_P_adour_garonne$DBO5_head_by_pass &lt;= 0] &lt;- NA\n#DCO\nN_P_adour_garonne$DCO_in[N_P_adour_garonne$DCO_in &lt;= 0] &lt;- NA\nN_P_adour_garonne$DCO_out[N_P_adour_garonne$DCO_out &lt;= 0] &lt;- NA\nN_P_adour_garonne$DCO_collection_discharge[N_P_adour_garonne$DCO_collection_discharge &lt;= 0] &lt;- NA\nN_P_adour_garonne$DCO_head_by_pass[N_P_adour_garonne$DCO_head_by_pass &lt;= 0] &lt;- NA\n#MES\nN_P_adour_garonne$MES_in[N_P_adour_garonne$MES_in &lt;= 0] &lt;- NA\nN_P_adour_garonne$MES_out[N_P_adour_garonne$MES_out &lt;= 0] &lt;- NA\nN_P_adour_garonne$MES_collection_discharge[N_P_adour_garonne$MES_collection_discharge &lt;= 0] &lt;- NA\nN_P_adour_garonne$MES_head_by_pass[N_P_adour_garonne$MES_head_by_pass &lt;= 0] &lt;- NA\n#NTK\nN_P_adour_garonne$NTK_in[N_P_adour_garonne$NTK_in &lt;= 0] &lt;- NA\nN_P_adour_garonne$NTK_out[N_P_adour_garonne$NTK_out &lt;= 0] &lt;- NA\nN_P_adour_garonne$NTK_collection_discharge[N_P_adour_garonne$NTK_collection_discharge &lt;= 0] &lt;- NA\nN_P_adour_garonne$NTK_head_by_pass[N_P_adour_garonne$NTK_head_by_pass &lt;= 0] &lt;- NA\n#NO3\nN_P_adour_garonne$NO3_in[N_P_adour_garonne$NO3_in &lt;= 0] &lt;- NA\nN_P_adour_garonne$NO3_out[N_P_adour_garonne$NO3_out &lt;= 0] &lt;- NA\nN_P_adour_garonne$NO3_collection_discharge[N_P_adour_garonne$NO3_collection_discharge &lt;= 0] &lt;- NA\nN_P_adour_garonne$NO3_head_by_pass[N_P_adour_garonne$NO3_head_by_pass &lt;= 0] &lt;- NA\n#NO2\nN_P_adour_garonne$NO2_in[N_P_adour_garonne$NO2_in &lt;= 0] &lt;- NA\nN_P_adour_garonne$NO2_out[N_P_adour_garonne$NO2_out &lt;= 0] &lt;- NA\nN_P_adour_garonne$NO2_collection_discharge[N_P_adour_garonne$NO2_collection_discharge &lt;= 0] &lt;- NA\nN_P_adour_garonne$NO2_head_by_pass[N_P_adour_garonne$NO2_head_by_pass &lt;= 0] &lt;- NA\n#NH4\nN_P_adour_garonne$NH4_in[N_P_adour_garonne$NH4_in &lt;= 0] &lt;- NA\nN_P_adour_garonne$NH4_out[N_P_adour_garonne$NH4_out &lt;= 0] &lt;- NA\nN_P_adour_garonne$NH4_collection_discharge[N_P_adour_garonne$NH4_collection_discharge &lt;= 0] &lt;- NA\nN_P_adour_garonne$NH4_head_by_pass[N_P_adour_garonne$NH4_head_by_pass &lt;= 0] &lt;- NA\n#NGL_reported\nN_P_adour_garonne$NGL_in[N_P_adour_garonne$NGL_in &lt;= 0] &lt;- NA\nN_P_adour_garonne$NGL_out[N_P_adour_garonne$NGL_out &lt;= 0] &lt;- NA\nN_P_adour_garonne$NGL_collection_discharge[N_P_adour_garonne$NGL_collection_discharge &lt;= 0] &lt;- NA\nN_P_adour_garonne$NGL_head_by_pass[N_P_adour_garonne$NGL_head_by_pass &lt;= 0] &lt;- NA\n#Volume\nN_P_adour_garonne$VOL_in[N_P_adour_garonne$VOL_in &lt;= 0] &lt;- NA\nN_P_adour_garonne$VOL_out[N_P_adour_garonne$VOL_out &lt;= 0] &lt;- NA\nN_P_adour_garonne$VOL_collection_discharge[N_P_adour_garonne$VOL_collection_discharge &lt;= 0] &lt;- NA\nN_P_adour_garonne$VOL_head_by_pass[N_P_adour_garonne$VOL_head_by_pass &lt;= 0] &lt;- NA\n\n\nWe compute the yields and ratios for each WWTP, and we compute NGL with NTK, NO2 and NO3 when possible. For incoming NGL, when possible we use NTK, NO2 and NO3, but if only NTK is available we also keep it as a good approximation (NO is negligible for incoming pollution). For discharged NGL, NO3 and NTK must be reported, and we accept to neglect NO2 when it is unreported.\n\n\nCode\nN_P_adour_garonne &lt;- N_P_adour_garonne %&gt;%\n  ungroup() %&gt;%\n  # we need to be \"row wise\" to use \"sum(., na.rm=T) : \n  # just summing the columns A+B would return NA when at least 1 columns as NA in the row\n  rowwise() %&gt;%\n  mutate(\n    #for NGL in, if NTK_in reported we accept to not consider unreported NO2_in and NO2_in as 0 (because NO in negligible)\n    #if NTK_in unreported, NGL_in is unreported\n    NGL_in_computed = sum(NTK_in, NO2_in, NO3_in, na.rm=!is.na(NTK_in)), \n    NGL_collection_discharge_computed = sum(NTK_collection_discharge, NO2_collection_discharge, NO3_collection_discharge, na.rm=!is.na(NTK_collection_discharge)), \n    NGL_head_by_pass_computed = sum(NTK_head_by_pass, NO2_head_by_pass, NO3_head_by_pass, na.rm=!is.na(NTK_head_by_pass)), \n    #For NGL_out, NO3 and NTK must be reported, and we accept to neglect NO2 when it is unreported.\n    NGL_out_computed = sum(NTK_out, NO2_out, NO3_out, na.rm=!((is.na(NTK_out)|is.na(NO3_out))))\n    ) %&gt;%\n  mutate(\n    #yields\n    Pt_yield = (1-Pt_out/Pt_in)*100,\n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    DBO5_yield =(1-DBO5_out/DBO5_in)*100, \n    DCO_yield =(1-DCO_out/DCO_in)*100,\n    MES_yield =(1-MES_out/MES_in)*100,\n    #ratios\n    N_P_ratio_in = NGL_in/Pt_in,\n    N_P_ratio_out = NGL_in/Pt_out,\n    DCO_DBO5_ratio_in = DCO_in/DBO5_in,\n    DCO_DBO5_ratio_out = DCO_out/DBO5_out,\n    DBO5_NGL_ratio_in = DBO5_in/NGL_in,\n    DBO5_NGL_ratio_out = DBO5_out/NGL_out,\n    DBO5_Pt_ratio_in = DBO5_in/Pt_in,\n    DBO5_Pt_ratio_out = DBO5_out/Pt_out\n  )\n\n\nWe create the capacity categories in terms of population equivalent.\n\n\nCode\n#function to create capacity categories\nf_PE_bin_categories &lt;- function(dataset){\n  #Creating size categories\n  dataset &lt;- \n    dataset %&gt;%\n    mutate(\n      PE_bin = case_when(\n        capacity &lt; 200 ~ \"0 - 200 PE\",\n        (capacity &gt;= 200) & (capacity &lt;2000) ~ \"200 - 2 000 PE\",\n        (capacity &gt;= 2000) & (capacity &lt;10000) ~ \"2 000 - 10 000 PE\",\n        (capacity &gt;= 10000) & (capacity &lt;100000) ~ \"10 000 - 100 000 PE\",\n        capacity &gt;= 100000 ~ \"&gt; 100 000 PE\",\n        T ~ \"unreported PE\"\n      )\n    )\n  \n  #reorders treatment by their share of total capacity\n  dataset$PE_bin &lt;- \n    factor(\n      dataset$PE_bin, \n      levels = \n        c(\"unreported PE\",\n          \"0 - 200 PE\", \n          \"200 - 2 000 PE\", \n          \"2 000 - 10 000 PE\",\n          \"10 000 - 100 000 PE\", \n          \"&gt; 100 000 PE\"\n          )\n        )\n  return(dataset)\n}\nN_P_adour_garonne &lt;- f_PE_bin_categories(N_P_adour_garonne)\n\n\nWe create the file with aggregated flows at the basin scale, and also by capacity categories.\n\n\nCode\nf_basin_flows &lt;- function(dataset){\n  basin &lt;- dataset %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      across(\n        c(\n          #incoming_flow\n          NGL_in, NGL_in_computed, NTK_in, NH4_in, NO2_in, NO3_in,\n          Pt_in, DBO5_in, DCO_in, MES_in,\n          #outgoing_flow\n          NGL_out, NGL_out_computed, NTK_out, NH4_out, NO2_out, NO3_out,\n          Pt_out, DBO5_out, DCO_out, MES_out,\n          #by pass\n          NGL_head_by_pass, NGL_head_by_pass_computed, NTK_head_by_pass, NH4_head_by_pass, NO2_head_by_pass, NO3_head_by_pass,\n          Pt_head_by_pass, DBO5_head_by_pass, DCO_head_by_pass, MES_head_by_pass,\n          #collection discharge\n          NGL_collection_discharge, NGL_collection_discharge_computed, NTK_collection_discharge, NH4_collection_discharge, NO2_collection_discharge, NO3_collection_discharge,\n          Pt_collection_discharge, DBO5_collection_discharge, DCO_collection_discharge, MES_collection_discharge\n        ),\n        ~signif(sum(.x, na.rm = T)*365/10^6, digits=3)\n      ),\n    #nb of waste water treatment plant\n    nb_WWTP = n(),\n    #capacity converted in million Population Equivalent\n    capacity = signif(sum(capacity, na.rm = T)/10^6, digits=3),\n    )\n  return(basin)\n}\nbasin_N_P_adour_garonne &lt;- f_basin_flows(N_P_adour_garonne)\n\nf_basin_PE_flows &lt;- function(dataset){\n  basin &lt;- dataset %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      across(\n        c(\n          #incoming_flow\n          NGL_in, NGL_in_computed, NTK_in, NH4_in, NO2_in, NO3_in,\n          Pt_in, DBO5_in, DCO_in, MES_in,\n          #outgoing_flow\n          NGL_out, NGL_out_computed, NTK_out, NH4_out, NO2_out, NO3_out,\n          Pt_out, DBO5_out, DCO_out, MES_out,\n          #by pass\n          NGL_head_by_pass, NGL_head_by_pass_computed, NTK_head_by_pass, NH4_head_by_pass, NO2_head_by_pass, NO3_head_by_pass,\n          Pt_head_by_pass, DBO5_head_by_pass, DCO_head_by_pass, MES_head_by_pass,\n          #collection discharge\n          NGL_collection_discharge, NGL_collection_discharge_computed, NTK_collection_discharge, NH4_collection_discharge, NO2_collection_discharge, NO3_collection_discharge,\n          Pt_collection_discharge, DBO5_collection_discharge, DCO_collection_discharge, MES_collection_discharge\n        ),\n        ~signif(sum(.x, na.rm = T)*365/10^6, digits=3)\n      ),\n    #nb of waste water treatment plant\n    nb_WWTP = n(),\n    #capacity converted in million Population Equivalent\n    capacity = signif(sum(capacity, na.rm = T)/10^6, digits=3),\n    )\n  return(basin)\n}\nbasin_PE_N_P_adour_garonne &lt;- f_basin_PE_flows(N_P_adour_garonne)\n\n\nWe compute the nutrient ratios at the basin scale, and also by capacity categories.\n\n\nCode\n#have to do this in case 1 nutrient is more reported than the other, which would create a bia if we took the ratio of the already aggregated flows\nf_nutrient_ratio_basin &lt;- function(basin, dataset, nutrient1, nutrient2){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrient1))==F & is.na(!!as.symbol(nutrient2))==F\n      ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      nutrient_1 = sum(!!as.symbol(nutrient1), na.rm=T),\n      nutrient_2 = sum(!!as.symbol(nutrient2), na.rm=T),\n      ratio = signif(nutrient_1/nutrient_2, digits=3)\n    ) %&gt;%\n    select(-nutrient_1, -nutrient_2)\n  basin &lt;- left_join(\n    basin, temp, by=\"Year\"\n  )\n  return(basin)\n}\n\nf_nutrient_ratio_basin_PE &lt;- function(basin_PE, dataset, nutrient1, nutrient2){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrient1))==F & is.na(!!as.symbol(nutrient2))==F\n      ) %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      nutrient_1 = sum(!!as.symbol(nutrient1), na.rm=T),\n      nutrient_2 = sum(!!as.symbol(nutrient2), na.rm=T),\n      ratio = signif(nutrient_1/nutrient_2, digits=3)\n    ) %&gt;%\n    select(-nutrient_1, -nutrient_2)\n  basin_PE &lt;- left_join(\n    basin_PE, temp, by=c(\"Year\", \"PE_bin\")\n  )\n  return(basin_PE)\n}\n\nf_all_nutrient_ratios_basin &lt;- function(basin, dataset){\nbasin &lt;- basin %&gt;%\n    \n    #nutrient ratios\n    #N_P in\n    f_nutrient_ratio_basin(dataset, \"NGL_in\", \"Pt_in\") %&gt;%\n    rename(N_P_ratio_in = ratio) %&gt;%\n    #N_P out\n    f_nutrient_ratio_basin(dataset, \"NGL_out\", \"Pt_out\") %&gt;%\n    rename(N_P_ratio_out = ratio) %&gt;%\n    #DCO_DBO5 in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"DBO5_in\") %&gt;%\n    rename(DCO_DBO5_ratio_in = ratio) %&gt;%\n    #DCO_DBO5 out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"DBO5_out\") %&gt;%\n    rename(DCO_DBO5_ratio_out = ratio) %&gt;%\n    #DBO5_N in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"NGL_in\") %&gt;%\n    rename(DBO5_N_ratio_in = ratio) %&gt;%\n    #DBO5_N out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"NGL_out\") %&gt;%\n    rename(DBO5_N_ratio_out = ratio) %&gt;%\n    #DBO5_P in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"Pt_in\") %&gt;%\n    rename(DBO5_P_ratio_in = ratio) %&gt;%\n    #DBO5_P out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"Pt_out\") %&gt;%\n    rename(DBO5_P_ratio_out = ratio) %&gt;%\n    #DCO_N in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"NGL_in\") %&gt;%\n    rename(DCO_N_ratio_in = ratio) %&gt;%\n    #DCO_N out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"NGL_out\") %&gt;%\n    rename(DCO_N_ratio_out = ratio) %&gt;%\n    #DCO_P in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"Pt_in\") %&gt;%\n    rename(DCO_P_ratio_in = ratio) %&gt;%\n    #DCO_P out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"Pt_out\") %&gt;%\n    rename(DCO_P_ratio_out = ratio) %&gt;%\n    \n    #capacity ratios\n    #Pt_PE_in\n    f_nutrient_ratio_basin(dataset, \"Pt_in\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_in = ratio) %&gt;%\n    #Pt_PE_out\n    f_nutrient_ratio_basin(dataset, \"Pt_out\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_out = ratio) %&gt;%\n    #NGL_PE_in\n    f_nutrient_ratio_basin(dataset, \"NGL_in\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_in = ratio) %&gt;%\n    #NGL_PE_out\n    f_nutrient_ratio_basin(dataset, \"NGL_out\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_out = ratio) %&gt;%\n    #DBO5_PE_in\n    f_nutrient_ratio_basin(dataset, \"DBO5_in\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_in = ratio) %&gt;%\n    #DBO5_PE_out\n    f_nutrient_ratio_basin(dataset, \"DBO5_out\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_out = ratio) %&gt;%\n    #DCO_PE_in\n    f_nutrient_ratio_basin(dataset, \"DCO_in\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_in = ratio) %&gt;%\n    #DCO_PE_out\n    f_nutrient_ratio_basin(dataset, \"DCO_out\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_out = ratio) %&gt;%\n    #MES_PE_in\n    f_nutrient_ratio_basin(dataset, \"MES_in\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_in = ratio) %&gt;%\n    #MES_PE_out\n    f_nutrient_ratio_basin(dataset, \"MES_out\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_out = ratio) %&gt;%\n    \n    #convert from kg per PE per day to g per PE per day\n    mutate(\n      across(\n        c(\n          Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, DBO5_PE_ratio_in, DBO5_PE_ratio_out,\n          DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n        ), ~.x*1000 \n      )\n    )\n  return(basin)\n}\n\nf_all_nutrient_ratios_basin_PE &lt;- function(basin_PE, dataset){\n  basin_PE &lt;- basin_PE %&gt;%\n    \n    #nutrient ratios\n    #N_P in\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_in\", \"Pt_in\") %&gt;%\n    rename(N_P_ratio_in = ratio) %&gt;%\n    #N_P out\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_out\", \"Pt_out\") %&gt;%\n    rename(N_P_ratio_out = ratio) %&gt;%\n    #DCO_DBO5 in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"DBO5_in\") %&gt;%\n    rename(DCO_DBO5_ratio_in = ratio) %&gt;%\n    #DCO_DBO5 out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"DBO5_out\") %&gt;%\n    rename(DCO_DBO5_ratio_out = ratio) %&gt;%\n    #DBO5_N in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"NGL_in\") %&gt;%\n    rename(DBO5_N_ratio_in = ratio) %&gt;%\n    #DBO5_N out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"NGL_out\") %&gt;%\n    rename(DBO5_N_ratio_out = ratio) %&gt;%\n    #DBO5_P in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"Pt_in\") %&gt;%\n    rename(DBO5_P_ratio_in = ratio) %&gt;%\n    #DBO5_P out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"Pt_out\") %&gt;%\n    rename(DBO5_P_ratio_out = ratio) %&gt;%\n    #DCO_N in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"NGL_in\") %&gt;%\n    rename(DCO_N_ratio_in = ratio) %&gt;%\n    #DCO_N out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"NGL_out\") %&gt;%\n    rename(DCO_N_ratio_out = ratio) %&gt;%\n    #DCO_P in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"Pt_in\") %&gt;%\n    rename(DCO_P_ratio_in = ratio) %&gt;%\n    #DCO_P out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"Pt_out\") %&gt;%\n    rename(DCO_P_ratio_out = ratio) %&gt;%\n    \n    #capacity ratios\n    #Pt_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"Pt_in\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_in = ratio) %&gt;%\n    #Pt_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"Pt_out\", \"capacity\") %&gt;%\n    rename(Pt_PE_ratio_out = ratio) %&gt;%\n    #NGL_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_in\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_in = ratio) %&gt;%\n    #NGL_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"NGL_out\", \"capacity\") %&gt;%\n    rename(NGL_PE_ratio_out = ratio) %&gt;%\n    #DBO5_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_in\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_in = ratio) %&gt;%\n    #DBO5_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"DBO5_out\", \"capacity\") %&gt;%\n    rename(DBO5_PE_ratio_out = ratio) %&gt;%\n    #DCO_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_in\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_in = ratio) %&gt;%\n    #DCO_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"DCO_out\", \"capacity\") %&gt;%\n    rename(DCO_PE_ratio_out = ratio) %&gt;%\n    #MES_PE_in\n    f_nutrient_ratio_basin_PE(dataset, \"MES_in\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_in = ratio) %&gt;%\n    #MES_PE_out\n    f_nutrient_ratio_basin_PE(dataset, \"MES_out\", \"capacity\") %&gt;%\n    rename(MES_PE_ratio_out = ratio) %&gt;%\n    \n    #convert from kg per PE per day to g per PE per day\n    mutate(\n      across(\n        c(\n          Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, DBO5_PE_ratio_in, DBO5_PE_ratio_out,\n          DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n        ), ~.x*1000 \n      )\n    )\n  return(basin_PE)\n}\n\nbasin_N_P_adour_garonne &lt;- f_all_nutrient_ratios_basin(basin_N_P_adour_garonne, N_P_adour_garonne)\n\nbasin_PE_N_P_adour_garonne &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_adour_garonne, N_P_adour_garonne)\n\n\nWe compute the yields at the basin scale, and also by capacity categories.\n\n\nCode\n#have to do this in case inflow or outflow is more reported than the other one, which would create a bias if we took the ratio of the already aggregated flows\nf_yield_basin &lt;- function(basin, dataset, nutrientIN, nutrientOUT){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrientIN))==F & is.na(!!as.symbol(nutrientOUT))==F\n      ) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      nutrient_in = sum(!!as.symbol(nutrientIN), na.rm=T),\n      nutrient_out = sum(!!as.symbol(nutrientOUT), na.rm=T),\n      yield = round((1-nutrient_out/nutrient_in)*100, digits = 0)\n    ) %&gt;%\n    select(-nutrient_in, -nutrient_out)\n  basin &lt;- left_join(\n    basin, temp, by=\"Year\"\n  )\n  return(basin)\n}\n\nf_yield_basin_PE &lt;- function(basin_PE, dataset, nutrientIN, nutrientOUT){\n  temp &lt;- dataset %&gt;% \n    filter(\n      is.na(!!as.symbol(nutrientIN))==F & is.na(!!as.symbol(nutrientOUT))==F\n      ) %&gt;%\n    group_by(Year, PE_bin) %&gt;%\n    summarise(\n      nutrient_in = sum(!!as.symbol(nutrientIN), na.rm=T),\n      nutrient_out = sum(!!as.symbol(nutrientOUT), na.rm=T),\n      yield = round((1-nutrient_out/nutrient_in)*100, digits = 0)\n    ) %&gt;%\n    select(-nutrient_in, -nutrient_out)\n  basin_PE &lt;- left_join(\n    basin_PE, temp, by=c(\"Year\", \"PE_bin\")\n  )\n  return(basin_PE)\n}\n\nf_all_yields_basin &lt;- function(basin, dataset){\n  basin &lt;- basin %&gt;%\n    #NGL yield\n    f_yield_basin(dataset, \"NGL_in\", \"NGL_out\") %&gt;%\n    rename(NGL_yield = yield) %&gt;%\n    #Pt yield\n    f_yield_basin(dataset, \"Pt_in\", \"Pt_out\") %&gt;%\n    rename(Pt_yield = yield) %&gt;%\n    #DBO5 yield\n    f_yield_basin(dataset, \"DBO5_in\", \"DBO5_out\") %&gt;%\n    rename(DBO5_yield = yield) %&gt;%\n    #DCO yield\n    f_yield_basin(dataset, \"DCO_in\", \"DCO_out\") %&gt;%\n    rename(DCO_yield = yield) %&gt;%\n    #MES yield\n    f_yield_basin(dataset, \"MES_in\", \"MES_out\") %&gt;%\n    rename(MES_yield = yield) \n  return(basin)\n}\n\nf_all_yields_basin_PE &lt;- function(basin_PE, dataset){\n  basin_PE &lt;- basin_PE %&gt;%\n    #NGL yield\n    f_yield_basin_PE(dataset, \"NGL_in\", \"NGL_out\") %&gt;%\n    rename(NGL_yield = yield) %&gt;%\n    #Pt yield\n    f_yield_basin_PE(dataset, \"Pt_in\", \"Pt_out\") %&gt;%\n    rename(Pt_yield = yield) %&gt;%\n    #DBO5 yield\n    f_yield_basin_PE(dataset, \"DBO5_in\", \"DBO5_out\") %&gt;%\n    rename(DBO5_yield = yield) %&gt;%\n    #DCO yield\n    f_yield_basin_PE(dataset, \"DCO_in\", \"DCO_out\") %&gt;%\n    rename(DCO_yield = yield) %&gt;%\n    #MES yield\n    f_yield_basin_PE(dataset, \"MES_in\", \"MES_out\") %&gt;%\n    rename(MES_yield = yield) \n  return(basin_PE)\n}\n\nbasin_N_P_adour_garonne &lt;- f_all_yields_basin(basin_N_P_adour_garonne, N_P_adour_garonne)\n\nbasin_PE_N_P_adour_garonne &lt;- f_all_yields_basin_PE(basin_PE_N_P_adour_garonne, N_P_adour_garonne)\n\n\nWe create the years categories (every 5 years).\n\n\nCode\n#function to create years categories\nf_year_categories &lt;- function(dataset){\n  dataset &lt;- dataset %&gt;%\n    mutate(\n      Year_category = case_when(\n        Year %in% c(1991, 1992, 1993, 1994, 1995) ~ \"1991-1995\",\n        Year %in% c(1996, 1997, 1998, 1999, 2000) ~ \"1996-2000\",\n        Year %in% c(2001, 2002, 2003, 2004, 2005) ~ \"2001-2005\",\n        Year %in% c(2006, 2007, 2008, 2009, 2010) ~ \"2006-2010\",\n        Year %in% c(2011, 2012, 2013, 2014, 2015) ~ \"2011-2015\",\n        Year %in% c(2016, 2017, 2018, 2019, 2020) ~ \"2016-2020\",\n      )\n    )\n  return(dataset)\n}\nN_P_adour_garonne &lt;- f_year_categories(N_P_adour_garonne)\nbasin_N_P_adour_garonne &lt;- f_year_categories(basin_N_P_adour_garonne)\nbasin_PE_N_P_adour_garonne &lt;- f_year_categories(basin_PE_N_P_adour_garonne)\n\n\n\n\nThere are some reported discharge points without any associated WWTP, but only before 2008. In terms of flows (here for Pt and NGL) these points are not negligible.\n\n\nCode\n#check if no doublons\ndoublons &lt;-N_P_adour_garonne %&gt;%\n  select(Year, code_discharge) %&gt;%\n  count(Year, code_discharge) %&gt;%\n  filter(n !=1)\n#0 doublons for code discharge: pefect !\nrm(doublons)\n\n\n\nNb of stationsPtNGL\n\n\n\n\nCode\nggplot(basin_PE_N_P_adour_garonne) + \n  geom_col(aes(Year, nb_WWTP, fill = PE_bin), alpha=.8) +\n  labs(\n    x=\"\", caption =Source, y=\"\",\n    title = \"Discharge points without any associated WWTP\",\n    subtitle = \"yellow : with ; purple : without\",\n    fill = \"nominal capacity (PE)\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nplot_grid(\n  #Pt in\n  ggplot(basin_PE_N_P_adour_garonne) + \n    geom_col(aes(Year, Pt_in, fill = PE_bin), alpha=.8) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", caption =\"\\n\", y=\"inflow (kt Pt)\",\n      title = \"Discharge Pt flows without any associated WWTP\",\n      subtitle = \"purple : without\"\n    ),\n  #Pt out\n  ggplot(basin_PE_N_P_adour_garonne) + \n    geom_col(aes(Year, Pt_out, fill = PE_bin), alpha=.8) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", caption =Source, y=\"outflow (kt Pt)\",\n      title = \"\",\n      subtitle = \"\"\n    )\n)\n\n\n\n\n\n\n\n\n\nCode\nplot_grid(\n  #NGL in\n  ggplot(basin_PE_N_P_adour_garonne) + \n    geom_col(aes(Year, NGL_in, fill = PE_bin), alpha=.8) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", caption =\"\\n\", y=\"inflow (kt NGL)\",\n      title = \"Discharge NGL flows without any associated WWTP\",\n      subtitle = \"purple : without\"\n    ),\n  #NGL out\n  ggplot(basin_PE_N_P_adour_garonne) + \n    geom_col(aes(Year, NGL_out, fill = PE_bin), alpha=.8) +\n    theme(legend.position = \"none\") +\n    labs(\n      x=\"\", caption =Source, y=\"outflow (kt NGL)\",\n      title = \"\",\n      subtitle = \"\"\n    )\n)\n\n\n\n\n\n\n\n\n\n\nWe compare the reported NGL to our computed NGL (from NTK, NO2 and NO3). There is a good match for incoming flows (and for incoming flow NGL ~ NTK). This is not the case for outgoing flow, probably because NO3 is often not reported (which is an exclusion criteria for our computing method); same problem for 2018-2020. The reported NGL quantity seems coherent, so we choose to keep this one over our computed result.\n\nNGL, NO2, NO3, NTKBy category, inflowBy category, outflow\n\n\n\n\nCode\n# N in data preparation\ntemp &lt;- basin_N_P_adour_garonne %&gt;% select(Year, NTK_in, NO2_in, NO3_in) %&gt;%\n  gather(key = N_type, value = kt, NTK_in, NO2_in, NO3_in)\n# N out preaparation\ntemp2 &lt;- basin_N_P_adour_garonne %&gt;% \n  #renaming for the legend\n  select(Year, NTK=NTK_out, NO2=NO2_out, NO3=NO3_out) %&gt;%\n  gather(key = N_type, value = kt, NTK, NO2, NO3)\n\n#graphs\nplot_grid(\n  ggplot(temp) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_adour_garonne, \n      aes(\n        Year, NGL_in_computed, linetype=\"computed\"\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_adour_garonne, \n      aes(\n        Year, NGL_in, linetype=\"reported\"\n        )\n      ) +\n    theme(legend.position = \"none\") +\n    annotate(\"text\", x=2007, y=10, label=\"NH4\") +\n    labs(\n      x=\"\", y=\"kt of N\", \n      title = \"Reported N flows in Adour-Garonne WWTPs\",\n      subtitle = \"Inflows\",\n      caption=\"\"\n    ) +\n    ylim(0, 35),\n  ggplot(temp2) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_adour_garonne, \n      aes(\n        Year, NGL_out_computed, linetype=\"computed\"\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_adour_garonne, \n      aes(\n        Year, NGL_out, linetype=\"reported\"\n        )\n      ) +\n    theme(\n      legend.position = c(0.6, 0.7), \n      legend.title = element_blank()\n      ) +\n    annotate(\n      \"text\", label=\"NH4\", \n      x=2007, y=1.5\n      ) +\n    labs(\n      x=\"\", y=\"\", \n      title = \"\",\n      subtitle = \"Outflows\",\n      caption=Source\n    ) + \n    ylim(0, 35),\n  align = \"hv\"\n)\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_PE_N_P_adour_garonne) +\n  geom_line(aes(Year, NGL_in_computed, color=\"computed\")) +\n  geom_line(aes(Year, NGL_in, color=\"reported\")) +\n  facet_wrap(vars(PE_bin), scales=\"free_y\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_PE_N_P_adour_garonne) +\n  geom_line(aes(Year, NGL_out_computed, color=\"computed\")) +\n  geom_line(aes(Year, NGL_out, color=\"reported\")) +\n  facet_wrap(vars(PE_bin), scales=\"free_y\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Cleaning\n\nOutliers : first visualization\n\n\nFor all nutrients, inflow an outflows seem consistent, except for NO2 (very small quantities with high volatility). There are some obvious errors for all nutrients regarding head by pass and collection discharge. We correct them in the “outliers correction” tab.\n\n\nCode\nf_graph_nutrient &lt;- \n  function (\n    dataset, \n    nutrient_in, nutrient_out, nutrient_head_by_pass, nutrient_collection_discharge,\n    label, legend_x, legend_y\n    ) {\n    p &lt;- ggplot(dataset) + \n      #nutrient inflow\n      geom_line(\n        aes(\n          Year, \n          !!as.symbol(nutrient_in), \n          color=nutrient_in\n          )\n        ) + \n      #nutrient outflow\n      geom_line(\n        aes(\n          Year,\n          !!as.symbol(nutrient_out), \n          color = nutrient_out\n          )\n        ) +\n      #nutrient discharge\n      geom_line(\n        aes(\n          Year,\n          !!as.symbol(nutrient_collection_discharge), \n          color = nutrient_collection_discharge\n          )\n        ) +\n      #nutrient by pass\n      geom_line(\n        aes(\n          Year,\n          !!as.symbol(nutrient_head_by_pass), \n          color = nutrient_head_by_pass\n          )\n        ) +\n      ylim(0, NA) +\n      theme(\n        legend.position = c(legend_x, legend_y), \n        legend.title = element_blank()\n        ) +\n      labs(\n        x=\"\", y=paste(\"kt of\", label) , \n        title = paste(\"Reported\", label, \"flows in Adour-Garonne WWTPs\") ,\n        subtitle = \"reported, not necessarily actual ; here before data cleaning\", \n        caption = Source\n        )\n  return(p)\n}\n\n\n\nNGLNTKNH4NO2NO3PtDBO5DCOMESOutliers correction\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"NGL_in\", \"NGL_out\", \"NGL_head_by_pass\", \"NGL_collection_discharge\",\n  \"NGL\", 0.7, 0.7) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"NTK_in\", \"NTK_out\", \"NTK_head_by_pass\", \"NTK_collection_discharge\",\n  \"NTK\", 0.7, 0.5) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"NH4_in\", \"NH4_out\", \"NH4_head_by_pass\", \"NH4_collection_discharge\",\n  \"NH4\", 0.7, 0.5) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"NO2_in\", \"NO2_out\", \"NO2_head_by_pass\", \"NO2_collection_discharge\",\n  \"NO2\", 0.4, 0.7) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"NO3_in\", \"NO3_out\", \"NO3_head_by_pass\", \"NO3_collection_discharge\",\n  \"NO3\", 0.7, 0.5) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"Pt_in\", \"Pt_out\", \"Pt_head_by_pass\", \"Pt_collection_discharge\",\n  \"Pt\", 0.4, 0.6) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"DBO5_in\", \"DBO5_out\", \"DBO5_head_by_pass\", \"DBO5_collection_discharge\",\n  \"DBO5\", 0.4, 0.5)  \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"DCO_in\", \"DCO_out\", \"DCO_head_by_pass\", \"DCO_collection_discharge\",\n  \"DCO\", 0.4, 0.5)  \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"MES_in\", \"MES_out\", \"MES_head_by_pass\", \"MES_collection_discharge\",\n  \"MES\", 0.3, 0.8)\n\n\n\n\n\n\n\nFor all nutrient collection discharge for 0512084V0011 (CREISSELS (MILLAU)), in 2016 divide flow by 10, remove 2015 (inconsistent)\n\n\nCode\n# code_rj 0512084V0011 (CREISSELS (MILLAU)) : factor 10 for all discharge in 2016\n#DBO5\nN_P_adour_garonne$DBO5_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016] &lt;- \n  N_P_adour_garonne$DBO5_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016]/10\n#DCO\nN_P_adour_garonne$DCO_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016] &lt;- \n  N_P_adour_garonne$DCO_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016]/10\n#MES\nN_P_adour_garonne$MES_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016] &lt;- \n  N_P_adour_garonne$MES_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016]/10\n#NGL\nN_P_adour_garonne$NGL_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016] &lt;- \n  N_P_adour_garonne$NGL_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016]/10\n#NH4\nN_P_adour_garonne$NH4_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016] &lt;- \n  N_P_adour_garonne$NH4_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016]/10\n#NO2 and NO3 not reported\n#NTK\nN_P_adour_garonne$NTK_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016] &lt;- \n  N_P_adour_garonne$NTK_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016]/10\n#Pt\nN_P_adour_garonne$Pt_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016] &lt;- \n  N_P_adour_garonne$Pt_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016]/10\n#volume\nN_P_adour_garonne$VOL_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016] &lt;- \n  N_P_adour_garonne$VOL_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2016]/10\n\n# code_discharge 0512084V0011 (CREISSELS (MILLAU)) : NA for all discharge in 2015\n#DBO5\nN_P_adour_garonne$DBO5_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2015] &lt;- NA\n#DCO\nN_P_adour_garonne$DCO_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2015] &lt;- NA\n#MES\nN_P_adour_garonne$MES_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2015] &lt;- NA\n#NGL\nN_P_adour_garonne$NGL_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2015] &lt;- NA\n#NH4\nN_P_adour_garonne$NH4_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2015] &lt;- NA\n#NO2 and NO3 not reported\n#NTK\nN_P_adour_garonne$NTK_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2015] &lt;- NA\n#Pt\nN_P_adour_garonne$Pt_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2015] &lt;- NA\n#volume\nN_P_adour_garonne$VOL_collection_discharge[N_P_adour_garonne$code_discharge == \"0512084V0011\" & N_P_adour_garonne$Year == 2015] &lt;- NA\n\n\n2019 head by pass : 0519255V0021 SEILHAC (BOURG) factor 1000 for all nutrients\n\n\nCode\n# code_rj 0512084V0011 (CREISSELS (MILLAU)) : factor 10 for all discharge in 2016\n#DBO5\nN_P_adour_garonne$DBO5_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019] &lt;- \n  N_P_adour_garonne$DBO5_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019]/1000\n#DCO\nN_P_adour_garonne$DCO_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019] &lt;- \n  N_P_adour_garonne$DCO_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019]/1000\n#MES\nN_P_adour_garonne$MES_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019] &lt;- \n  N_P_adour_garonne$MES_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019]/1000\n#NGL\nN_P_adour_garonne$NGL_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019] &lt;- \n  N_P_adour_garonne$NGL_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019]/1000\n#NH4\nN_P_adour_garonne$NH4_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019] &lt;- \n  N_P_adour_garonne$NH4_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019]/1000\n#NO2 and NO3 not reported\n#NTK\nN_P_adour_garonne$NTK_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019] &lt;- \n  N_P_adour_garonne$NTK_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019]/1000\n#Pt\nN_P_adour_garonne$Pt_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019] &lt;- \n  N_P_adour_garonne$Pt_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019]/1000\n#volume\nN_P_adour_garonne$VOL_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019] &lt;- \n  N_P_adour_garonne$VOL_head_by_pass[N_P_adour_garonne$code_discharge == \"0519255V0021\" & N_P_adour_garonne$Year == 2019]/1000\n\n\nCollection discharge have a big outlier in 2014, for 0564545V0051 (INTERCOMMUNALE URRUGNE) : DBO5 factor 10, DCO factor 1000, MES factor 1000\n\n\nCode\n#MES\nN_P_adour_garonne$MES_collection_discharge[N_P_adour_garonne$code_discharge == \"0564545V0051\" & N_P_adour_garonne$Year == 2014] &lt;- \n  N_P_adour_garonne$MES_collection_discharge[N_P_adour_garonne$code_discharge == \"0564545V0051\" & N_P_adour_garonne$Year == 2014]/1000\n#DCO\nN_P_adour_garonne$DCO_collection_discharge[N_P_adour_garonne$code_discharge == \"0564545V0051\" & N_P_adour_garonne$Year == 2014] &lt;- \n  N_P_adour_garonne$DCO_collection_discharge[N_P_adour_garonne$code_discharge == \"0564545V0051\" & N_P_adour_garonne$Year == 2014]/1000\n#DBO5\nN_P_adour_garonne$DBO5_collection_discharge[N_P_adour_garonne$code_discharge == \"0564545V0051\" & N_P_adour_garonne$Year == 2014] &lt;- \n  N_P_adour_garonne$DBO5_collection_discharge[N_P_adour_garonne$code_discharge == \"0564545V0051\" & N_P_adour_garonne$Year == 2014]/10\n\n\nMES collection discharge starting 2016, very high values for 0540192V0031, inconsistent, we remove them all. For 0524037V0031, factor 1000 in 2017\n\n\nCode\n#MES\nN_P_adour_garonne$MES_collection_discharge[N_P_adour_garonne$code_discharge == \"0540192V0031\" & N_P_adour_garonne$Year %in% c(2016, 2017, 2018, 2019, 2020)] &lt;- NA\n\nN_P_adour_garonne$MES_collection_discharge[N_P_adour_garonne$code_discharge == \"0524037V0031\" & N_P_adour_garonne$Year ==2017] &lt;-\n  N_P_adour_garonne$MES_collection_discharge[N_P_adour_garonne$code_discharge == \"0524037V0031\" & N_P_adour_garonne$Year ==2017]/1000\n\n\nAll for 0519272V0041 in 2008 negative values head by pass =&gt; NA\n\n\nCode\n#DBO5\nN_P_adour_garonne$DBO5_collection_discharge[N_P_adour_garonne$code_discharge == \"0519272V0041\" & N_P_adour_garonne$Year == 2008] &lt;- NA\n#DCO\nN_P_adour_garonne$DCO_collection_discharge[N_P_adour_garonne$code_discharge == \"0519272V0041\" & N_P_adour_garonne$Year == 2008] &lt;- NA\n#MES\nN_P_adour_garonne$MES_collection_discharge[N_P_adour_garonne$code_discharge == \"0519272V0041\" & N_P_adour_garonne$Year == 2008] &lt;- NA\n#NGL\nN_P_adour_garonne$NGL_collection_discharge[N_P_adour_garonne$code_discharge == \"0519272V0041\" & N_P_adour_garonne$Year == 2008] &lt;- NA\n#NH4\nN_P_adour_garonne$NH4_collection_discharge[N_P_adour_garonne$code_discharge == \"0519272V0041\" & N_P_adour_garonne$Year == 2008] &lt;- NA\n#NO2\nN_P_adour_garonne$NO2_collection_discharge[N_P_adour_garonne$code_discharge == \"0519272V0041\" & N_P_adour_garonne$Year == 2008] &lt;- NA\n#NO3\nN_P_adour_garonne$NO3_collection_discharge[N_P_adour_garonne$code_discharge == \"0519272V0041\" & N_P_adour_garonne$Year == 2008] &lt;- NA\n#NTK\nN_P_adour_garonne$NTK_collection_discharge[N_P_adour_garonne$code_discharge == \"0519272V0041\" & N_P_adour_garonne$Year == 2008] &lt;- NA\n#Pt\nN_P_adour_garonne$Pt_collection_discharge[N_P_adour_garonne$code_discharge == \"0519272V0041\" & N_P_adour_garonne$Year == 2008] &lt;- NA\n#volume\nN_P_adour_garonne$VOL_collection_discharge[N_P_adour_garonne$code_discharge == \"0519272V0041\" & N_P_adour_garonne$Year == 2008] &lt;- NA\n\n\nfor NLG out in 2001 for code_discharge 0531555V0181, just reported same value as NGL_in. We change this by a typical value considering the adjacent years.\n\n\nCode\n#DBO5\nN_P_adour_garonne$NGL_out[N_P_adour_garonne$code_discharge == \"0531555V0181\" & N_P_adour_garonne$Year == 2001] &lt;- 4500\n\n\nWe recompute the values (yields, ratios, aggregate at the basin scale…) after our outliers changes. We save the final data.\n\n\nCode\nN_P_adour_garonne &lt;- N_P_adour_garonne %&gt;%\n  mutate(\n    #Computes yields \n    Pt_yield = (1-Pt_out/Pt_in)*100, \n    NGL_yield = (1-NGL_out/NGL_in)*100,\n    DBO5_yield =(1-DBO5_out/DBO5_in)*100, \n    DCO_yield =(1-DCO_out/DCO_in)*100,\n    MES_yield =(1-MES_out/MES_in)*100,\n    #nutrient ratios\n    N_P_ratio_in = NGL_in/Pt_in, \n    N_P_ratio_out = NGL_out/Pt_out,\n    DCO_DBO5_ratio_in = DCO_in/DBO5_in,\n    DCO_DBO5_ratio_out = DCO_out/DBO5_out,\n    DBO5_N_ratio_in = DBO5_in/NGL_in,\n    DBO5_N_ratio_out = DBO5_out/NGL_out,\n    DBO5_Pt_ratio_in = DBO5_in/Pt_in,\n    DBO5_Pt_ratio_out = DBO5_out/Pt_out\n  )\n\n\n\n\nCode\n#recompute basin values (flows, yields, ratios..)\nbasin_N_P_adour_garonne &lt;- f_basin_flows(N_P_adour_garonne)\nbasin_N_P_adour_garonne &lt;- f_all_nutrient_ratios_basin(basin_N_P_adour_garonne, N_P_adour_garonne)\nbasin_N_P_adour_garonne &lt;- f_all_yields_basin(basin_N_P_adour_garonne, N_P_adour_garonne)\nbasin_N_P_adour_garonne &lt;- f_year_categories(basin_N_P_adour_garonne)\n\n#recompute basin x PE values (flows, yields, ratios..)\nbasin_PE_N_P_adour_garonne &lt;- f_basin_PE_flows(N_P_adour_garonne)\nbasin_PE_N_P_adour_garonne &lt;- f_all_nutrient_ratios_basin_PE(basin_PE_N_P_adour_garonne, N_P_adour_garonne)\nbasin_PE_N_P_adour_garonne &lt;- f_all_yields_basin_PE(basin_PE_N_P_adour_garonne, N_P_adour_garonne)\nbasin_PE_N_P_adour_garonne &lt;- f_year_categories(basin_PE_N_P_adour_garonne)\n\n\n\n\n\n\n\n\n\n\nCapacities distribution\n\nReporting EvolutionLarge categoriesHistogramCumulative distribution\n\n\n\n\nCode\ntemp &lt;- N_P_adour_garonne %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    capacity = sum(capacity, na.rm = T)/10^6, #capacity in million PE\n    nb_WWTP = n()\n  )\n\nn_min &lt;- first(temp$nb_WWTP)\nn_max &lt;- last(temp$nb_WWTP)\ncapacity_min &lt;- round(first(temp$capacity), digits=1)\ncapacity_max &lt;- round(last(temp$capacity), digits=1)\n\n\nThe number of listed plants in the data base increases from 2948 to 4549 (a 54% increase) between 2000 and 2020, and the total capacity increases by 57% from 7.6 to 11.9 million Population Equivalent.\nThe total reported capacity stabilizes around 2015.\n\n\nCode\ncoef &lt;- max(temp$capacity)/max(temp$nb_WWTP)\nggplot(temp) +\n  geom_line(\n    aes(\n      Year, nb_WWTP, \n      color = \"number of reported facilities (left)\"\n      )\n    ) + \n  geom_line(\n    aes(\n      Year, capacity/coef, \n      color = \"total reported capacity (right)\"\n      )\n    ) + \n  scale_y_continuous(\n    limits = c(0, NA),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, \n        name=\"million Population Equivalent\"\n        )\n    ) +\n  labs(\n    title = \"Evolution of the reporting in the database\",\n    subtitle = \"in terms of number of WWTP reported and total reported capacity\",\n    y=\"\", x=\"\", \n    color=\"\", caption =Source\n  ) +\n  theme(\n    legend.position = c(0.7, 0.5)\n  )\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_adour_garonne %&gt;%\n  filter(is.na(capacity)==F) %&gt;%\n  select(Year, capacity, PE_bin) %&gt;%\n  group_by(Year, PE_bin) %&gt;%\n  summarise(\n    `capacity (million PE)` = sum(capacity)/10^6,\n    `number of stations` = n()\n  ) %&gt;% \n  gather(key=capacity_or_n, value = value, `capacity (million PE)`, `number of stations`)\n\n\n\nAbsoluteRelative\n\n\n\n\nCode\nggplot(temp) + \n  geom_area(aes(Year, value, fill=PE_bin), alpha=.8) + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  scale_fill_viridis(discrete = T) +\n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"For each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) + \n  geom_area(aes(Year, value, fill=PE_bin), position = \"fill\", alpha=.8) + \n  facet_wrap(vars(capacity_or_n), scales=\"free\") + \n  scale_fill_viridis(discrete = T) +\n  labs(\n    title=\"Reporting in the database\",\n    subtitle = \"Proportion of each capacity category\",\n    x=\"\", y=\"\", fill=\"nominal capacity \\n(Population Equivalent)\",\n    caption = Source\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_adour_garonne %&gt;% filter(Year==Year_analysis)\nggplot(temp) + \n  geom_histogram(\n    aes(\n      capacity, \n      fill = \"Nb of facilities\"\n      ), \n    n=100, alpha=.4, stat=\"density\"\n    ) +\n  geom_histogram(\n    aes(\n      capacity, weight = capacity, \n      fill=\"Nb of facilities weighted by capacity\"\n      ), \n    n=100, alpha=.4, stat=\"density\"\n    ) +\n  theme(\n    legend.position = c(0.7,0.8),\n  ) +\n  labs(\n    x=\"Waste Water Treatment Plant Capacity \\n(Population Equivalent)\",\n    y=\"Distribution density\",\n    fill=\"Distribution of\",\n    title = paste(\"WWTP capacities distribution,\", as.character(Year_analysis)),\n    subtitle = \"raw or weighted by capacity\"\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    )\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- N_P_adour_garonne %&gt;% \n  ungroup() %&gt;%\n  filter(Year==Year_analysis) %&gt;% \n  select(code_WWTP, name_WWTP, capacity) %&gt;%\n  filter(is.na(capacity) == F) %&gt;%\n  arrange(desc(capacity)) %&gt;%\n  mutate( \n    cumulative_capacity = cumsum(capacity)/10^6,\n    rank_STEU = rank(-capacity, ties.method = \"first\"),\n    percent_cumulative_capacity = round(cumulative_capacity/sum(capacity/10^6)*100, digits = 1),\n    percent_rank = round(rank_STEU/n()*100, digits = 1)\n    ) \n\nf_save_csv_files(\n  temp %&gt;% mutate(basin = \"Adour-Garonne\"), \n  \"output_data/zipf_law/\",\n  \"zipf_law_05_adour_garonne.csv\"\n)\n\ncoef &lt;- max(temp$rank_STEU)/100\ncoef2 &lt;- max(temp$cumulative_capacity)/100\n\n\n\nNb of WWTPs vs Capacity (linear scale)Nb of WWTPs vs Capacity (log scale)Zipf law\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(\n      x = percent_rank, y = percent_cumulative_capacity\n      )\n    ) + \n  labs(\n    title = paste(\"Cumulative distribution,\", Year_analysis),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) +\n  scale_x_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions PE)\"\n        )\n    ) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_step(\n    aes(\n      x = percent_rank, y = percent_cumulative_capacity\n      )\n    ) + \n  labs(\n    title = paste(\"Cumulative distribution,\", Year_analysis),\n    subtitle=\"nb of WWTP vs total capacity\",\n    x=\"% of WWTP\", y=\"% of total capacity\",\n    caption = Source\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE),\n    sec.axis = \n      sec_axis(\n        trans=~.*coef, \n        name=\"nb of WWTP\",\n        labels = scales::label_number(drop0trailing = TRUE)\n        )\n    ) + \n  scale_y_continuous(\n    sec.axis = \n      sec_axis(\n        trans=~.*coef2, \n        name=\"cumulative capacity \\n(millions Population Equivalent)\"\n        )\n    ) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(temp) +\n  geom_point(\n    aes(\n      x = rank_STEU, y = capacity\n      )\n    ) + \n  labs(\n    title = paste(\"WWTP capacity vs rank,\", Year_analysis),\n    subtitle = \"looking for a Zipf law\",\n    x=\"Waste Water Treatment Plant \\n(ranked by capacity)\",\n    y=\" Waste Water Treatment Plant capacity\\n(Population Equivalent)\"\n    ) +\n  scale_x_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    ) + \n  scale_y_log10(\n    labels = scales::label_number(drop0trailing = TRUE)\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\nPollution flows\n\nData Quality : reporting ratesBasin scaleReal flow extrapolation\n\n\nNavigate through tabs below to see details for each pollutant. For each pollutant, we present reporting for incoming and outgoing pollution, in terms of number of WWTP reporting the data or in terms of installed capacity.\nNTK, NH4, Pt, DBO5, DCO and MES are extremely well reported for both in and out flows. NGL in is also very well reported, but this is less the case for NGL out with 15% of WWTP not reporting it in 2010, and less after. However in terms of capacity it represents less than 4%.\nNO2 and NO3 are poorly reported\n\n\nCode\nf_graph_reporting_nutrients &lt;- function(pollution_in, pollution_out, pollution_DO, pollution_BP){\n  temp &lt;- N_P_adour_garonne %&gt;%\n    select(\n      Year, capacity, \n      !!as.symbol(pollution_in), !!as.symbol(pollution_out),\n      !!as.symbol(pollution_DO), !!as.symbol(pollution_BP)\n      ) %&gt;%\n    mutate(\n      nutrient_in = is.na(!!as.symbol(pollution_in))==F,\n      nutrient_out = is.na(!!as.symbol(pollution_out))==F,\n      nutrient_DO = is.na(!!as.symbol(pollution_DO))==F,\n      nutrient_BP = is.na(!!as.symbol(pollution_DO))==F\n      ) %&gt;%\n    gather(\n      key=in_out_flow, \n      value = `reported pollution`, \n      nutrient_in, nutrient_out, nutrient_DO, nutrient_BP\n      ) %&gt;%\n    group_by(\n      Year, in_out_flow, `reported pollution`\n      ) %&gt;%\n    summarise(\n      `number of WWTP`=n(), \n      `capacity (million PE)` = sum(capacity, na.rm=T)/10^6\n      ) %&gt;%\n    gather(\n      key=n_or_capacity, \n      value = value, \n      `number of WWTP`, `capacity (million PE)`\n      ) %&gt;%\n    #renaming labels\n    mutate(\n      in_out_flow = case_when(\n        in_out_flow == \"nutrient_in\" ~ pollution_in,\n        in_out_flow == \"nutrient_out\" ~ pollution_out,\n        in_out_flow == \"nutrient_DO\" ~ pollution_DO,\n        in_out_flow == \"nutrient_BP\" ~ pollution_BP\n      )\n    )\n\n  g &lt;- ggplot(temp) +\n    geom_area(aes(Year, value, fill=`reported pollution`), alpha=.8) +\n    facet_grid(\n      n_or_capacity~in_out_flow, \n      scales=\"free_y\", switch = \"y\") +\n    labs(\n      y=\"\", x=\"\",\n      title = \"Reporting of nutrient\",\n      subtitle = \"In terms of total capacity (top) and nb of WWTP (bottom)\",\n      caption = Source,\n      fill=\"reported\"\n      ) \n\n  return(g)\n}\n\n\n\nNGLNTKNH4NO2NO3PtDBO5DCOMES\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NGL_in\", \"NGL_out\", \"NGL_head_by_pass\", \"NGL_collection_discharge\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NTK_in\", \"NTK_out\", \"NTK_head_by_pass\", \"NTK_collection_discharge\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NH4_in\", \"NH4_out\", \"NH4_head_by_pass\", \"NH4_collection_discharge\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NO2_in\", \"NO2_out\", \"NO2_head_by_pass\", \"NO2_collection_discharge\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"NO3_in\", \"NO3_out\", \"NO3_head_by_pass\", \"NO3_collection_discharge\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"Pt_in\", \"Pt_out\", \"Pt_head_by_pass\", \"Pt_collection_discharge\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"DBO5_in\", \"DBO5_out\", \"DBO5_head_by_pass\", \"DBO5_collection_discharge\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"DCO_in\", \"DCO_out\", \"DCO_head_by_pass\", \"DCO_collection_discharge\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_reporting_nutrients(\"MES_in\", \"MES_out\", \"MES_head_by_pass\", \"MES_collection_discharge\")\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient &lt;- \n  function (\n    dataset, \n    nutrient_in, nutrient_out, nutrient_head_by_pass, nutrient_collection_discharge,\n    label, legend_x, legend_y\n    ) {\n    p &lt;- ggplot(dataset) + \n      #nutrient inflow\n      geom_line(\n        aes(\n          Year, \n          !!as.symbol(nutrient_in), \n          color=nutrient_in\n          )\n        ) + \n      #nutrient outflow\n      geom_line(\n        aes(\n          Year,\n          !!as.symbol(nutrient_out), \n          color = nutrient_out\n          )\n        ) +\n      #nutrient discharge\n      geom_line(\n        aes(\n          Year,\n          !!as.symbol(nutrient_collection_discharge), \n          color = nutrient_collection_discharge\n          )\n        ) +\n      #nutrient by pass\n      geom_line(\n        aes(\n          Year,\n          !!as.symbol(nutrient_head_by_pass), \n          color = nutrient_head_by_pass\n          )\n        ) +\n      ylim(0, NA) +\n      theme(\n        legend.position = c(legend_x, legend_y), \n        legend.title = element_blank()\n        ) +\n      labs(\n        x=\"\", y=paste(\"kt of\", label) , \n        title = paste(\"Reported\", label, \"flows in Adour-Garonne WWTPs\") ,\n        subtitle = \"reported, not necessarily actual\", \n        caption = Source\n        )\n  return(p)\n}\n\n\n\nNGLNTKNH4NO2NO3PtDBO5DCOMESAll N% All N forms% NH4 / NTK\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"NGL_in\", \"NGL_out\", \"NGL_head_by_pass\", \"NGL_collection_discharge\",\n  \"NGL\", 0.7, 0.7)\n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"NTK_in\", \"NTK_out\", \"NTK_head_by_pass\", \"NTK_collection_discharge\",\n  \"NTK\", 0.7, 0.5) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"NH4_in\", \"NH4_out\", \"NH4_head_by_pass\", \"NH4_collection_discharge\",\n  \"NH4\", 0.7, 0.5) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"NO2_in\", \"NO2_out\", \"NO2_head_by_pass\", \"NO2_collection_discharge\",\n  \"NO2\", 0.4, 0.7) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"NO3_in\", \"NO3_out\", \"NO3_head_by_pass\", \"NO3_collection_discharge\",\n  \"NO3\", 0.7, 0.5) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"Pt_in\", \"Pt_out\", \"Pt_head_by_pass\", \"Pt_collection_discharge\",\n  \"Pt\", 0.4, 0.6) \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"DBO5_in\", \"DBO5_out\", \"DBO5_head_by_pass\", \"DBO5_collection_discharge\",\n  \"DBO5\", 0.4, 0.5)  \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"DCO_in\", \"DCO_out\", \"DCO_head_by_pass\", \"DCO_collection_discharge\",\n  \"DCO\", 0.4, 0.5)  \n\n\n\n\n\n\n\n\n\nCode\nf_graph_nutrient(\n  basin_N_P_adour_garonne, \n  \"MES_in\", \"MES_out\", \"MES_head_by_pass\", \"MES_collection_discharge\",\n  \"MES\", 0.3, 0.8)\n\n\n\n\n\n\n\nDashed line is NGL to check for constitency.\n\n\nCode\n# N in data preparation\ntemp &lt;- basin_N_P_adour_garonne %&gt;% select(Year, NTK_in, NO2_in, NO3_in) %&gt;%\n  gather(key = N_type, value = kt, NTK_in, NO2_in, NO3_in)\n# N out preaparation\ntemp2 &lt;- basin_N_P_adour_garonne %&gt;% \n  #renaming for the legend\n  select(Year, NTK=NTK_out, NO2=NO2_out, NO3=NO3_out) %&gt;%\n  gather(key = N_type, value = kt, NTK, NO2, NO3)\n\n#graphs\nplot_grid(\n  ggplot(temp) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_adour_garonne, \n      aes(\n        Year, NH4_in\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_adour_garonne, \n      aes(\n        Year, NGL_in\n        ),\n      linetype=\"dashed\"\n      ) +\n    theme(legend.position = \"none\") +\n    annotate(\"text\", x=2007, y=10, label=\"NH4\") +\n    labs(\n      x=\"\", y=\"kt of N\", \n      title = \"Reported N flows in Adour-Garonne WWTPs\",\n      subtitle = \"Inflows\",\n      caption=\"\"\n    ) +\n    ylim(0, 35),\n  ggplot(temp2) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_adour_garonne, \n      aes(\n        Year, NH4_out\n        )\n      ) +\n    geom_line(\n      data = basin_N_P_adour_garonne, \n      aes(\n        Year, NGL_out\n        ),\n      linetype=\"dashed\"\n      ) +\n    theme(\n      legend.position = c(0.6, 0.6), \n      legend.title = element_blank()\n      ) +\n    annotate(\n      \"text\", label=\"NH4\", \n      x=2007, y=1.5\n      ) +\n    labs(\n      x=\"\", y=\"\", \n      title = \"\",\n      subtitle = \"Outflows\",\n      caption=Source\n    ) + \n    ylim(0, 35),\n  align = \"hv\"\n)\n\n\n\n\n\n\n\n\n\nCode\n# N in data preparation\ntemp &lt;- basin_N_P_adour_garonne %&gt;% select(Year, NTK_in, NO2_in, NO3_in) %&gt;%\n  gather(key = N_type, value = kt, NTK_in, NO2_in, NO3_in)\n# N out preaparation\ntemp2 &lt;- basin_N_P_adour_garonne %&gt;% \n  #renaming for the legend\n  select(Year, NTK=NTK_out, NO2=NO2_out, NO3=NO3_out) %&gt;%\n  gather(key = N_type, value = kt, NTK, NO2, NO3)\n\n#graphs\nplot_grid(\n  #inflow\n  ggplot(temp) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        ),\n      position = \"fill\"\n      ) +\n    geom_line(\n      data = basin_N_P_adour_garonne, \n      aes(\n        Year, NH4_in/(NTK_in+NO3_in+NO2_in)\n        )\n      ) +\n    theme(legend.position = \"none\") +\n    annotate(\"text\", x=2007, y=0.45, label=\"NH4\") +\n    labs(\n      x=\"\", y=\"kt of N\", \n      title = \"Reported share N flows in Adour-Garonne WWTPs\",\n      subtitle = \"Inflows\",\n      caption=\"\"\n    ),\n  #outflow\n  ggplot(temp2) +\n    geom_area(\n      aes(\n        Year, kt, \n        fill = N_type\n        ),\n      position=\"fill\"\n      ) +\n    geom_line(\n      data = basin_N_P_adour_garonne, \n      aes(\n        Year, NH4_out/(NTK_out+NO3_out+NO2_out)\n        )\n      ) +\n    theme(\n      legend.position = \"bottom\", \n      legend.title = element_blank()\n      ) +\n    annotate(\n      \"text\", label=\"NH4\", \n      x=2007, y=0.4\n      ) +\n    labs(\n      x=\"\", y=\"\", \n      title = \"\",\n      subtitle = \"Outflows\",\n      caption=Source\n    ),\n  align = \"hv\", axis=\"tblr\"\n)\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_adour_garonne) +\n  geom_line(aes(Year, NH4_in/NTK_in*100, color=\"inflow\")) +\n  geom_line(aes(Year, NH4_out/NTK_out*100, color=\"outflow\")) +\n  ylim(0, 100) +\n  theme(legend.position = c(0.3, 0.3)) +\n  labs(\n    y=\"%\", x=\"\", color=\"\",\n    title = \"Share of NH4 in NTK\",\n    subtitle = \"reported, no necessarily actual ; here after data cleaning\",\n    caption=Source\n    )\n\n\n\n\n\n\n\n\n\n\n\nCoefficient calculationPtNGLDBO5DCOMES\n\n\nWe compute in terms of installed capacity the reported and unreported flows for NGL, Pt, DBO5, DCO and MES. We do this for each year and for each capacity category.\n\n\nCode\n#create file of reported \ntemp &lt;- N_P_adour_garonne %&gt;%\n  select(\n    Year, PE_bin, capacity, \n    Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    ) %&gt;%\n  #spots unreported values for each nutrient flow\n  mutate(\n    across(\n      c(Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out),\n      ~ is.na(.x)==F\n      )\n    ) %&gt;%\n  #gather to ba able to then group by flow and count capacity\n  gather(\n    key=nutrient_flow, \n    value = reported_pollution, \n    Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    )  %&gt;%\n  #count reported capacity and unreported capacity for each (Year, capacity category, nutrient flow)\n  group_by(\n    Year, PE_bin, nutrient_flow, reported_pollution\n    ) %&gt;%\n  summarise(\n    capacity = sum(capacity, na.rm=T)/10^6\n    ) %&gt;%\n  #creates reported/unreported names for each nutrient flow and spreads into columns\n  mutate(\n    nutrient_flow = case_when(\n      reported_pollution == T ~ paste0(nutrient_flow, \"_reported\"),\n      reported_pollution == F ~ paste0(nutrient_flow, \"_unreported\")\n    )\n  ) %&gt;%\n  select(-reported_pollution) %&gt;%\n  spread(nutrient_flow, capacity)\n\n# NA values replaced by 0 for future coeff computation\ntemp[is.na(temp)] &lt;- 0\n\n\nFrom this we compute proportionate coefficient to extrapolate real flows.\n\n\nCode\ntemp &lt;- temp %&gt;%\n  mutate(\n    #Pt\n    Pt_in_coeff = (Pt_in_reported + Pt_in_unreported)/Pt_in_reported,\n    Pt_out_coeff = (Pt_out_reported + Pt_out_unreported)/Pt_out_reported,\n    #NGL\n    NGL_in_coeff = (NGL_in_reported + NGL_in_unreported)/NGL_in_reported,\n    NGL_out_coeff = (NGL_out_reported + NGL_out_unreported)/NGL_out_reported,\n    #DBO5\n    DBO5_in_coeff = (DBO5_in_reported + DBO5_in_unreported)/DBO5_in_reported,\n    DBO5_out_coeff = (DBO5_out_reported + DBO5_out_unreported)/DBO5_out_reported,\n    #DCO\n    DCO_in_coeff = (DCO_in_reported + DCO_in_unreported)/DCO_in_reported,\n    DCO_out_coeff = (DCO_out_reported + DCO_out_unreported)/DCO_out_reported,\n    #MES\n    MES_in_coeff = (MES_in_reported + MES_in_unreported)/MES_in_reported,\n    MES_out_coeff = (MES_out_reported + MES_out_unreported)/MES_out_reported,\n  ) %&gt;%\n  select(\n    -c(\n      Pt_in_reported, Pt_in_unreported,\n      Pt_out_reported, Pt_out_unreported,\n      NGL_in_reported, NGL_in_unreported,\n      NGL_out_reported, NGL_out_unreported,\n      DBO5_in_reported, DBO5_in_unreported,\n      DBO5_out_reported, DBO5_out_unreported,\n      DCO_in_reported, DCO_in_unreported, \n      DCO_out_reported, DCO_out_unreported, \n      MES_in_reported, MES_in_unreported, \n      MES_out_reported, MES_out_unreported\n      )\n    )\n\n#replace Inf values by 1 (when divided by 0)\ntemp[temp == Inf] &lt;- 1\n#replace NAN values by 1 (case of the unerported capacities)\ntemp[is.na(temp)] &lt;- 1\n\n\nWith these coefficients we compute the adjusted flows\n\n\nCode\n#file with reported flows and adjustment coefficient\ntemp2 &lt;- left_join(\n  basin_PE_N_P_adour_garonne %&gt;%\n    #selects only flows and not yields or ratios\n    select(\n      Year, PE_bin, \n      Pt_in, Pt_out, NGL_in, NGL_out, DBO5_in, DBO5_out, DCO_in, DCO_out, MES_in, MES_out\n    ),\n  temp, by=c(\"Year\", \"PE_bin\")\n)\n\n#computes adjusted flows\ntemp2 &lt;- temp2 %&gt;%\n  mutate(\n    #Pt\n    Pt_in_adj = round(Pt_in_coeff*Pt_in, 5),\n    Pt_out_adj = round(Pt_out_coeff*Pt_out, 5),\n    #NGL\n    NGL_in_adj = round(NGL_in_coeff*NGL_in, 5),\n    NGL_out_adj = round(NGL_out_coeff*NGL_out, 5),\n    #DBO5\n    DBO5_in_adj = round(DBO5_in_coeff*DBO5_in, 5),\n    DBO5_out_adj = round(DBO5_out_coeff*DBO5_out, 5),\n    #DCO\n    DCO_in_adj = round(DCO_in_coeff*DCO_in, 5),\n    DCO_out_adj = round(DCO_out_coeff*DCO_out, 5),\n    #MES\n    MES_in_adj = round(MES_in_coeff*MES_in, 5),\n    MES_out_adj = round(MES_out_coeff*MES_out, 5)\n  ) %&gt;%\n  #we remove coefficients and unajusted flows\n  select(\n    -c(\n      Pt_in, Pt_in_coeff, Pt_out, Pt_out_coeff,\n      NGL_in, NGL_in_coeff, NGL_out, NGL_out_coeff,\n      DBO5_in, DBO5_in_coeff, DBO5_out, DBO5_out_coeff,\n      DCO_in, DCO_in_coeff, DCO_out, DCO_out_coeff, \n      MES_in, MES_in_coeff, MES_out, MES_out_coeff\n    )\n  )\n\n\nWe add these adjusted flows to the main files reporting flows at the basin scale\n\n\nCode\n#adding adjusted flows to the basin x capacity files\nbasin_PE_N_P_adour_garonne &lt;- left_join(\n  basin_PE_N_P_adour_garonne, temp2, by=c(\"Year\", \"PE_bin\")\n)\n\n#aggregating adjusted flows at the basin scale without the capacity categories\ntemp &lt;- temp2 %&gt;%\n  select(-PE_bin) %&gt;%\n  group_by(Year) %&gt;%\n  summarise_all(~signif(sum(.x), 3))\n\n#adding adjusted flows to the basin files\nbasin_N_P_adour_garonne &lt;- left_join(\n  basin_N_P_adour_garonne, temp, by=\"Year\"\n)\n\n\nWe plot the comparison reported / adjusted in the following graphs. For the Adour-Garonne basin, there is virtually no difference, except for NGL discharge.\n\n\nCode\nf_graph_adjusted &lt;- function(basin_file, basin_PE_file, nutrient_adjusted, nutrient_reported, nutrient_label){\n  g &lt;- plot_grid(\n    ggplot(basin_PE_file) +\n      geom_line(\n        data = basin_file,\n        aes(Year, !!as.symbol(nutrient_adjusted)), \n        color=\"black\", size=1\n        ) + \n      geom_area(\n        aes(Year, !!as.symbol(nutrient_reported), fill=PE_bin), \n        alpha=.7\n        ) + \n      theme(legend.position = \"none\") +\n      labs(\n        x=\"\", y=\"kt per year\",\n        caption = \"\\n\",\n        title = paste(\"Adjusted\", nutrient_label, \"flows\")\n    ),\n    ggplot(basin_PE_file) +\n      geom_line(\n        aes(Year, !!as.symbol(nutrient_adjusted), color=PE_bin), \n        size=1\n        ) + \n      geom_area(\n        aes(Year, !!as.symbol(nutrient_reported), fill=PE_bin), \n        alpha=.7\n        ) + \n      theme(legend.position = \"none\") +\n      facet_wrap(vars(PE_bin), scales=\"free\") +\n      labs(\n        x=\"\", y=\"\",\n        caption = Source,\n        title = \"\",\n        subtitle = \"line: adjusted flow ; area: reported flow\"\n      ),\n    rel_widths = c(0.3, 0.7)\n  )\n  return(g)\n}\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_adour_garonne, \n  basin_PE_N_P_adour_garonne,\n  \"Pt_in_adj\", \"Pt_in\", \"incoming Pt\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_adour_garonne, \n  basin_PE_N_P_adour_garonne,\n  \"Pt_out_adj\", \"Pt_out\", \"discharged Pt\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_adour_garonne, \n  basin_PE_N_P_adour_garonne,\n  \"NGL_in_adj\", \"NGL_in\", \"incoming NGL\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_adour_garonne, \n  basin_PE_N_P_adour_garonne,\n  \"NGL_out_adj\", \"NGL_out\", \"discharged NGL\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_adour_garonne, \n  basin_PE_N_P_adour_garonne,\n  \"DBO5_in_adj\", \"DBO5_in\", \"incoming DBO5\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_adour_garonne, \n  basin_PE_N_P_adour_garonne,\n  \"DBO5_out_adj\", \"DBO5_out\", \"discharged DBO5\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_adour_garonne, \n  basin_PE_N_P_adour_garonne,\n  \"DCO_in_adj\", \"DCO_in\", \"incoming DCO\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_adour_garonne, \n  basin_PE_N_P_adour_garonne,\n  \"DCO_out_adj\", \"DCO_out\", \"discharged DCO\"\n  )\n\n\n\n\n\n\n\n\n\n\n\ninout\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_adour_garonne, \n  basin_PE_N_P_adour_garonne,\n  \"MES_in_adj\", \"MES_in\", \"incoming MES\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_adjusted(\n  basin_N_P_adour_garonne, \n  basin_PE_N_P_adour_garonne,\n  \"MES_out_adj\", \"MES_out\", \"discharged MES\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDischarge without treatment\nJust a few stations report the direct discharges of pollution. See in the previous section Pollution flows -&gt; Data Quality: reporting rates. In the 2015-2020, only about ~10% of stations reported direct discharges, but they represent about ~50% of the total installed capacity.\nThere are 3 indicators for direct discharges.\n\nbefore 2015 estimation of A1 + A2 points discharges, (original variable PORMX, renamed ._discharge_estimate in our code);\nthe direct discharges from sewers, corresponding to A1 point (original variable PORDO, renamed ._collection_discharge in our code).\nthe direct discharge just before the WWTP, corresponding to the A2 point (original variable PORBP, renamed ._head_by_pass in our code).\napparently the French “A5 point” is not reported (it seems to be already included in the outflow pollution).\n\nIn the following tab we represent these direct discharges as % of inflow in WWTP, for the WWTP where both flows are reported.\n\nUnadjustedAdjusted by nb of discharge days\n\n\nHere we see a consistent continuity between the pre-2015 estimations and ours for 2015-2020. However for proper estimation, we need to weight the flows by the number of days (per month) when a direct discharge is effectively made. This is done in the next tabs Adjusted by nb of discharge days.\n\n\nCode\n#selects discharged flows and compares them to incoming flows\nf_select_nutrient_discharge &lt;- function(nutrient){\n  #creates nutrient variable names\n  x_collection_discharge &lt;- paste0(nutrient, \"_collection_discharge\")\n  x_head_by_pass &lt;- paste0(nutrient, \"_head_by_pass\")\n  x_discharge_estimate &lt;- paste0(nutrient, \"_discharge_estimate\")\n  x_in &lt;- paste0(nutrient, \"_in\")\n  \n  #only A1 points, (PORDO, renamed _collection_discharge)\n  temp &lt;- N_P_adour_garonne %&gt;%\n    #only if both A1 point and incoming flow reported\n    filter(is.na(!!as.symbol(x_collection_discharge))==F & is.na(!!as.symbol(x_in))==F) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      collection_discharge = sum(!!as.symbol(x_collection_discharge), na.rm=T),\n      incoming = sum(!!as.symbol(x_in), na.rm=T),\n      perc_collection_discharge = collection_discharge/incoming*100\n    )\n  #A2 point, (PORBP, renamed _head_by_pass)\n  temp1 &lt;- N_P_adour_garonne %&gt;%\n    #only if both A2 point and incoming flow reported\n    filter(is.na(!!as.symbol(x_head_by_pass))==F & is.na(!!as.symbol(x_in))==F) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      head_by_pass = sum(!!as.symbol(x_head_by_pass), na.rm=T),\n      incoming = sum(!!as.symbol(x_in), na.rm=T),\n      perc_head_by_pass = head_by_pass/incoming*100\n    )\n  #combine A1 and A2 points\n  temp &lt;- left_join(\n    temp %&gt;% select(Year, perc_collection_discharge),\n    temp1 %&gt;% select(Year, perc_head_by_pass),\n    by=\"Year\"\n    ) %&gt;%\n    gather(\n      point, value, perc_head_by_pass, perc_collection_discharge\n    ) %&gt;%\n    mutate(\n      point = case_when(\n        point==\"perc_head_by_pass\"~\"A2 point\",\n        point==\"perc_collection_discharge\"~\"A1 point\",\n      )\n    )\n  \n  #estimate total before 2015, PORMX (renamed ._discharge_estimate)\n  temp1 &lt;- N_P_adour_garonne %&gt;%\n    #only if both estimation and incoming flow reported\n    filter(is.na(!!as.symbol(x_discharge_estimate))==F & is.na(!!as.symbol(x_in))==F) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      discharge_estimate = sum(!!as.symbol(x_discharge_estimate), na.rm=T),\n      incoming = sum(!!as.symbol(x_in), na.rm=T),\n      perc_discharge_estimate = discharge_estimate/incoming*100\n    )\n  \n  return(list(temp1, temp))\n}\n\n#function for graph\nf_graph_direct_disharge &lt;- function(temp, nutrient){\n  g &lt;- ggplot(temp[[1]]) +\n    geom_line(\n      aes(Year, perc_discharge_estimate, color=\"A1+A2, before 2015\"),\n      ) +\n    scale_color_manual(values = c(\"black\")) +\n    geom_area(\n      data = temp[[2]], alpha=.8,\n      aes(Year, value, fill=point)\n      ) +\n    theme(legend.title = element_blank()) +\n    labs(\n      x=\"\", y=\"%\",\n      title=paste0(\"Direct discharge of \", nutrient, \" (unajusted !)\"),\n      subtitle = \"% of WWTP inflow (A3 point)\",\n      caption = Source\n      )\n  return(g)\n}\n\n\n\nPtNGLDBO5DCOMES\n\n\n\n\nCode\ntemp &lt;- f_select_nutrient_discharge(\"Pt\")\nf_graph_direct_disharge(temp, \"Pt\")\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- f_select_nutrient_discharge(\"NGL\")\nf_graph_direct_disharge(temp, \"NGL\")\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- f_select_nutrient_discharge(\"DBO5\")\nf_graph_direct_disharge(temp, \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- f_select_nutrient_discharge(\"DCO\")\nf_graph_direct_disharge(temp, \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- f_select_nutrient_discharge(\"MES\")\nf_graph_direct_disharge(temp, \"MES\")\n\n\n\n\n\n\n\n\n\n\nThe number of days of direct discharge (used to ajust flows) are only reported for 2015-2020 for direct discharges from sewers (A2 point) and 2018-2020 for direct discharge just before the WWTP (A2 point). The result is that for 2018-2020, direct discharges in A1 and A2 points represent 5-6% of the WWTP incoming pollution.\n\n\nCode\n#selects discharged flows and compares them to incoming flows\nf_select_nutrient_discharge_adj &lt;- function(nutrient){\n  #creates nutrient variable names\n  x_collection_discharge &lt;- paste0(nutrient, \"_collection_discharge\")\n  x_head_by_pass &lt;- paste0(nutrient, \"_head_by_pass\")\n  x_discharge_estimate &lt;- paste0(nutrient, \"_discharge_estimate\")\n  x_in &lt;- paste0(nutrient, \"_in\")\n  \n  #only A1 points, (PORDO, renamed _collection_discharge)\n  temp &lt;- N_P_adour_garonne %&gt;%\n    #only if A1 point, nb of days and incoming flow are all reported\n    filter(is.na(!!as.symbol(x_collection_discharge))==F & is.na(!!as.symbol(x_in))==F & is.na(NBJDV_collection_discharge)==F) %&gt;%\n    mutate(collection_discharge = !!as.symbol(x_collection_discharge)*NBJDV_collection_discharge/30) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      collection_discharge = sum(collection_discharge, na.rm=T),\n      incoming = sum(!!as.symbol(x_in), na.rm=T),\n      perc_collection_discharge = collection_discharge/incoming*100\n    )\n  #A2 point, (PORBP, renamed _head_by_pass)\n  temp1 &lt;- N_P_adour_garonne %&gt;%\n    #only if A2 point, nb of days and incoming flow are all reported\n    filter(is.na(!!as.symbol(x_head_by_pass))==F & is.na(!!as.symbol(x_in))==F & is.na(NBJDV_A2)==F) %&gt;%\n    mutate(head_by_pass = !!as.symbol(x_head_by_pass)*NBJDV_A2/30) %&gt;%\n    group_by(Year) %&gt;%\n    summarise(\n      head_by_pass = sum(head_by_pass, na.rm=T),\n      incoming = sum(!!as.symbol(x_in), na.rm=T),\n      perc_head_by_pass = head_by_pass/incoming*100\n    )\n  #combine A1 and A2 points\n  temp &lt;- left_join(\n    temp %&gt;% select(Year, perc_collection_discharge),\n    temp1 %&gt;% select(Year, perc_head_by_pass),\n    by=\"Year\"\n    ) %&gt;%\n    gather(\n      point, value, perc_head_by_pass, perc_collection_discharge\n    ) %&gt;%\n    mutate(\n      point = case_when(\n        point==\"perc_head_by_pass\"~\"A2 point\",\n        point==\"perc_collection_discharge\"~\"A1 point\",\n      )\n    )\n  \n  return(temp)\n}\n\n#function for graph\nf_graph_direct_disharge_adj &lt;- function(temp, nutrient){\n  temp$point &lt;- \n    factor(\n      temp$point, \n      levels = \n        c(\"A2 point\", \"A1 point\")\n        )\n  \n  g &lt;- ggplot(temp) +\n    geom_area(\n      alpha=.8,\n      aes(Year, value, fill=point)\n      ) +\n    theme(legend.title = element_blank()) +\n    labs(\n      x=\"\", y=\"%\",\n      title=paste0(\"Direct discharge of \", nutrient),\n      subtitle = \"% of WWTP inflow (A3 point)\",\n      caption = Source\n      )\n  return(g)\n}\n\n\n\nPtNGLDBO5DCOMES\n\n\n\n\nCode\ntemp &lt;- f_select_nutrient_discharge_adj(\"Pt\")\nf_graph_direct_disharge_adj(temp, \"Pt\")\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- f_select_nutrient_discharge_adj(\"NGL\")\nf_graph_direct_disharge_adj(temp, \"NGL\")\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- f_select_nutrient_discharge_adj(\"DBO5\")\nf_graph_direct_disharge_adj(temp, \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- f_select_nutrient_discharge_adj(\"DCO\")\nf_graph_direct_disharge_adj(temp, \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\ntemp &lt;- f_select_nutrient_discharge_adj(\"MES\")\nf_graph_direct_disharge_adj(temp, \"MES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nRatios\n\nBasin scale\n\n\n\nN:PDCO:DBO5DBO5:N vs DBO5:P\n\n\n\n\nCode\n#temporal P/N ratio\nggplot(basin_N_P_adour_garonne) + \n  geom_line(aes(Year, N_P_ratio_in, color=\"N:P in\")) + \n  geom_line(aes(Year, N_P_ratio_out, color = \"N:P out\")) + \n  ylim(0, NA) +\n  theme(\n    legend.position = c(0.7, 0.6)\n  ) +\n  labs(\n    x=\"\", y=\"N:P ratio\",\n    title = \"N:P ratio in Adour-Garonne basin\",\n    subtitle = \"increase over time reflect phosphate detergent ban\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_adour_garonne) + \n  geom_line(aes(Year, DCO_in/DBO5_in, color=\"DCO:DBO5 in\")) + \n  geom_line(aes(Year, DCO_out/DBO5_out, color = \"DCO:DBO5 out\")) + \n  ylim(0, NA) +\n  theme(\n    legend.position = c(0.7, 0.6)\n  ) +\n  labs(\n    x=\"\", y=\"DCO:DBO5 ratio\",\n    title = \"DCO:DBO5 ratio in Adour-Garonne basin\",\n    subtitle = \"decrease in outflow shows biodegradation\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\nCode\nggplot(basin_N_P_adour_garonne) + \n  geom_point(\n    aes(\n      DBO5_in/NGL_in, DBO5_in/Pt_in, \n      color=Year_category\n      )\n    ) +\n  geom_point(\n    aes(\n      DBO5_out/NGL_out, DBO5_out/Pt_out, \n      color=Year_category\n        )\n    ) +\n  ylim(0, NA) +\n  annotate(\n    geom=\"text\", label =\"inflow\",\n    x=4, y=25\n  ) +\n  annotate(\n    geom=\"text\", label =\"outflow\",\n    x=1.3, y=8\n  ) +\n  labs(\n    x=\"DBO5:Pt ratio\", y=\"DBO5:NGL ratio\",\n    title = \"DBO5:NGL vs DBO5:Pt ratio in Adour-Garonne basin WWTPs\",\n    subtitle = \"decrease in outflow shows biodegradation\",\n    caption=Source, color=\"\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nBasin yield\n\nBasinBasin x Capacity\n\n\n\n\nCode\nggplot(basin_N_P_adour_garonne) + \n  geom_line(aes(Year, Pt_yield, color=\"P\")) + \n  geom_line(aes(Year, NGL_yield, color = \"N\")) + \n  geom_line(aes(Year, DBO5_yield, color = \"DBO5\")) +\n  geom_line(aes(Year, DCO_yield, color = \"DCO\")) +\n  geom_line(aes(Year, MES_yield, color = \"MES\")) +\n  ylim(0,100) +\n  theme(legend.position = c(0.7, 0.3)) +\n  labs(\n    title = \"Global abatement rate of Adour-Garonne WWTPs\", \n    x=\"\", y=\"Yield (%)\", color=\"\",\n    caption = Source\n    )\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE &lt;- function(dataset, nutrient_yield, nutrient_label){\n  g &lt;- ggplot(dataset %&gt;% filter(PE_bin !=\"unreported PE\")) + \n    geom_line(aes(Year, !!as.symbol(nutrient_yield), color=PE_bin)) + \n    ylim(0,100) +\n    theme(legend.position = c(0.7, 0.3)) +\n    labs(\n      title = paste(\"Global\", nutrient_label, \"yield of Adour-Garonne basin\"), \n      subtitle = \"by capacity (population equivalent)\",\n      x=\"\", y=\"Yield (%)\", color=\"\",\n      caption = Source\n      )\n  return(g)\n}\n\n\n\nPtNGLDBO5DCOMES\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_adour_garonne %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"Pt_yield\", \"Pt\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_adour_garonne %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"NGL_yield\", \"NGL\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_adour_garonne %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"DBO5_yield\", \"DBO5\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_adour_garonne %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"DCO_yield\", \"DCO\")\n\n\n\n\n\n\n\n\n\nCode\nf_graph_yield_PE(\n  basin_PE_N_P_adour_garonne %&gt;% filter(PE_bin!=\"0 - 200 PE\"), \n  \"MES_yield\", \"MES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave data\nWe save the corrected data.\n\n\nCode\n#all WWTP file\npath_output &lt;- \"output_data/all_WWTP/\"\ntemp &lt;- N_P_adour_garonne %&gt;%\n  select(\n    code_WWTP, name_WWTP, Year, capacity, name_commune, INSEE_COM, lat_WWTP, long_WWTP, PE_bin,\n    DBO5_in, DCO_in, MES_in, NGL_in, NTK_in, NH4_in, NO3_in, NO2_in, Pt_in,\n    DBO5_out, DCO_out, MES_out, NGL_out, NTK_out, NH4_out, NO3_out, NO2_out, Pt_out,\n    DBO5_yield, DCO_yield, MES_yield, NGL_yield, Pt_yield,\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"all_WWTP_05_adour_garonne.csv\"\n)\n\n#basin agregated file\npath_output &lt;- \"output_data/basins/\"\ntemp &lt;- basin_N_P_adour_garonne %&gt;%\n  select(\n    Year, capacity, nb_WWTP,\n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_05_adour_garonne.csv\"\n)\n\n#basin x PE agregated file\npath_output &lt;- \"output_data/basins_PE/\"\ntemp &lt;- basin_PE_N_P_adour_garonne %&gt;%\n  select(\n    Year, capacity, nb_WWTP, PE_bin, \n    #flows reported and adjusted\n    Pt_in, Pt_in_adj, NGL_in, NGL_in_adj, \n    DBO5_in, DBO5_in_adj, DCO_in, DCO_in_adj, MES_in, MES_in_adj,\n    Pt_out, Pt_out_adj, NGL_out, NGL_out_adj,\n    DBO5_out, DBO5_out_adj, DCO_out, DCO_out_adj, MES_out, MES_out_adj,\n    #yields\n    NGL_yield, Pt_yield, DBO5_yield, DCO_yield, MES_yield, \n    #nutrient ratios\n    N_P_ratio_in, N_P_ratio_out,\n    DBO5_N_ratio_in, DBO5_N_ratio_out, DBO5_P_ratio_in, DBO5_P_ratio_out,\n    DCO_N_ratio_in, DCO_N_ratio_out, DCO_P_ratio_in, DCO_P_ratio_out,\n    DCO_DBO5_ratio_in, DCO_DBO5_ratio_out,\n    #PE ratios\n    Pt_PE_ratio_in, Pt_PE_ratio_out, NGL_PE_ratio_in, NGL_PE_ratio_out, \n    DBO5_PE_ratio_in, DBO5_PE_ratio_out, DCO_PE_ratio_in, DCO_PE_ratio_out, MES_PE_ratio_in, MES_PE_ratio_out\n  )\nf_save_csv_files(\n  temp,\n  path_output,\n  \"basin_PE_05_adour_garonne.csv\"\n)\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "10_discharged_without_treatment.html",
    "href": "10_discharged_without_treatment.html",
    "title": "Discharged without treatment",
    "section": "",
    "text": "This pages describes the source used ot estimate the share of nutrients in sewers networks directly discharged to the environment, before even reaching the downstream wastewater treatment plant.\n\n\nCode\nknitr::opts_chunk$set(warning=F, message=F, results=F, fig.align = \"center\",  dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n#load additional relevant packages\nlibrary(readxl)\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(\n      plot.title = element_text(face=\"bold\")\n      )\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\n\nFor Artois-Picardie, Rhin-Meuse, Seine-Normandie and Loire-Bretagne basins, we have some estimations made in their experts assessments Etat des lieux reports.\nFor Artois-Picardie and Rhin-Meuse, some data was also provided about direct discharge flows, for the largest wastewater treatment plants. However this only concerns water volumes and not pollutant flows As discharges tend to have lower concentrations (because of dilution during storms), these should be seen as upper bounds.\nFor Loire-Bretagne and Adour-Garonne, we have data about direct discharge for the largest wastewater treatment plants, downloaded from the basins webpages (see in the tab WWTP flows preparation). Contrary to Artois Picardie and Rhin-Meuse, these relate to pollutant flows, and not water volumes. The analyses are made on Loire-Bretagne’s and Adour-Garonne’s respective WWTP flows preparation pages, and are not reproduced here. We only report the results from these pages.\nRhône-Méditerranée is the only basin for which we do not have any data related to direct discharges. For this basin we use the estimations made for Adour-Garonne, which is the other basin from Southern France.\nIn the following we mention French regumatory points (A1, A2, A3…) related to sewers networks and wastewater treatment plants. Their definition can be seen on this page, or by clicking on the drop-down menu below. Note that these monitored points can underestimate the actual sewers discharge to the environment, as there are sewers leakage that are not monitored.\n\n\nclick to see French regulatory points (A1, A2…)\n\nTo summarize the regulatory points of the graph below:\n\nA1 : discharge from the sewers (not necessarily one unique)\nA2 : last discharge before the wastewater treatment plant (one unique)\nA3 : flow entering the wastewater treatment plant\nA4 : outgoing flow of the wastewater treatment plant, after treatment\nA5 : by-pass, flow that entered the plant but which was not treated (rare)\n\nIn our analysis, we merge A1 and A2 point together and refer to them as “sewers direct discharge”. A3 is considered the flow into the WWTP, A4 the flow out. The A5 point is more unclear. When it is explicitly reported, we count it as as sewer direct discharge, because is is released without a treatment. But in some water agencies data, it is merged with the A4 point as a general WWTP “outflow”. In any case, the flows in A5 point are small, and this only slightly impacts the results.\n\n\nCode\npath_source &lt;- \"source_data/10_discharge_without_treatment/regulatory_points_france.png\"\nknitr::include_graphics(path_source)\n\n\n\n\n\n\n\n\n\n\n\nSources and estimations for each basin\n\nArtois-PicardieRhin - MeuseSeine-NormandieLoire-BretagneAdour-GaronneRhône-Méditerranée\n\n\nFrom the data we were communicated by mail (first tab below), discharges in A1 and A2 points represent 15-20% of the flow (in volume) entering the WWTP. Concentrations of discharges during storms tend to be lower than for usual flows during dry weather, so this rate is overestimated in terms of nutrient flows; on the other hand, these monitored discharges do not account for sewers leakage, leading to underestimation.\nIn the Etat des lieux report (second tab below), direct discharges without WWTP treatment are generally between ~10-25% of pollution entering the sewers Contrary to the data communicated by mail, this rate considers the different concentrations and unmonitored leakage, even though the estimations remains still very rough.\nWe keep 20% as a final order of magnitude value: nutrient flow discharged from sewers (A1 + A2 + unmonitored leaks), as a share of the flow entering the wastewater treatment plant (A3 point).\n\nWater flows in A1 and A2 (communicated by mail)Etat des lieux (public report)\n\n\nIn the graphs below we show water flows on A1 and A2 points communicated by mail. The data concerns WWTPs representing more than 5 million population equivalent, out of 6.4 million for Artois-Picardie basin, so ~80% of the basin capacity.\nDischarges in A1 + A2 points represent 15-20% of the flow (in volume) entering the WWTP (A3 point). This does not take into account the different concentrations of stormwater, nor the network leaks. Concentrations of discharges tend to be lower than for usual flows; on the other hand, the unmonitored leaks probably increase the rate. We keep 15-20% as an order of magnitude for this source.\n\n\nCode\n#data path\npath_source &lt;- \"source_data/10_discharge_without_treatment/artois_picardie/\"\n#read data for 2019-2021\nflows &lt;- rbind(\n  read_excel(paste0(path_source, \"2019 - ratio A1 et A1, A2, A3.xlsx\")),\n  read_excel(paste0(path_source, \"2020 - ratio A1 et A1, A2, A3.xlsx\")), \n  read_excel(paste0(path_source, \"2021 - ratio A1 et A1, A2, A3.xlsx\"))\n  )\n\n#prepare data and compute A1 and A2 water volume as a share of A3\nflows &lt;- flows %&gt;% \n  select(\n    Year = Année,\n    capacity = `Capacité STEU`,\n    A1 = `Volume annuel A1`,\n    A2 = `Volume annuel A2`,\n    A3 = `Volume annuel A3`\n  ) %&gt;%\n  mutate(\n    flow = (A1 + A2 + A3),\n    perc_discharged_A1 = round(A1/flow*100),\n    perc_discharged_A2 = round(A1/flow*100)\n    )\n\n#cpation of graphs\nSource &lt;- \"Source: data from Artois-Picardie Agency\\ncomputation by Thomas Starck\"\n\n\n\n\nCode\n#functions for graph reporting of A1 and A2 point\nf_graph_reporting &lt;- function(dataset, A_point_reported){\n  #temporary file of reporting of A1 or A2 point, in terms of capacity (population equivalent)\n  temp &lt;- dataset %&gt;%\n    group_by(Year) %&gt;%\n    mutate(\n      !!paste0(A_point_reported, \"_reported\") := ifelse(is.na(!!sym(A_point_reported)) == TRUE, \"no\", \"yes\")\n    ) %&gt;%\n    group_by(Year, !!sym(paste0(A_point_reported, \"_reported\"))) %&gt;%\n    summarise(\n      capacity = round(sum(capacity, na.rm = TRUE) / 10^6, 2),\n      flow = round(sum(flow, na.rm = TRUE) / 10^6, 0)\n    )\n  \n  #graph reporting\n  gg &lt;- ggplot(temp) +\n    geom_area(\n      aes(Year, capacity, fill = !!sym(paste0(A_point_reported, \"_reported\")), group = !!sym(paste0(A_point_reported, \"_reported\"))),\n      alpha=.8\n      ) +\n    labs(\n      y=\"million PE\", x=\"\",\n      subtitle = \"in terms of Population Equivalent (PE)\",\n      title = paste0(\"reporting of the \", A_point_reported, \" point in the data\"),\n      caption=Source\n      ) +\n    scale_y_continuous(breaks = seq(0, 7, by = 1))\n  \n  return(gg)\n}\n\n\n\nA1 pointA2 point\n\n\n\nReportingDischarged without treatment\n\n\n\n\nCode\nf_graph_reporting(flows, \"A1\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#temporary file removes empty values on A1 point\ntemp &lt;- flows %&gt;%\n  filter(is.na(A1)==F)\n#temporary file of mean value at the basin scale, by year\ntemp2 &lt;- temp %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    A1 = round(sum(A1, na.rm=T)/10^6), \n    A3 = round(sum(A3, na.rm=T)/10^6),\n    perc_discharged_A1 = round(A1/A3*100),\n    )\n\n#scatter plot graph of %, by year\nggplot(temp) +\n  #individual points\n  geom_jitter(\n    aes(Year, perc_discharged_A1, size = A3),\n    alpha=.5, width = .2\n    ) +\n  #mean value, in red\n  geom_point(\n    data = temp2, \n    aes(Year, perc_discharged_A1),\n    fill=\"red\", color=\"black\", shape=23, size=4,\n    ) +\n  scale_size(range = c(0, 15)) +\n  #men text, in red\n  geom_text(\n    data = temp2, \n    aes(Year, 65, label=paste0(perc_discharged_A1, \"%\")),\n    hjust=0, vjust=0, color=\"red\"\n    ) +\n  theme(legend.position=\"none\") +\n  labs(\n    x=\"\", y=\"%\",\n    title = \"flow discharged without treatment as % of A3 flow\",\n    subtitle = \"in A1 point. Red: value for the whole basin\",\n    size=\"incoming flow\",\n    caption=Source\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReportingDischarged without treatment\n\n\n\n\nCode\nf_graph_reporting(flows, \"A2\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#temporary file removes empty values on A2 point\ntemp &lt;- flows %&gt;%\n  filter(is.na(A2)==F)\n#temporary file of mean value at the basin scale, by year\ntemp2 &lt;- temp %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    A2 = round(sum(A2, na.rm=T)/10^6), \n    A3 = round(sum(A3, na.rm=T)/10^6),\n    perc_discharged_A2 = round(A2/A3*100),\n    )\n\n#scatter plot graph of %, by year\nggplot(temp) +\n  #individual points\n  geom_jitter(\n    aes(Year, perc_discharged_A2, size = A3),\n    alpha=.5, width = .2\n    ) +\n  #mean value, in red\n  geom_point(\n    data = temp2, \n    aes(Year, perc_discharged_A2),\n    fill=\"red\", color=\"black\", shape=23, size=4,\n    ) +\n  scale_size(range = c(0, 15)) +\n  #men text, in red\n  geom_text(\n    data = temp2, \n    aes(Year, 65, label=paste0(perc_discharged_A2, \"%\")),\n    hjust=0, vjust=0, color=\"red\"\n    ) +\n  theme(legend.position=\"none\") +\n  labs(\n    x=\"\", y=\"%\",\n    title = \"% flow discharged without treatment\",\n    subtitle = \"in A2 point. Red: value for all basin\",\n    size=\"incoming flow\",\n    caption=Source\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\nrm(flows, temp, temp2)\n\n\n\n\n\n\n\n\n\n\nIn the 2019 and 2013 Etat des lieux reports, direct discharges are generally between around ~10-25% of pollution entering the sewers We keep 20% as an order of magnitude. The experts assessment relies both on nutrient flow measures on A1 and A2 points, but also on the difference between expected discharge by people and what is actually measured at the entrance of WWTP. So the limitation previously mentioned on unmonitored leakage and concentration does not apply here, eventhough the estimation is very rough.\n\n\nCode\npath_source &lt;- \"source_data/10_discharge_without_treatment/artois_picardie/\" \n\n\n\n20192013\n\n\nDocument found on this website page, page 70\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2019.png\"))\n\n\n\n\n\n\n\n\n\n\nNPMES\n\n\nPollution discharged directly by sewers networks (in pink) represents (with 0.8 uncertainty in the global flows if we count residual pollution in grey):\n3.6/(21x4/4.7) = 20% of pollution produced by population (up to (3.6+0.8)/(21x4/4.7)=25% if we count residual pollution)\n\n\nPollution discharged directly by sewers networks (in pink) represents (with 0.1 uncertainty in the global flows if we count residual pollution in grey):\n0.5/(2.8x4/4.7) = 20% of pollution produced by population (up to (0.5+0.11)/(2.8x4/4.7)=26% if we count residual pollution)\n\n\nPollution discharged directly by sewers networks (in pink) represents (with 4.6 uncertainty in the global flows if we count residual pollution in grey):\n15/(120x4/4.7) = 15% of pollution produced by population (up to (15+4.6)/(120x4/4.7)=19% if we count residual pollution)\n\n\n\n\n\nDocument on this website page. Based on an assessment on 19 urban areas, the agency found that 10% of the pollution produced byt the population is directly discharged by storm overflows.\n\nMESDBO5NP\n\n\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2013_MES.png\"))\n\n\n\n\n\n\n\n\n\nPage 65.\nPollution discharged directly by sewers networks represent\n10/91 = 11%, up to (10+12)/91 = 25% if we count theoretical residual pollution)\n\n\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2013_DBO.png\"))\n\n\n\n\n\n\n\n\n\nPage 98.\nPollution discharged directly by sewers networks represent\n8.1/85.1 = 10% of pollution produced by population (up to (8.1+13.8)/85.1 = 25% if we count theoretical residual pollution)\n\n\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2013_N.png\"))\n\n\n\n\n\n\n\n\n\nPage 99.\nPollution discharged directly by sewers networks represent\n2/19 = 10% of pollution produced by population (up to (2+1.5)/19 = 18% if we count theoretical residual pollution)\n\n\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2013_P.png\"))\n\n\n\n\n\n\n\n\n\nPage 100.\nPollution discharged directly by sewers networks represent\n0.2/2.5 = 8% of pollution produced by population (up to (0.2+0.3)/2.5 = 20% if we count theoretical residual pollution)\n\n\n\n\n\n\n\n\n\n\n\nSimilarly to the Artois-Picardie basin (previous tab), we were communicated data on water flows in A1 and A2 points, and we have studied the Etat des lieux experts assessment report. Values are around 15-25%, we keep 20% as an order of magnitude.\n\nWater flows in A1 and A2 (communicated by mail)Etat des lieux (public report)\n\n\nThese data show that A1 + A2 direct discharge flows represent ~15% of total incoming flow, so ~18% the flow finally entering the WWTP.\n\n\nCode\npath_source &lt;- \"source_data/10_discharge_without_treatment/rhin_meuse/\"\nknitr::include_graphics(paste0(path_source, \"discharged_without_treatment_rhin_meuse.jpg\"))\n\n\n\n\n\n\n\n\n\n\n\nOn this document, p126, found on this webpage .\nwater storm / (industry to sewers + connected housings) = 0.99 / (3.44 + 0.69) = 24%\n\n\nCode\npath_source &lt;- \"source_data/10_discharge_without_treatment/rhin_meuse/\"\nknitr::include_graphics(paste0(path_source,\"etat_des_lieux.png\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor Seine-Normandie Etat des lieux, there is genarally a discrepancy concerning estimated pollution from direct discharge depending on the type of pollution considered. All expressed as % of pollution entering the WWTP:\n\nDBO5, DCO and MES are generally around 7-15%\nP is around 20-25% in 2013 and 2004\nN is around 1-4% in 2013 and 2004\n\nWe are interested in N and P, which are the more extreme values. We consider that the 1% is an implausible outlier. We chose an intermediate value corresponding to DBO5, DCO and MES: 10%. That means that N direct discharge could be overestimated by a factor 2.5 and P underestimated by 2-2.5.\n\n\nCode\npath_source &lt;- \"source_data/10_discharge_without_treatment/seine_normandie/\" \n\n\n\n201920132004\n\n\nDocument, p93, from this website page.\nIf we say that about half of the rainwater entering sewers is discharged without treatment, we can estimate the pollution discharged without treatment as % of the A3 point (entrance of station) by :\n(109-38/2)/(760-38/2) = 12% of incoming pollution in A3\n100/63 = 175% of outgoing pollution in A4\nPollution from rainwater coming in WWTP entrance represent (38/2)/760 = 2.5% of A3 point.\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2019_DCO.png\"))\n\n\n\n\n\n\n\n\n\n\n\nOn this document.\n\nDBO5DCOMESPN\n\n\np 107\nDischarged without treatment as % of A3 point (entrance of station), after removing rainwater :\n(45-2.5)/(314-9.8) = 14% of incoming pollution in A3\nPollution from rainwater coming in WWTP entrance represent 9.8/314 = 3% of A3 point.\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2013_DBO.png\"))\n\n\n\n\n\n\n\n\n\n\n\np 108\nDischarged without treatment as % of A3 point (entrance of station), after removing rainwater :\n(108-10)/(764-38) = 13% of incoming pollution in A3\nPollution from rainwater coming in WWTP entrance represent 38/764 = 5% of A3 point.\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2013_DCO.png\"))\n\n\n\n\n\n\n\n\n\n\n\np 153\nDischarged without treatment as % of A3 point (entrance of station), after removing rainwater :\n(85-60)/(394-40) = 7% of incoming pollution in A3\nPollution from rainwater coming in WWTP entrance represent 78/406 = 20% of A3 point.\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2013_MES.png\"))\n\n\n\n\n\n\n\n\n\n\n\np 135\nDischarged without treatment as % of A3 point (entrance of station), after removing rainwater :\n(2.6-0.2)/(10-0.8) = 26% of incoming pollution in A3\nPollution from rainwater coming in WWTP entrance represent 0.8/10 = 8% of A3 point.\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2013_P.png\"))\n\n\n\n\n\n\n\n\n\n\n\np 114\nDischarged without treatment as % of A3 point (entrance of station), after removing rainwater :\n(1.5-1)/(79-4) = 1% of incoming pollution in A3\nPollution from rainwater coming in WWTP entrance represent 4/79 = 5% of A3 point.\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2013_N.png\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDocument found on this website page.\n\nDCOMESPN\n\n\np 39\nDischarged without treatment as % of A3 point (entrance of station), after removing rainwater :\n(183-30)/(603-30) = 27% of incoming pollution in A3\nPollution from rainwater coming in WWTP entrance represent 20/603 = 3% of A3 point.\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2004_DCO.png\"))\n\n\n\n\n\n\n\n\n\n\n\np 42\nDischarged without treatment as % of A3 point (entrance of station), after removing rainwater :\n(85-60)/(394-40) = 7% of incoming pollution in A3\nPollution from rainwater coming in WWTP entrance represent 40/394 = 10% of A3 point.\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2004_MES.png\"))\n\n\n\n\n\n\n\n\n\n\n\np 49\nDischarged without treatment as % of A3 point (entrance of station), after removing rainwater :\n(3.2-0.5)/(13.1-0.4) = 21% of incoming pollution in A3\nPollution from rainwater coming in WWTP entrance represent 0.4/13.1 = 3% of A3 point.\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2004_P.png\"))\n\n\n\n\n\n\n\n\n\n\n\np 44\nDischarged without treatment as % of A3 point (entrance of station), after removing rainwater :\n(5.7-2.9)/(70-1.8) = 4% of incoming pollution in A3\nPollution from rainwater coming in WWTP entrance represent 1.8/70 = 2.5% of A3 point.\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2004_N.png\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe data analysed on Loire-Bretagne page (in Etat des lieux -&gt; A1, A2 and A5) results in a 15% rate for direct discharge pollution as a share of pollution entering WWTP (only monitored discharges, does not consider sewers leaks).\nThe Etat des lieux expert assessment gives figures of 10-15%, which is coherent.\nWe keep 15% as an order of magnitude.\n\nData from Loire-BretagneEtat des lieux (public report)\n\n\nSee on Loire-Bretagne data preparation page, in Etat des lieux -&gt; A1, A2 and A5.\nAs % of pollution entering the station (A3 point), direct discharge in A1, A2 and A5 represent in total 15% (respectively 9%, 4% and 2%).\n\n\n\n\nCode\npath_source &lt;- \"source_data/10_discharge_without_treatment/loire_bretagne/\" \n\n\n\n20192013\n\n\nDocument found on this website page\nIn general, direct discharge of pollution represent 10-15% of pollution entering the station in A3 point coherent with our precedent estimation. To compute this, we first compute direct discharge as % of WWTP outflow (A4 point), then compute as % of entrance (A3 point) using WWTP removal efficiency. See computation below.\np 160\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2019.png\"))\n\n\n\n\n\n\n\n\n\npage 162\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2019_yield.png\"))\n\n\n\n\n\n\n\n\n\n\nNPDBO5DCO\n\n\nPollution discharged without treatment represents\n(1.4+12.3)/23.5 = 60% of A4 point (up to (1.4+12.3+5)/23.5 = 71% with rainwater pollution)\nand\n60% x (1-0.83) = 10% of A3 point (up to with rainwater 71% x (1-0.83) = 12% pollution)\nRain water represents 5 / 23.5/(1-0.83) = 3.5% of pollution in A3 point (station entrance)\n\n\nPollution discharged without treatment represents\n(0.2+1.5)/3 = 55% of A4 point (up to (0.2+1.5+1.2)/3 = 100% with rainwater pollution)\nand\n55% x (1-0.83) = 9% of A3 point (up to 100% x (1-0.83) = 17% with rainwater pollution)\nRain water represents1.2 / 3/(1-0.83) = 7% of pollution in A3 point (station entrance)\n\n\nPollution discharged without treatment represents\n(5.5+49)/12.2 = 450% of A4 point (up to (5.5+49+33)/12.2 = 700% with rainwater pollution)\nand\n450% x (1-0.98) = 9% of A3 point (up to 700% x (1-0.98) = 14% with rainwater pollution)\nRain water represents 33 / 12.2/(1-0.98) = 6% of pollution in A3 point (station entrance)\n\n\nPollution discharged without treatment represents\n(123+13.5)/89 = 150% of A4 point (up to (123+13.5+200)/89 = 380% with rainwater pollution)\nand\n150% x (1-0.94) = 9% of A3 point (up to 380% x (1-0.94) = 23% with rainwater pollution)\nRain water represents 200 / 89/(1-0.94) = 13%% of pollution in A3 point (station entrance)\n\n\n\n\n\nOn this document, p150\n\n\nCode\nknitr::include_graphics(paste0(path_source, \"2013.png\"))\n\n\n\n\n\n\n\n\n\n\nPDCO\n\n\nDirect discharge without treatment represents\n12/59 = 17% of A4 point\nand\n12 / 59/(1-0.8) = 4% of A3 point (see 2013 yield in 2019 report)\n\n\nDirect discharge without treatment represents\n17/29 = 60% of A4 point\nand\n17 / 29/(1-0.92) = 5% of A3 point (see 2013 yield in 2019 report)\n\n\n\n\n\n\n\n\n\n\n\nThe data analysed on Adour-Garonne webpage (in Etat des lieux -&gt; A1, A2 and A5) results in ~7% rate for direct discharge pollution as a share of pollution entering WWTP.\n\n\nWe do not have data for Rhône-Méditerranée. We use the same rate as Adour-Garonne, the other French Southern basin (with the closest climate), ~7%\n\n\n\n\n\nSynthesis\nCaution, theses should be seen as orders of magnitude. The definition of losses may differ between basins (sometimes the A5 point is considered and sometimes not, sometimes unmonitored sewer losses are estimated and sometimes not…). At the national scale, the population-weigthed average is 10%.\n\n\nCode\n#path of the file with our estimation for each basin\npath_source &lt;-\"source_data/10_discharge_without_treatment/\"\n\n#load file\ndischarge &lt;- \n  read.csv(\n    paste0(path_source, \"discharge_without_treatment_estimations.csv\"),\n    ) %&gt;%\n  mutate(value = paste(percent_loss*100, \"%\"))\n#order by increasing %\ndischarge$basin &lt;- reorder(discharge$basin, discharge$percent_loss)\n\n#graph\nggplot(discharge) +\n  geom_col(\n    aes(\n      basin, \n      percent_loss*100, \n      fill=basin\n      )\n    ) +\n  geom_text(\n    aes(basin, percent_loss*100, label = paste(percent_loss*100, \"%\")),\n    fontface=\"italic\", family = \"Times New Roman\", hjust=0\n  ) +\n  theme(\n    strip.text.y.right = element_text(angle = 0),\n    legend.position = \"none\") +\n  coord_flip() +\n  ylim(0, 100) +\n  labs(\n    y=\"%\", x=\"\",\n    title = \"Pollution discharged without treatment as % WWTP entrance\",\n    caption=\"based on combination of data and expert judgements from the 6 basins\"\n    )\n\n\n\n\n\n\n\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "12_sensitive_areas.html",
    "href": "12_sensitive_areas.html",
    "title": "Sensitive Areas",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#loading relevant packages\nlibrary(cowplot) #for plot_grid() (multiple plots)\nlibrary(readxl) # to read excel file\nlibrary(sf) #for spherical geometry operations\n#at first with sf there was an issues with GDAL and PROJ librairies that were not found. I found the answer here https://github.com/r-spatial/sf/issues/2302 and here https://github.com/r-spatial/sf/issues/2298. I uninstalled the sf package and manually installed it with install.packages('sf', repos = c('https://r-spatial.r-universe.dev')). This changed the version from 1.0-15 to 1.0-16\n\n#path for data \npath_source &lt;- \"\"\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(\n      plot.title = element_text(face=\"bold\")\n      )\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\n#caption for all graphs\nSource &lt;- \"Source: data.europa.eu\\ncomputation by Thomas Starck\"\n\n\nlink to the decrees defining the sensitive zones. Go to TEXTES TECHNIQUES RELATIFS A L’ASSAINISSEMENT COLLECTIF -&gt; 2.1. Arrêtés de délimitation\n\n1994 ministerial ruling, November 23. No quantitative objectives, just says that for WWTP discharging more than 600 kg of organic pollution per day, the prefect gives goals of reduction. Refers to the 1994, June 3 decree whose article 6 which says that in water bodies sensitive to eutrophication, nitrogen and phosphorus discharges must be reduced.\n1999 ministerial ruling\n2022 ministerial rulin for Martinique\n\n\nSources\nThe data for the water agencies areas were found on the French data.gouv portal.\nThe geographical data of N and P sensitive zones were found here, on the european data portal.\nAdditional data about N and P sensitive zones were also found on the French sanitation portal.\n\n\nPrepare Data\nWe load the geographical borders of the 6 water agencies.\n\n\nCode\n#load water agencies border data shapefile\nbasins &lt;- sf::st_read(\"source_data/maps/water_agencies/simplified_CircAdminBassin2021/CircAdminBassin2021.shp\")\n\n#focus on metropole\nbasins_metropole &lt;- basins %&gt;%\n  #keep only metropolitan basins\n  filter(\n    NumCircAdm %in% c(\"01\", \"02\", \"03\", \"04\", \"05\", \"06\")\n  ) %&gt;%\n  #remove useless columns\n  select(\n    basin_name = NomCircAdm, \n    basin_num = NumCircAdm\n  ) %&gt;%\n  #change name to be similar to the other files\n  mutate(\n    basin_name = case_when(\n      basin_name == \"ADOUR-GARONNE\" ~ \"Adour-Garonne\",\n      basin_name == \"ARTOIS-PICARDIE\" ~ \"Artois-Picardie\",\n      basin_name == \"LOIRE-BRETAGNE\" ~ \"Loire-Bretagne\",\n      basin_name == \"RHIN-MEUSE\" ~ \"Rhin-Meuse\",\n      basin_name == \"RHONE-MEDITERRANEE\" ~ \"Rhone-Méditerranée\",\n      basin_name == \"SEINE-NORMANDIE\" ~ \"Seine-Normandie\"\n    )\n  )\n#keep only metropolitan data\nrm(basins)\n\n\nWe load the data of the sensitive zones and focus only on metropolitan France. The European file gives us the geographical areas, the sanitation portal file adds data about the “conformity date” besides the “decree date”.\n\n\nCode\n#load EU geographical data about sensitive zones (shapefile)\nfile_sensitive_zones &lt;- sf::st_read(\"source_data/maps/sensitive_zones/ZoneSensible_FRA_ZRPE_2.shp\") %&gt;%\n  #more explicit name, also used in file below, used to merge the 2 files\n  rename(EU_code_zone = CdEuZS)\n\n#load French spreadsheet, gives addictional info on conformity dates and so on\nfile_sanitation_portal &lt;- read_excel(\"source_data/maps/sensitive_zones/Export_ZS_2020_05_29-1.xlsx\", range = \"A1:I142\") %&gt;%\n  #more explicit name, also used in file above, used to merge the 2 files\n  rename(EU_code_zone = `Code-européen  CM* - CA*`) %&gt;%\n  #add water agencies names\n  mutate(\n    basin = case_when(\n      substr(code_national, 1, 2) == \"01\" ~  \"Artois-Picardie\",\n      substr(code_national, 1, 2) == \"02\" ~  \"Rhin-Meuse\",\n      substr(code_national, 1, 2) == \"03\" ~ \"Seine-Normandie\", \n      substr(code_national, 1, 2) == \"04\" ~ \"Loire-Bretagne\",\n      substr(code_national, 1, 2) == \"05\" ~  \"Adour-Garonne\",\n      substr(code_national, 1, 2) == \"06\" ~  \"Rhône-Méditerranée\",\n      T~\"Overseas\"\n    )\n  )\n\n#merging the 2 files\ntemp &lt;- merge(\n  file_sensitive_zones, \n  file_sanitation_portal, \n  by=\"EU_code_zone\"\n  )\n#keeping columns of interest from each of the 2 files\ntemp &lt;- temp %&gt;%\n  select(\n    #sanitation portal file\n    EU_code_zone, code_national, nom, nom_court, traitement_requis, basin,\n    date_arrêté_N, date_arrêté_P, date_conformité_N, date_conformité_P,\n    \n    #EU file\n    gml_id, gid, NomZS, NomCourtZS, StZS, timePositi, CdTraiteme, LbTraiteme, DateLimite,\n    CdTypeZone, MnTypeZone, LbTypeZone, \n    DatePubliT, #date of decree for P sensitive zone ?\n    DateLimi_1, #date of decree for N sensitive zone ?\n    DatePubl_1, \n    ComZS\n  )\n\n#final file\nsensitive_zones &lt;- temp %&gt;%\n  select(\n    basin,\n    P_decree_date = date_arrêté_P, \n    N_decree_date = date_arrêté_N,\n    P_conformity_date = date_conformité_P, \n    N_conformity_date = date_conformité_N,\n    sensitive_type = LbTraiteme,\n    name_sensitive_zone = NomZS,\n    name_sensitive_zone_simple = NomCourtZS,\n    id_sensitive_zone = gid,\n    geometry\n    \n  )\nrm(temp)\n\n#remove non-metropolitan sensitive zones\nmetropole &lt;- function(map_sf){\n  map_sf &lt;- map_sf %&gt;% \n    filter(!id_sensitive_zone %in% c(14, 15, 16, 17, 18, 137, 138, 139, 140, 141))\n  return(map_sf)\n}\nsensitive_zones &lt;- metropole(sensitive_zones)\n\n#color scale for basins\nbasin_colors &lt;- c(\"#440154\", \"#414487\", \"#2a788e\", \"#7ad151\", \"#22a884\", \"#fde725\")\nbasin_names &lt;- c(\"Seine-Normandie\", \"Loire-Bretagne\", \"Artois-Picardie\", \"Adour-Garonne\", \"Rhin-Meuse\", \"Rhône-Méditerranée\")\nsensitive_zones$basin &lt;- \n  factor(\n    sensitive_zones$basin, \n    levels = \n      c(\"Seine-Normandie\",\n        \"Loire-Bretagne\",\n        \"Artois-Picardie\",\n        \"Rhin-Meuse\",\n        \"Adour-Garonne\", \n        \"Rhône-Méditerranée\"\n        )\n      )\n\n\n\n\nSensitive areas\nLogically, the cards below in the 2 panes are identical, because the 2017 decree sets the 2024 to reach conformity.\n\nLatest conformity date (2024)Latest decree (2017)\n\n\n\n\nCode\ndraw_map_2024_conformity &lt;- function(sensitive_zones, basins_metropole){\n  temp &lt;-  sensitive_zones %&gt;%\n    select(\n      basin,\n      `Sensitive Area P`=P_conformity_date,\n      `Sensitive Area N`=N_conformity_date,\n      geometry\n      ) %&gt;%\n    gather(N_or_P, date, `Sensitive Area P`, `Sensitive Area N`) %&gt;%\n    filter(is.na(date)==F)\n  \n  p &lt;- ggplot(temp) + \n    geom_sf(\n      aes(fill=basin), \n      color = NA, size=0, alpha=.6\n      ) + \n    geom_sf(\n      data = basins_metropole, \n      color = \"black\", fill=NA,\n      ) +\n    scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n    coord_sf(datum = NA, expand = FALSE) + #remove coordinates\n    theme(\n      panel.background = element_blank(),\n      legend.position = \"bottom\"\n      ) +\n    facet_wrap(vars(N_or_P)) +\n    labs(\n      title = \"Sensitive areas N and P, for each water agency\",\n      subtitle = \"defined by 2024 conformity date\",\n      caption = Source,\n      fill=\"\"\n    )\n  return(p)\n}\ndraw_map_2024_conformity(sensitive_zones, basins_metropole) \n\n\n\n\n\n\n\n\n\nCode\ndraw_map_2017_decree &lt;- function(sensitive_zones, basins_metropole){\n  temp &lt;-  sensitive_zones %&gt;%\n    select(\n      basin,\n      `Sensitive Area P`=P_decree_date,\n      `Sensitive Area N`=N_decree_date,\n      geometry\n      ) %&gt;%\n    gather(N_or_P, date, `Sensitive Area P`, `Sensitive Area N`) %&gt;%\n    filter(is.na(date)==F)\n  \n  p &lt;- ggplot(temp) + \n    geom_sf(\n      aes(fill=basin), \n      color = NA, size=0, alpha=.6\n      ) + \n    geom_sf(\n      data = basins_metropole, \n      color = \"black\", fill=NA,\n      ) +\n    scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n    coord_sf(datum = NA, expand = FALSE) + #remove coordinates\n    theme(\n      panel.background = element_blank(),\n      legend.position = \"bottom\"\n      ) +\n    facet_wrap(vars(N_or_P)) +\n    labs(\n      title = \"Sensitive areas N and P, for each water agency\",\n      subtitle = \"defined by 2017 decree\",\n      caption = Source,\n      fill=\"\"\n    )\n  return(p)\n}\ndraw_map_2017_decree(sensitive_zones, basins_metropole) \n\n\n\n\n\n\n\n\n\n\nEvolution, by decree date\n\n\nCode\n# Define the expand_sensitive_zones function\nexpand_sensitive_zones &lt;- function(df, date_column) {\n  df &lt;- df %&gt;% st_drop_geometry()\n  \n  # Create a vector of unique id_sensitive_zone\n  unique_zones &lt;- df %&gt;%\n    filter(!is.na(.data[[date_column]])) %&gt;%  # Use .data to access the column by name\n    distinct(id_sensitive_zone) %&gt;%\n    pull()\n\n  # Initialize an empty data frame to store the expanded rows\n  expanded_df &lt;- data.frame(\n    id_sensitive_zone = character(),\n    date = as.Date(character())\n  )\n\n  # Loop through each unique id_sensitive_zone and their corresponding date\n  for (zone in unique_zones) {\n    # Get the date of the sensitive zone\n    date_id &lt;- df[df$id_sensitive_zone == zone, date_column]\n\n    # Get unique dates greater or equal to the date of the sensitive zone\n    unique_dates &lt;- na.omit(unique(df[, date_column][df[, date_column] &gt;= date_id]))\n\n    # Create rows for (id_sensitive_zone, date_i) combinations\n    new_rows &lt;- data.frame(id_sensitive_zone = zone, date = unique_dates)\n\n    # Add the new rows to the expanded data frame\n    expanded_df &lt;- rbind(expanded_df, new_rows)\n  }\n\n  return(expanded_df)\n}\n\n\n\n\nCode\ndraw_map_decree &lt;- function(sensitive_zones, basins_metropole, date_column){\n  temp &lt;-  sensitive_zones %&gt;%\n    filter(!is.na(.data[[date_column]]))\n  \n  p &lt;- ggplot(temp) + \n    geom_sf(\n      fill = \"#440154\", size=0, alpha=.6, color=\"NA\"\n      ) + \n    geom_sf(\n      data = basins_metropole, \n      color = \"black\", fill=NA,\n    ) +\n    scale_fill_manual(\n      values = basin_colors, labels=basin_names, breaks=basin_names\n    ) +\n    coord_sf(datum = NA, expand = FALSE) +\n    theme(\n      panel.background = element_blank()\n    ) +\n    facet_wrap(vars(year(.data[[date_column]]))) +\n    labs(\n      title = paste(\"Sensitive areas \", date_column, \", for each water agency\", sep=\"\"),\n      caption = Source\n    )\n  return(p)\n}\n\n\n\nNP\n\n\n\nMapsAnimated\n\n\n\n\nCode\ndraw_map_decree(expanded_sf_N, basins_metropole, \"N_decree_date\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMapsAnimated\n\n\n\n\nCode\ndraw_map_decree(expanded_sf_P, basins_metropole, \"P_decree_date\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvolution, by conformity date\n\nNP\n\n\n\n\nCode\n# Call the function with the \"N_decree_date\" column\nexpanded_df_N &lt;- expand_sensitive_zones(sensitive_zones, \"N_conformity_date\")\n\n# Get geometry and transform to sf file for N_decree_date\nexpanded_sf_N &lt;- st_as_sf(\n  left_join(\n    expanded_df_N %&gt;% rename(N_conformity_date = date),\n    sensitive_zones %&gt;% select(-N_conformity_date),\n    by = \"id_sensitive_zone\"\n  )\n)\n\n\n\nMapsAnimatedCompare to official maps\n\n\n\n\nCode\ndraw_map_decree(expanded_sf_N, basins_metropole, \"N_conformity_date\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Load necessary libraries\nlibrary(jpeg)\nlibrary(png)\n\n#boundaries of France, to have the png and jpg maps at scale next to our map\n\n# Calculate the bounding box\nbbox &lt;- st_bbox(expanded_sf_N)\n# Set the plot extents\nxmin &lt;- bbox$xmin\nxmax &lt;- bbox$xmax\nymin &lt;- bbox$ymin\nymax &lt;- bbox$ymax\n\n\n\n\nCode\nside_by_side_maps &lt;- function(map_image, year, rel_w1, rel_w2, date_column){\n  \n  # Create sensitive zones maps for the year\n  gg &lt;- draw_map_decree(\n    expanded_sf_N %&gt;% filter(year(expanded_sf_N[[date_column]])==year), \n    basins_metropole, \n    date_column\n    ) +\n    labs(title = \"\", caption = \"\")\n  \n  # Create a ggplot2 plot with the JPEG image annotation\n  gg_1 &lt;- ggplot() +\n    annotation_raster(map_image, xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax) +\n    coord_sf(xlim = c(xmin, xmax), ylim = c(ymin, ymax), expand=F, crs=st_crs(expanded_sf_N), datum=NA) \n  \n  #2 maps side by side\n  combined_plots &lt;- plot_grid(\n    gg, gg_1, \n    nrow = 1, \n    rel_widths = c(rel_w1, rel_w2), \n    axis=\"tblr\", align = \"hv\"\n    )\n  \n  return(combined_plots)\n}\n\n\n\n19982006201320172024\n\n\nne correspond pas. 1994 minister ruling\n\n\nCode\nmap_image &lt;- readJPEG(\"source_data/12_sensitive_areas/1998_sensitive_areas.jpg\")\nside_by_side_maps(map_image, 1998, .5, .5, \"N_conformity_date\")\n\n\n\n\n\n\n\nje n’ai pas les dates 2006 pour l’azote, mais semble correspondre à 1998, manque juste frontière suisse\n\n\nCode\nmap_image &lt;- readJPEG(\"source_data/12_sensitive_areas/2006_N_sensitive_areas.jpg\")\nside_by_side_maps(map_image, 1998, .4, .6, \"N_conformity_date\")\n\n\n\n\n\n\n\nmanque juste frontière suisse\n\n\nCode\nmap_image &lt;- readJPEG(\"source_data/12_sensitive_areas/2013_N_sensitive_areas.jpg\")\nside_by_side_maps(map_image, 2013, .4, .6, \"N_conformity_date\")\n\n\n\n\n\n\n\ncorrespond bien\n\n\nCode\nmap_image &lt;- readPNG(\"source_data/12_sensitive_areas/2017_N_sensitive_areas.png\")\nside_by_side_maps(map_image, 2017, .4, .6, \"N_conformity_date\")\n\n\n\n\n\n\n\ncorrespond bien\n\n\nCode\nmap_image &lt;- readPNG(\"source_data/12_sensitive_areas/2024_N_sensitive_areas.png\")\nside_by_side_maps(map_image, 2024, .4, .6, \"N_conformity_date\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Call the function with the \"N_decree_date\" column\nexpanded_df_P &lt;- expand_sensitive_zones(sensitive_zones, \"P_conformity_date\")\n\n# Get geometry and transform to sf file for N_decree_date\nexpanded_sf_P &lt;- st_as_sf(\n  left_join(\n    expanded_df_P %&gt;% rename(P_conformity_date = date),\n    sensitive_zones %&gt;% select(-P_conformity_date),\n    by = \"id_sensitive_zone\"\n  )\n)\n\n\n\nMapsAnimated\n\n\n\n\nCode\ndraw_map_decree(expanded_sf_P, basins_metropole, \"P_conformity_date\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEffectively sensitive\nsûrement enlever les années avant 2006\n\n\nCode\n# get all decrees and conformity dates\nyears &lt;- sort(na.omit(unique(year(\n  c(sensitive_zones$P_decree_date,\n    sensitive_zones$N_decree_date,\n    sensitive_zones$N_conformity_date,\n    sensitive_zones$P_conformity_date\n    )\n  ))))\nyears\n\n#preapre empty df\neffectively_sensitive_zones &lt;- sensitive_zones %&gt;% mutate(Year = year(as.POSIXct(0)))\neffectively_sensitive_zones &lt;- effectively_sensitive_zones[0, ]\n\nfor (year in years) {\n  temp2 &lt;- sensitive_zones %&gt;% \n    mutate(\n      Year = year(as.POSIXct(paste0(year, \"-01-01\")))\n      )\n  \n  # N sensitivity\n  temp2 &lt;- temp2 %&gt;%\n    mutate(\n      N_sensitivity = case_when(\n        is.na(N_decree_date) | is.na(N_conformity_date) ~ \"non sensitive\",\n        (year(N_conformity_date) &lt;= Year) & (Year &lt; year(N_decree_date)) ~ \"non sensitive\",\n        (year(N_conformity_date) &lt;= Year) & (year(N_decree_date) &lt;= Year) ~ \"sensitive\",\n        (Year &lt; year(N_conformity_date)) & (year(N_decree_date) &lt;= Year)  ~ \"sensitive in progress\",\n        (Year &lt; year(N_conformity_date)) & (Year &lt; year(N_decree_date))  ~ \"non sensitive\",\n        T~\"forgotten condition N\"\n      )\n    )\n  \n  # P sensitivity\n  temp2 &lt;- temp2 %&gt;%\n    mutate(\n      P_sensitivity = case_when(\n        is.na(P_decree_date) | is.na(P_conformity_date) ~ \"non sensitive\",\n        (year(P_conformity_date) &lt;= Year) & (Year &lt; year(P_decree_date)) ~ \"non sensitive\",\n        (year(P_conformity_date) &lt;= Year) & (year(P_decree_date) &lt;= Year) ~ \"sensitive\",\n        (Year &lt; year(P_conformity_date)) & (year(P_decree_date) &lt;= Year)  ~ \"sensitive in progress\",\n        (Year &lt; year(P_conformity_date)) & (Year &lt; year(P_decree_date))  ~ \"non sensitive\",\n        T~\"forgotten condition P\"\n      )\n    )\n  \n  #remove non sensitive zone(s\n  temp2 &lt;- temp2 %&gt;% filter(!(P_sensitivity==\"non sensitive\" & N_sensitivity==\"non sensitive\"))\n  \n  effectively_sensitive_zones &lt;- bind_rows(effectively_sensitive_zones, temp2)\n  \n}\n\n\n\n\nCode\ndraw_map_effectively_sensitive &lt;- function(data, basins_metropole, N_or_P_sensitivity){\n  data &lt;- data %&gt;% filter({{ N_or_P_sensitivity }} != \"non sensitive\")\n  data\n  \n  p &lt;- ggplot(data) + \n    geom_sf(\n      aes(fill={{ N_or_P_sensitivity }}),\n      size=0, alpha=.6, color=NA\n      ) + \n    scale_fill_manual(\n      values = c(\"sensitive\" = \"#440154\", \"sensitive in progress\" = \"#21918c\"),\n      limits = c(\"sensitive\", \"sensitive in progress\") #to display all the colors in legend, even when not present in data (for year by year gif)\n      ) +\n    geom_sf(\n      data = basins_metropole, \n      color = \"black\", fill=NA,\n    ) +\n    coord_sf(datum = NA, expand = FALSE) +\n    theme(\n      panel.background = element_blank(),\n      legend.position = \"top\"\n    ) +\n    facet_wrap(~Year) +\n    labs(\n      title = \"Sensitive areas for each water agency\",\n      caption = Source,\n      fill=\"\"\n    )\n  return(p)\n}\n\n\n\nNP\n\n\n\nMapsAnimated Map\n\n\n\n\nCode\ndraw_map_effectively_sensitive(\n  effectively_sensitive_zones, \n  basins_metropole,\n  N_sensitivity\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMapsAnimated Map\n\n\n\n\nCode\ndraw_map_effectively_sensitive(\n  effectively_sensitive_zones, \n  basins_metropole,\n  P_sensitivity\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinal maps\n\n\nCode\ngg1 &lt;- draw_map_effectively_sensitive(\n  effectively_sensitive_zones %&gt;% filter(Year %in% c(2006, 2013, 2017, 2024)), \n  basins_metropole,\n  N_sensitivity\n  ) +\n  facet_wrap(vars(Year), nrow=1) +\n  labs(title=\"Evolution of classified 'N sensitive' areas\", caption=\"\")\ngg1\n\n\n\n\n\nCode\nggsave(#png\n  \"graphs/N_sensitive_zones.png\",\n  dpi=700, width=6, height=3, bg=\"white\", create.dir = T\n  )\n\ngg2 &lt;- draw_map_effectively_sensitive(\n  effectively_sensitive_zones %&gt;% filter(Year %in% c(2006, 2013, 2017, 2024)), \n  basins_metropole,\n  P_sensitivity\n  )+\n  facet_wrap(vars(Year), nrow=1) +\n  labs(title=\"Evolution of classified 'P sensitive' areas\", caption=\"\")\ngg2\n\n\n\n\n\nCode\nggsave(#png\n  \"graphs/P_sensitive_zones.png\",\n  dpi=700, width=6, height=3, bg=\"white\", create.dir = T\n  )\n\n\n\n\nCode\nrm(list = ls())"
  },
  {
    "objectID": "31_Sankeys.html",
    "href": "31_Sankeys.html",
    "title": "Sankeys",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(warning=F, message=F, results=F, dev='svg')\n\nlibrary(tidyverse) #loads multiple packages (see https://tidyverse.tidyverse.org/)\n\n#core tidyverse packages loaded:\n# ggplot2, for data visualisation. https://ggplot2.tidyverse.org/\n# dplyr, for data manipulation. https://dplyr.tidyverse.org/\n# tidyr, for data tidying. https://tidyr.tidyverse.org/\n# readr, for data import. https://readr.tidyverse.org/\n# purrr, for functional programming. https://purrr.tidyverse.org/\n# tibble, for tibbles, a modern re-imagining of data frames. https://tibble.tidyverse.org/\n# stringr, for strings. https://stringr.tidyverse.org/\n# forcats, for factors. https://forcats.tidyverse.org/\n# lubridate, for date/times. https://lubridate.tidyverse.org/\n\n#also loads the following packages (less frequently used):\n# Working with specific types of vectors:\n#     hms, for times. https://hms.tidyverse.org/\n# Importing other types of data:\n#     feather, for sharing with Python and other languages. https://github.com/wesm/feather\n#     haven, for SPSS, SAS and Stata files. https://haven.tidyverse.org/\n#     httr, for web apis. https://httr.r-lib.org/\n#     jsonlite for JSON. https://arxiv.org/abs/1403.2805\n#     readxl, for .xls and .xlsx files. https://readxl.tidyverse.org/\n#     rvest, for web scraping. https://rvest.tidyverse.org/\n#     xml2, for XML. https://xml2.r-lib.org/\n# Modelling\n#     modelr, for modelling within a pipeline. https://modelr.tidyverse.org/\n#     broom, for turning models into tidy data. https://broom.tidymodels.org/\n\n# Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#loading relevant packages\nlibrary(networkD3) #for sankey\nlibrary(htmlwidgets) #for sankey\nlibrary(readxl) #to read excel file\nlibrary(cowplot) #for plot_grid, multiple plots\n\n #seed for reproducibility of random generation\nset.seed(123)\n\n#setting graphs theme\ntheme_set(\n  theme_minimal() +\n    theme(\n      plot.title = element_text(face=\"bold\")\n      )\n  )\n\n#setting viridis theme for colors\nscale_colour_continuous &lt;- scale_colour_viridis_c\nscale_colour_discrete   &lt;- scale_colour_viridis_d\nscale_colour_binned     &lt;- scale_colour_viridis_b\n#setting viridis theme for fill\nscale_fill_continuous &lt;- scale_fill_viridis_c\nscale_fill_discrete   &lt;- scale_fill_viridis_d\nscale_fill_binned     &lt;- scale_fill_viridis_b\n\nSource &lt;- \"Source: \\ncomputation by Thomas Starck\"\n\n# Load the function file\nsource(\"functions.R\")"
  },
  {
    "objectID": "31_Sankeys.html#p",
    "href": "31_Sankeys.html#p",
    "title": "Sankeys",
    "section": "P",
    "text": "P\n\n\nCode\n#reload Sankey P for whole France\nsankey_P &lt;- read_csv(\"output_data/sankey_flows/phosphorus/sankey_P_flows_France.csv\")\nsankey_P$min &lt;- NA #create min column for low range of percentile ditribution\nsankey_P$max &lt;- NA #create max column for high range of percentile ditribution\n\n\n\n# P IN WWTP (sewage network to WWTP)\n# normal distribution 10% uncertainty\nsource &lt;- \"sewage network\" ; target &lt;- \"WWTP\" #source and target of the flow\nP_in_WWTP &lt;- f_generate_normal_dstribution(source, target, sankey_P, print = F) #create flow distribution\nsankey_P &lt;- f_add_min_max(source, target, P_in_WWTP, sankey_P) #add min and max percentiles values\n\n\n\n# P OUT WWTP (WWTP to water), \n# normal distribution 10% uncertainty\nsource &lt;- \"WWTP\" ; target &lt;- \"water\" #source and target of the flow\nP_out_WWTP &lt;- f_generate_normal_dstribution(source, target, sankey_P, print = F) #create flow distribution\nsankey_P &lt;- f_add_min_max(source, target, P_out_WWTP, sankey_P) #add min and max percentiles values\n\n\n\n# P INDUSTRIES (large industries to sewage network)\n# normal distribution 10% uncertainty\nsource &lt;- \"large industries\" ; target &lt;- \"sewage network\" #source and target of the flow\nP_industries &lt;- f_generate_normal_dstribution(source, target, sankey_P, print = F) #create flow distribution\nsankey_P &lt;- f_add_min_max(source, target, P_industries, sankey_P) #add min and max percentiles values\n\n\n\n# P EXCRETIONS TO SEWERS AND IAS\n\n# excretions. Uncertainty is a uniform distribution based on our value of excretion by per capita (0.44 kgP/year), compared to the range of our literature review (0.44 to 0.58)\nP_excreted_value &lt;- f_extract_flow(\"excretion\", \"sewage network\", sankey_P) + f_extract_flow(\"excretion\", \"IAS\", sankey_P)\nP_excreted &lt;- runif(n = num_vals, min = P_excreted_value*0.44/0.44, max = P_excreted_value*0.58/0.44)\n\n# fraction of the population using individual autonomous systems, uniform distribution 15 to 20% (best estimate 18%)\nias_pop &lt;- runif(n = num_vals, min = 0.15, max = 0.2)\n\n# fraction of the excretion from people using IAS that is excreted in public spaces connected to sewers, uniform distribution 5 to 35%\nfrac_from_ias_to_sewers &lt;- runif(n = num_vals, min = 0.05, max = 0.35)\n\n# P EXCRETIONS TO IAS\nP_excr_IAS &lt;- P_excreted*ias_pop*(1-frac_from_ias_to_sewers)\nsankey_P &lt;- f_add_min_max(\"excretion\", \"IAS\", P_excr_IAS, sankey_P) #add min and max percentiles values\n\n# P EXCRETIONS TO SEWERS \nP_excr_sewers &lt;-  P_excreted - P_excr_IAS\nsankey_P &lt;- f_add_min_max(\"excretion\", \"sewage network\", P_excr_sewers, sankey_P) #add min and max percentiles values\n\n\n\n# RESIDUALS TO SEWERS\n\n# fraction lost in the sewers before reaching WWTPs, uniform distribution 5 to 20 %\nfrac_sewer_discharge &lt;- runif(n = num_vals, min = 0.05, max = 0.2) #create flow distribution\n\n# incoming P in the sewers\nP_in_sewers &lt;-  P_in_WWTP / (1 - frac_sewer_discharge)\n\n# first compute residuals coming to sewers\nP_residual_sewers = P_in_sewers - P_excr_sewers - P_industries #compute residuals\n\n#but sometimes residuals to sewers are &lt;0, not possible. Handle this problem\nmissing_input &lt;- P_residual_sewers &lt; 0 # checks if negative, i.e. P in sewers &lt; P exr + P industries: this means there cannot be a residual\nP_in_sewers[missing_input] &lt;- P_excr_sewers[missing_input] + P_industries[missing_input]  # if so, update P in sewers, equals to excr + industries\nP_residual_sewers[missing_input] = 0  # and set the residual to zero\nsankey_P &lt;- f_add_min_max(\"residual\", \"sewage network\", P_residual_sewers, sankey_P) #add min and max percentiles values\n\n\n\n# RESIDUALS TO IAS\nP_residual_IAS &lt;-  P_residual_sewers * ias_pop / (1 - ias_pop)  # residual assigned to IAS\nsankey_P &lt;- f_add_min_max(\"residual\", \"IAS\", P_residual_IAS, sankey_P) #add min and max percentiles values\n\n\n\n# LOSSES IN SEWERS\nP_lost_sewers &lt;-  P_in_sewers*frac_sewer_discharge\nsankey_P &lt;- f_add_min_max(\"sewage network\", \"water\", P_lost_sewers, sankey_P) #add min and max percentiles values\n\n\n\n# IAS TO GROUNDWATER\n\n# share of flow coming to IAS ending in gorundwater (uniform 80-90%)\nfrac_loss_IAS = runif(n=num_vals, min=0.8, max=0.9)\n\n# IAS to groundwater\nP_loss_IAS &lt;-  frac_loss_IAS * (P_residual_IAS + P_excr_IAS)\nsankey_P &lt;- f_add_min_max(\"IAS\", \"groundwater\", P_loss_IAS, sankey_P) #add min and max percentiles values\n\n\n\n# IAS TO WWTP \nP_IAS_to_WWTP &lt;-  P_residual_IAS + P_excr_IAS - P_loss_IAS\nsankey_P &lt;- f_add_min_max(\"IAS\", \"WWTP\", P_IAS_to_WWTP, sankey_P) #add min and max percentiles values\n\n\n\n# P SLUDGE (from WWTP to sludge)\nP_sludge &lt;-  P_in_WWTP - P_out_WWTP + P_IAS_to_WWTP\nsankey_P &lt;- f_add_min_max(\"WWTP\", \"sludge\", P_sludge, sankey_P) #add min and max percentiles values\n\n\n\n# P COMPOSTED OR SPREAD\n\n# share of sludge that is composted or spread, normal distribution 10% uncertainty\nfrac_sluge_recycled_value &lt;- f_extract_flow(\"sludge\", \"composted, spread\", sankey_P) /f_extract_flow(\"WWTP\", \"sludge\", sankey_P)\nfrac_sluge_recycled &lt;- rnorm(n=num_vals, mean=frac_sluge_recycled_value, sd=frac_sluge_recycled_value*per_SD_normal)\n\n# sludge composted or spread\nP_recycled &lt;-  frac_sluge_recycled*P_sludge\nsankey_P &lt;- f_add_min_max(\"sludge\", \"composted, spread\", P_recycled, sankey_P) #add min and max percentiles values\n\n\n\n# P LANDFILLED OR BURNT\nP_landfilled_burnt &lt;-  (P_sludge - P_recycled)\nsankey_P &lt;- f_add_min_max(\"sludge\", \"landfill, incineration..\", P_landfilled_burnt, sankey_P) #add min and max percentiles values\n\n\n\n\nCode\n# now save the Sankey with the min and max values\nwrite_csv(sankey_P, \"output_data/sankey_flows/phosphorus/sankey_P_flows_France.csv\")\n\n\n# Global Assessment\n\n# total P\nP_tot &lt;-  (P_excreted + P_residual_sewers + P_residual_IAS + P_industries)\nround(quantile(P_tot, c(.025, .975)), 1)\n\n# removal efficiency\nremoval_efficiency &lt;- (1-(P_out_WWTP)/P_in_WWTP)*100\nround(quantile(removal_efficiency, c(.025, .975)))\n\n# IAS and sewers losses\nP_IAS_and_sewers &lt;- (P_IAS_to_WWTP + P_lost_sewers)\nround(quantile(P_IAS_and_sewers, c(.025, .975)), 1)\nhist(P_IAS_and_sewers)\n\n\n\n\n\nCode\n# total residuals\nP_residuals &lt;- (P_residual_IAS + P_residual_sewers)\nround(quantile(P_residuals, c(.025, .975)), 1)\nhist(P_residuals)\n\n\n\n\n\nCode\n#OUT\n\n# % diffuse losses + surface water\nratio_losses &lt;-  (P_loss_IAS + P_out_WWTP + P_lost_sewers) / P_tot *100\nround(quantile(ratio_losses, c(.025, .975)))\n\n# % recycled\nratio_spread &lt;-  P_recycled / P_tot *100\nround(quantile(ratio_spread, c(.025, .975)))\n\n# % landfilled or burnt\nratio_landfilled_burnt &lt;- P_landfilled_burnt/P_tot*100\nround(quantile(ratio_landfilled_burnt, c(.025, .975)))\n\n\n# IN\n\n# share residuals\nratio_residual &lt;-  (P_residual_IAS + P_residual_sewers) / P_tot *100\nround(quantile(ratio_residual, c(.025, .975)))\n\n# share excretion\nratio_excretions &lt;-  P_excreted / P_tot *100\nround(quantile(ratio_excretions, c(.025, .975)))\n\n# share industries\nratio_industries &lt;-  P_industries / P_tot *100\nround(quantile(ratio_industries, c(.025, .975)))"
  },
  {
    "objectID": "31_Sankeys.html#n",
    "href": "31_Sankeys.html#n",
    "title": "Sankeys",
    "section": "N",
    "text": "N\n\n\nCode\n#reload Sankey N for whole France\nsankey_N &lt;- read_csv(\"output_data/sankey_flows/nitrogen/sankey_N_flows_France.csv\")\nsankey_N$min &lt;- NA #create min column for low range of percentile ditribution\nsankey_N$max &lt;- NA #create max column for high range of percentile ditribution\n\n\n\n# N IN WWTP (sewage network to WWTP)\n# normal distribution 10% uncertainty\nsource &lt;- \"sewage network\" ; target &lt;- \"WWTP\" #source and target of the flow\nN_in_WWTP &lt;- f_generate_normal_dstribution(source, target, sankey_N, print = F) #create flow distribution\nsankey_N &lt;- f_add_min_max(source, target, N_in_WWTP, sankey_N) #add min and max percentiles values\n\n\n\n# N OUT WWTP (WWTP to water), \n# normal distribution 10% uncertainty\nsource &lt;- \"WWTP\" ; target &lt;- \"water\" #source and target of the flow\nN_out_WWTP &lt;- f_generate_normal_dstribution(source, target, sankey_N, print = F) #create flow distribution\nsankey_N &lt;- f_add_min_max(source, target, N_out_WWTP, sankey_N) #add min and max percentiles values\n\n\n\n# N INDUSTRIES (large industries to sewage network)\n# normal distribution 10% uncertainty\nsource &lt;- \"large industries\" ; target &lt;- \"sewage network\" #source and target of the flow\nN_industries &lt;- f_generate_normal_dstribution(source, target, sankey_N, print = F) #create flow distribution\nsankey_N &lt;- f_add_min_max(source, target, N_industries, sankey_N) #add min and max percentiles values\n\n\n\n# N EXCRETIONS TO SEWERS AND IAS\n\n# excretions, normal distribution 10% uncertainty\nN_excreted_value &lt;- f_extract_flow(\"excretion\", \"sewage network\", sankey_N) + f_extract_flow(\"excretion\", \"IAS\", sankey_N)\nN_excreted &lt;- rnorm(n = num_vals, mean = N_excreted_value, sd = N_excreted_value * per_SD_normal)\n\n# fraction of the population using individual autonomous systems, uniform distribution 15 to 20% (best estimate 18%)\nias_pop &lt;- runif(n = num_vals, min = 0.15, max = 0.2)\n\n# fraction of the excretion from people using IAS that is excreted in public spaces connected to sewers, uniform distribution 5 to 35%\nfrac_from_ias_to_sewers &lt;- runif(n = num_vals, min = 0.05, max = 0.35)\n\n# N EXCRETIONS TO IAS\nN_excr_IAS &lt;- N_excreted*ias_pop*(1-frac_from_ias_to_sewers)\nsankey_N &lt;- f_add_min_max(\"excretion\", \"IAS\", N_excr_IAS, sankey_N) #add min and max percentiles values\n\n# N EXCRETIONS TO SEWERS \nN_excr_sewers &lt;-  N_excreted - N_excr_IAS\nsankey_N &lt;- f_add_min_max(\"excretion\", \"sewage network\", N_excr_sewers, sankey_N) #add min and max percentiles values\n\n\n\n# RESIDUALS TO SEWERS\n\n# fraction lost in the sewers before reaching WWTPs, uniform distribution 5 to 20 %\nfrac_sewer_discharge &lt;- runif(n = num_vals, min = 0.05, max = 0.2) #create flow distribution\n\n# incoming N in the sewers\nN_in_sewers &lt;-  N_in_WWTP / (1 - frac_sewer_discharge)\n\n# first compute residuals coming to sewers\nN_residual_sewers = N_in_sewers - N_excr_sewers - N_industries #compute residuals\n\n#but sometimes residuals to sewers are &lt;0, not possible. Handle this problem\nmissing_input &lt;- N_residual_sewers &lt; 0 # checks if negative, i.e. P in sewers &lt; P exr + P industries: this means there cannot be a residual\nN_in_sewers[missing_input] &lt;- N_excr_sewers[missing_input] + N_industries[missing_input]  # if so, update P in sewers, equals to excr + industries\nN_residual_sewers[missing_input] = 0  # and set the residual to zero\nsankey_N &lt;- f_add_min_max(\"residual\", \"sewage network\", N_residual_sewers, sankey_N) #add min and max percentiles values\n\n\n\n# RESIDUALS TO IAS\nN_residual_IAS &lt;-  N_residual_sewers * ias_pop / (1 - ias_pop)  # residual assigned to IAS\nsankey_N &lt;- f_add_min_max(\"residual\", \"IAS\", N_residual_IAS, sankey_N) #add min and max percentiles values\n\n\n\n# LOSSES IN SEWERS\nN_lost_sewers &lt;-  N_in_sewers*frac_sewer_discharge\nsankey_N &lt;- f_add_min_max(\"sewage network\", \"water\", N_lost_sewers, sankey_N) #add min and max percentiles values\n\n\n\n# IAS TO GROUNDWATER, WWTP AND AIR\n\n# share of flow coming to IAS ending in groundwater \nfrac_IAS_groundwater = runif(n=num_vals, min=0.7, max=0.95) # groundwater (uniform 80-90%)\nfrac_IAS_air = runif(n=num_vals, min=0.01, max=0.25) # groundwater (uniform 0-25%)\nfrac_IAS_WWTP = runif(n=num_vals, min=0.045, max = 0.055) # sludge, i.e. to WWTP (10% uncertainty on median value of 5%)\n\n# IAS to groundwater\nN_IAS_groundwater &lt;-  frac_IAS_groundwater * (N_residual_IAS + N_excr_IAS)\nsankey_N &lt;- f_add_min_max(\"IAS\", \"groundwater\", N_IAS_groundwater, sankey_N) #add min and max percentiles values\n\n# IAS TO WWTP \nN_IAS_to_WWTP &lt;-  frac_IAS_WWTP * (N_residual_IAS + N_excr_IAS)\nsankey_N &lt;- f_add_min_max(\"IAS\", \"WWTP\", N_IAS_to_WWTP, sankey_N) #add min and max percentiles values\n\n# IAS TO AIR \nN_IAS_to_air &lt;-  frac_IAS_air * (N_residual_IAS + N_excr_IAS)\nsankey_N &lt;- f_add_min_max(\"IAS\", \"air\", N_IAS_to_air, sankey_N) #add min and max percentiles values\n\n\n\n# N SLUDGE (from WWTP to sludge)\nN_P_ratio &lt;- runif(n=num_vals, min = 1, max = 3) # N:P sludge ration between 1 and 3\nN_sludge &lt;-  N_P_ratio*P_sludge\nsankey_N &lt;- f_add_min_max(\"WWTP\", \"sludge\", N_sludge, sankey_N) #add min and max percentiles values\n\n\n\n# N WWTP TO AIR\nN_WWTP_to_air &lt;-  N_in_WWTP - N_out_WWTP - N_sludge + N_IAS_to_WWTP #add N_IAS_to_WWTP to have consistent mass balance: false but very small\nsankey_N &lt;- f_add_min_max(\"WWTP\", \"air\", N_WWTP_to_air, sankey_N) #add min and max percentiles values\n\n\n\n# N COMPOSTED, SPREAD, LANDFILLED\n\n# share of sludge that is composted, directly spread, or landfilled/burnt. normal distribution 10% uncertainty\nfrac_sluge_composted_value &lt;- f_extract_flow(\"sludge\", \"composted\", sankey_N) /f_extract_flow(\"WWTP\", \"sludge\", sankey_N)\nfrac_sluge_spread_value &lt;- f_extract_flow(\"sludge\", \"spread\", sankey_N) /f_extract_flow(\"WWTP\", \"sludge\", sankey_N)\nfrac_sluge_landfilled_burnt_value &lt;- f_extract_flow(\"sludge\", \"landfill, incineration..\", sankey_N) /f_extract_flow(\"WWTP\", \"sludge\", sankey_N)\n\n# 10% uncertainties on these fractions\nfrac_sluge_composted &lt;- rnorm(n = num_vals, mean = frac_sluge_composted_value, sd = frac_sluge_composted_value * per_SD_normal)\nfrac_sluge_spread &lt;- rnorm(n = num_vals, mean = frac_sluge_spread_value, sd = frac_sluge_spread_value * per_SD_normal)\nfrac_sluge_landfilled_burnt &lt;- rnorm(n = num_vals, mean = frac_sluge_landfilled_burnt_value, sd = frac_sluge_landfilled_burnt_value * per_SD_normal)\n\n# N composted, spread, or landfilled/burnt\nN_composted &lt;-  frac_sluge_composted*N_sludge\nN_spread &lt;-  frac_sluge_spread*N_sludge\nN_landfilled_burnt &lt;-  frac_sluge_landfilled_burnt*N_sludge\n\n# add these 3 flows to sankey\nsankey_N &lt;- f_add_min_max(\"sludge\", \"composted\", N_composted, sankey_N) #add min and max percentiles values\nsankey_N &lt;- f_add_min_max(\"sludge\", \"spread\", N_spread, sankey_N) #add min and max percentiles values\nsankey_N &lt;- f_add_min_max(\"spread\", \"recycled\", N_spread, sankey_N) #add min and max percentiles values\nsankey_N &lt;- f_add_min_max(\"sludge\", \"landfill, incineration..\", N_landfilled_burnt, sankey_N) #add min and max percentiles values\n\n\n\n# N VOLATILIZED DURING COMPOST\nfrac_volatilized &lt;- runif(n = num_vals, min = 0.2, max = 0.4)\nN_compost_air &lt;- N_composted*frac_volatilized\nsankey_N &lt;- f_add_min_max(\"composted\", \"air\", N_compost_air, sankey_N) #add min and max percentiles values\nN_compost_recycled &lt;- N_composted*(1-frac_volatilized)\nsankey_N &lt;- f_add_min_max(\"composted\", \"recycled\", N_landfilled_burnt, sankey_N) #add min and max percentiles values\n\n\n\n\nCode\n# now save the Sankey with the min and max values\nwrite_csv(sankey_N, \"output_data/sankey_flows/nitrogen/sankey_N_flows_France.csv\")\n\n\n# Global Assessment\n\n# total N\nN_tot &lt;-  (N_excreted + N_residual_sewers + N_residual_IAS + N_industries)\nround(quantile(N_tot, c(.025, .975)), 1)\n\n# removal efficiency\nremoval_efficiency &lt;- (1-(N_out_WWTP)/N_in_WWTP)*100\nround(quantile(removal_efficiency, c(.025, .975)))\n\n\n#OUT\n\n# % diffuse losses + surface water\nratio_losses &lt;-  (N_IAS_groundwater + N_out_WWTP + N_lost_sewers) / N_tot *100\nround(quantile(ratio_losses, c(.025, .975)))\n\n# % recycled\nratio_recycled &lt;-  (N_compost_recycled + N_spread) / N_tot *100\nround(quantile(ratio_recycled, c(.025, .975)))\n\n# % air\nratio_landfilled_burnt &lt;- (N_WWTP_to_air + N_IAS_to_air + N_compost_air)/N_tot*100\nround(quantile(ratio_landfilled_burnt, c(.025, .975)))\n\n\n# IN\n\n# share residuals\nratio_residual &lt;-  (N_residual_IAS + N_residual_sewers) / N_tot *100\nround(quantile(ratio_residual, c(.025, .975)))\n\n# share excretion\nratio_excretions &lt;-  N_excreted / N_tot *100\nround(quantile(ratio_excretions, c(.025, .975)))\n\n# share industries\nratio_industries &lt;-  N_industries / N_tot *100\nround(quantile(ratio_industries, c(.025, .975)))"
  }
]